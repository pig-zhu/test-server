{"version":3,"file":"index-BZ7zQ1_9.js","sources":["../../node_modules/element-plus/es/components/breadcrumb/src/constants.mjs","../../node_modules/element-plus/es/components/breadcrumb/src/breadcrumb.mjs","../../node_modules/element-plus/es/components/breadcrumb/src/breadcrumb2.mjs","../../node_modules/element-plus/es/components/breadcrumb/src/breadcrumb-item.mjs","../../node_modules/element-plus/es/components/breadcrumb/src/breadcrumb-item2.mjs","../../node_modules/element-plus/es/components/breadcrumb/index.mjs","../../src/constants/JingDongAIGeneratorMessage.ts","../../src/pages/JingDong/components/components/LibraryVideoList.vue","../../src/pages/JingDong/components/components/SelectedItemsList.vue","../../src/pages/JingDong/components/components/BreadcrumbPath.vue","../../src/service/jingDong.js","../../src/pages/JingDong/components/SelectVideoDialog.vue","../../src/pages/JingDong/components/components/LibraryImageList.vue","../../src/pages/JingDong/components/SelectImageDialog.vue","../../src/pages/JingDong/components/components/LibraryMusicList.vue","../../src/pages/JingDong/components/SelectMusicDialog.vue","../../src/pages/JingDong/components/CreateTask.vue","../../src/pages/JingDong/components/TemplateLibrary.vue","../../src/pages/JingDong/index.vue"],"sourcesContent":["const breadcrumbKey = Symbol(\"breadcrumbKey\");\n\nexport { breadcrumbKey };\n//# sourceMappingURL=constants.mjs.map\n","import { buildProps } from '../../../utils/vue/props/runtime.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\n\nconst breadcrumbProps = buildProps({\n  separator: {\n    type: String,\n    default: \"/\"\n  },\n  separatorIcon: {\n    type: iconPropType\n  }\n});\n\nexport { breadcrumbProps };\n//# sourceMappingURL=breadcrumb.mjs.map\n","import { defineComponent, ref, provide, onMounted, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport { breadcrumbKey } from './constants.mjs';\nimport { breadcrumbProps } from './breadcrumb.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst __default__ = defineComponent({\n  name: \"ElBreadcrumb\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: breadcrumbProps,\n  setup(__props) {\n    const props = __props;\n    const { t } = useLocale();\n    const ns = useNamespace(\"breadcrumb\");\n    const breadcrumb = ref();\n    provide(breadcrumbKey, props);\n    onMounted(() => {\n      const items = breadcrumb.value.querySelectorAll(`.${ns.e(\"item\")}`);\n      if (items.length) {\n        items[items.length - 1].setAttribute(\"aria-current\", \"page\");\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"breadcrumb\",\n        ref: breadcrumb,\n        class: normalizeClass(unref(ns).b()),\n        \"aria-label\": unref(t)(\"el.breadcrumb.label\"),\n        role: \"navigation\"\n      }, [\n        renderSlot(_ctx.$slots, \"default\")\n      ], 10, [\"aria-label\"]);\n    };\n  }\n});\nvar Breadcrumb = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"breadcrumb.vue\"]]);\n\nexport { Breadcrumb as default };\n//# sourceMappingURL=breadcrumb2.mjs.map\n","import { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\n\nconst breadcrumbItemProps = buildProps({\n  to: {\n    type: definePropType([String, Object]),\n    default: \"\"\n  },\n  replace: Boolean\n});\n\nexport { breadcrumbItemProps };\n//# sourceMappingURL=breadcrumb-item.mjs.map\n","import { defineComponent, getCurrentInstance, inject, ref, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { breadcrumbKey } from './constants.mjs';\nimport { breadcrumbItemProps } from './breadcrumb-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst __default__ = defineComponent({\n  name: \"ElBreadcrumbItem\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: breadcrumbItemProps,\n  setup(__props) {\n    const props = __props;\n    const instance = getCurrentInstance();\n    const breadcrumbContext = inject(breadcrumbKey, void 0);\n    const ns = useNamespace(\"breadcrumb\");\n    const router = instance.appContext.config.globalProperties.$router;\n    const link = ref();\n    const onClick = () => {\n      if (!props.to || !router)\n        return;\n      props.replace ? router.replace(props.to) : router.push(props.to);\n    };\n    return (_ctx, _cache) => {\n      var _a, _b;\n      return openBlock(), createElementBlock(\"span\", {\n        class: normalizeClass(unref(ns).e(\"item\"))\n      }, [\n        createElementVNode(\"span\", {\n          ref_key: \"link\",\n          ref: link,\n          class: normalizeClass([unref(ns).e(\"inner\"), unref(ns).is(\"link\", !!_ctx.to)]),\n          role: \"link\",\n          onClick\n        }, [\n          renderSlot(_ctx.$slots, \"default\")\n        ], 2),\n        ((_a = unref(breadcrumbContext)) == null ? void 0 : _a.separatorIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n          key: 0,\n          class: normalizeClass(unref(ns).e(\"separator\"))\n        }, {\n          default: withCtx(() => [\n            (openBlock(), createBlock(resolveDynamicComponent(unref(breadcrumbContext).separatorIcon)))\n          ]),\n          _: 1\n        }, 8, [\"class\"])) : (openBlock(), createElementBlock(\"span\", {\n          key: 1,\n          class: normalizeClass(unref(ns).e(\"separator\")),\n          role: \"presentation\"\n        }, toDisplayString((_b = unref(breadcrumbContext)) == null ? void 0 : _b.separator), 3))\n      ], 2);\n    };\n  }\n});\nvar BreadcrumbItem = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"breadcrumb-item.vue\"]]);\n\nexport { BreadcrumbItem as default };\n//# sourceMappingURL=breadcrumb-item2.mjs.map\n","import Breadcrumb from './src/breadcrumb2.mjs';\nimport BreadcrumbItem from './src/breadcrumb-item2.mjs';\nexport { breadcrumbProps } from './src/breadcrumb.mjs';\nexport { breadcrumbItemProps } from './src/breadcrumb-item.mjs';\nexport { breadcrumbKey } from './src/constants.mjs';\nimport { withInstall, withNoopInstall } from '../../utils/vue/install.mjs';\n\nconst ElBreadcrumb = withInstall(Breadcrumb, {\n  BreadcrumbItem\n});\nconst ElBreadcrumbItem = withNoopInstall(BreadcrumbItem);\n\nexport { ElBreadcrumb, ElBreadcrumbItem, ElBreadcrumb as default };\n//# sourceMappingURL=index.mjs.map\n","import { ref } from 'vue'\r\n\r\n// 图文智绘模块的tabs\r\nexport const TABS = ref([\r\n  {\r\n    label: '创建任务',\r\n    value: 'createTask',\r\n  },\r\n  {\r\n    label: '原料库',\r\n    value: 'templateLibrary',\r\n  }\r\n])","<template>\r\n  <div class=\"template-library-container\">\r\n    <div class=\"resource-layout\">\r\n      <div class=\"right-panel\">\r\n        <!-- 模板列表 -->\r\n        <div class=\"materials-display\" @scroll=\"handleScroll\">\r\n          <el-checkbox-group\r\n            v-model=\"selectedTemplates\"\r\n            @change=\"handleSelectionChange\"\r\n            class=\"template-grid\"\r\n          >\r\n            <!-- 文件夹项 -->\r\n            <div v-for=\"(template, index) in filteredTemplates\" :key=\"index\" class=\"template-item\">\r\n              <!-- 文件夹显示 -->\r\n              <template v-if=\"template.element_type === 'FOLDER'\">\r\n                <div class=\"template-content folder-content\" @click=\"handleFolderClick(template)\">\r\n                  <el-icon :size=\"60\"><Folder /></el-icon>\r\n                  <div class=\"template-name\" :title=\"template.element_name || '未命名文件夹'\">\r\n                    {{ template.element_name || '未命名文件夹' }}\r\n                  </div>\r\n                </div>\r\n              </template>\r\n              <!-- 视频显示 -->\r\n              <template v-else>\r\n                <div class=\"template-content\">\r\n                  <video\r\n                    :src=\"template.element_url\"\r\n                    :key=\"template.element_id\"\r\n                    class=\"preview\"\r\n                    controls\r\n                    preload=\"metadata\"\r\n                    @play=\"handlePlay\"\r\n                  ></video>\r\n                  <div class=\"template-name\" :title=\"template.element_name || '未命名视频'\">\r\n                    {{ template.element_name || '未命名视频' }}\r\n                  </div>\r\n                  <el-checkbox\r\n                    :label=\"template\"\r\n                    class=\"template-checkbox\"\r\n                    :disabled=\"isTemplateDisabled(template)\"\r\n                    :title=\"\r\n                      isTemplateDisabled(template) ? `已达到最大选择数量 ${props.maxCount}` : ''\r\n                    \"\r\n                  ></el-checkbox>\r\n                </div>\r\n              </template>\r\n            </div>\r\n          </el-checkbox-group>\r\n          <!-- 空状态 -->\r\n          <div v-if=\"filteredTemplates.length === 0\" class=\"empty-state\">\r\n            <el-empty description=\"暂无视频\"></el-empty>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Folder } from '@element-plus/icons-vue' // 添加文件夹图标导入\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  dataList: {\r\n    // 接收父组件的数据列表\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  selectedData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  maxCount: {\r\n    type: Number,\r\n    default: 20\r\n  }\r\n})\r\n// 定义事件\r\nconst emit = defineEmits(['selection-change', 'folder-click', 'scroll'])\r\n\r\nconst selectedTemplates = ref([])\r\nconst selectedTemplateIds = ref([])\r\n\r\n// 过滤后的模板列表\r\nconst filteredTemplates = computed(() => {\r\n  return props.dataList || []\r\n})\r\n// 添加计算属性判断是否达到最大选择数量\r\nconst isTemplateDisabled = (template) => {\r\n  return (\r\n    selectedTemplates.value.length >= props.maxCount &&\r\n    !selectedTemplates.value.some((item) => item.element_id === template.element_id)\r\n  )\r\n}\r\n// 清空选中状态的方法\r\nconst clearSelection = () => {\r\n  selectedTemplates.value = []\r\n  selectedTemplateIds.value = []\r\n  // 通知父组件，选中项已清空\r\n}\r\n\r\n// 更新选中状态\r\nconst updateSelectedTemplates = () => {\r\n  selectedTemplates.value = selectedTemplateIds.value\r\n    .map((id) => {\r\n      const template = props.dataList.find((item) => item.element_id === id)\r\n      return template ? template : selectedTemplates.value.find((item) => item.element_id === id)\r\n    })\r\n    .filter((item) => item && item.element_id)\r\n}\r\nconst currentPlayingVideo = ref(null)\r\n\r\nconst handlePlay = (event) => {\r\n  const video = event.target\r\n  if (currentPlayingVideo.value && currentPlayingVideo.value !== video) {\r\n    currentPlayingVideo.value.pause()\r\n  }\r\n  currentPlayingVideo.value = video\r\n}\r\n// 设置选中模板\r\nconst setSelectedTemplates = (templates) => {\r\n  // console.log('设置选中模板', templates)\r\n  if (templates?.length) {\r\n    selectedTemplates.value = templates\r\n    selectedTemplateIds.value = templates.map((item) => item.element_id)\r\n  } else {\r\n    selectedTemplates.value = []\r\n    selectedTemplateIds.value = []\r\n  }\r\n}\r\n// 处理选择变化\r\nconst handleSelectionChange = (value) => {\r\n  // 获取当前选中和取消选中的项\r\n  const currentIds = value.map((item) => item.element_id)\r\n  // 合并ID列表，保持之前选中的状态\r\n  selectedTemplateIds.value = Array.from(\r\n    new Set([...selectedTemplateIds.value, ...currentIds])\r\n  ).filter((id) => {\r\n    // 如果在当前视图中取消选中，则从总列表中移除\r\n    if (props.dataList.some((item) => item.element_id === id)) {\r\n      return currentIds.includes(id)\r\n    }\r\n    // 不在当前视图中的ID保持原状\r\n    return true\r\n  })\r\n  // 更新本地选中状态\r\n  updateSelectedTemplates()\r\n  // 通知父组件，传递所有选中项的完整数据\r\n  emit('selection-change', selectedTemplates.value)\r\n}\r\n// 添加防抖函数\r\nconst debounce = (fn, delay) => {\r\n  let timer = null\r\n  return function (...args) {\r\n    if (timer) clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(this, args)\r\n    }, delay)\r\n  }\r\n}\r\n// 处理滚动\r\nconst isLoading = ref(false)\r\nconst handleScroll = debounce((e) => {\r\n  const { scrollTop, scrollHeight, clientHeight } = e.target\r\n  if (Math.abs(scrollHeight - scrollTop - clientHeight) <= 1 && !isLoading.value) {\r\n    isLoading.value = true\r\n    emit('scroll')\r\n    // 1秒后重置状态，防止频繁触发\r\n    setTimeout(() => {\r\n      isLoading.value = false\r\n    }, 1000)\r\n  }\r\n}, 200) // 200ms 的防抖延迟\r\n\r\n// 处理文件夹点击\r\nconst handleFolderClick = (folder) => {\r\n  emit('folder-click', folder)\r\n}\r\n// 监听父组件传入的selectedData变化\r\nwatch(\r\n  () => props.selectedData,\r\n  (newVal) => {\r\n    if (newVal?.length) {\r\n      // 更新选中ID列表\r\n      selectedTemplateIds.value = newVal.map((item) => item.element_id)\r\n      updateSelectedTemplates()\r\n    }\r\n  },\r\n  { immediate: true }\r\n)\r\n\r\n// 监听数据列表变化\r\nwatch(\r\n  () => props.dataList,\r\n  () => {\r\n    // 当数据列表更新时，根据已保存的ID重新设置选中状态\r\n    updateSelectedTemplates()\r\n  }\r\n)\r\n// 暴露方法\r\ndefineExpose({\r\n  setSelectedTemplates,\r\n  clearSelection\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-container {\r\n  height: 100%;\r\n  width: 100%;\r\n  // max-height: 55vh; // 设置最大高度为视窗高度的80%\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.resource-layout {\r\n  flex: 1;\r\n  display: flex;\r\n  background-color: #ffffff;\r\n  overflow: hidden; // 防止内容溢出\r\n}\r\n\r\n.right-panel {\r\n  flex: 1;\r\n  padding: 20px 20px 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  overflow: hidden; // 防止内容溢出\r\n}\r\n\r\n.materials-display {\r\n  flex: 1;\r\n  overflow-y: auto; // 添加垂直滚动\r\n  margin-right: -10px; // 抵消padding-right造成的宽度增加\r\n  padding-right: 10px; // 为滚动条预留空间\r\n\r\n  // 自定义滚动条样式\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #e4e7ed;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n.template-grid {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 30px;\r\n  width: 100%;\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.template-item {\r\n  flex: 0 0 200px;\r\n  position: relative;\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  background: #fff;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n  }\r\n}\r\n\r\n.template-content {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .preview {\r\n    // width: 100%;\r\n    height: 352px;\r\n    object-fit: cover;\r\n  }\r\n\r\n  .template-name {\r\n    padding: 24px 12px;\r\n    min-height: 48px;\r\n    font-size: 14px;\r\n    color: #606266;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    border-top: 1px solid #f0f0f0;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    cursor: pointer; // 添加指针样式提示可悬停\r\n\r\n    &:hover {\r\n      color: #409eff; // 悬停时变色\r\n    }\r\n\r\n    &[title] {\r\n      position: relative;\r\n\r\n      &:hover::after {\r\n        content: attr(title);\r\n        position: absolute;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        bottom: 100%;\r\n        padding: 5px 10px;\r\n        background: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        border-radius: 4px;\r\n        font-size: 12px;\r\n        white-space: nowrap;\r\n        z-index: 10;\r\n      }\r\n    }\r\n  }\r\n}\r\n:deep(.template-checkbox) {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  margin: 0;\r\n  z-index: 10;\r\n  border-radius: 4px;\r\n  padding: 4px;\r\n\r\n  .el-checkbox__input {\r\n    position: static;\r\n    margin-right: 0;\r\n    z-index: 2;\r\n\r\n    .el-checkbox__inner {\r\n      background-color: transparent; // 未选中时透明背景\r\n      border-color: #dcdfe6; // 灰色边框\r\n      width: 24px;\r\n      height: 24px;\r\n      border-radius: 4px;\r\n\r\n      &::after {\r\n        height: 12px;\r\n        width: 6px;\r\n        left: 8px;\r\n        top: 4px;\r\n        border-right: 2px solid #fff;\r\n        border-bottom: 2px solid #fff;\r\n      }\r\n    }\r\n    &.is-checked .el-checkbox__inner {\r\n      background-color: #409eff; // 选中时蓝色背景\r\n      border-color: #409eff;\r\n      &::after {\r\n        transform: rotate(45deg) scaleY(1);\r\n      }\r\n      &:hover {\r\n        background-color: #409eff; // 选中状态下悬浮保持背景色不变\r\n      }\r\n    }\r\n    &:hover .el-checkbox__inner {\r\n      background-color: rgba(255, 255, 255, 0.9);\r\n      border-color: #409eff; // 悬停时边框变蓝\r\n    }\r\n  }\r\n\r\n  .el-checkbox__label {\r\n    display: none;\r\n  }\r\n}\r\n.template-name {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.empty-state {\r\n  padding: 40px 0;\r\n  text-align: center;\r\n}\r\n.search-box {\r\n  width: 250px;\r\n  :deep(.el-input__wrapper) {\r\n    border-radius: 20px;\r\n    background-color: #f5f7fa;\r\n    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n  :deep(.el-input__inner) {\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n.folder-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  cursor: pointer;\r\n  color: #606266;\r\n  background: #f7f8fa;\r\n  border-radius: 8px;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: #409eff;\r\n    background: #f0f7ff;\r\n  }\r\n\r\n  .el-icon {\r\n    font-size: 40px;\r\n    margin-top: auto; // 将图标推到顶部\r\n    margin-bottom: auto; // 图标与底部文字保持距离\r\n    color: #409eff;\r\n  }\r\n\r\n  .template-name {\r\n    text-align: center;\r\n    padding: 24px 12px; // 与视频项保持一致的内边距\r\n    min-height: 48px; // 与视频项保持一致的最小高度\r\n    font-size: 14px;\r\n    color: inherit;\r\n    background-color: #fff; // 与视频项保持一致的背景色\r\n    border-top: 1px solid #f0f0f0; // 与视频项保持一致的边框\r\n    width: 100%;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    &:hover {\r\n      color: #409eff;\r\n    }\r\n\r\n    &[title]:hover::after {\r\n      content: attr(title);\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      bottom: 100%;\r\n      padding: 5px 10px;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      color: white;\r\n      border-radius: 4px;\r\n      font-size: 12px;\r\n      white-space: nowrap;\r\n      z-index: 10;\r\n    }\r\n  }\r\n}\r\n\r\n// 添加提示样式\r\n.template-checkbox[title]:hover::after {\r\n  content: attr(title);\r\n  position: absolute;\r\n  top: -30px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 5px 10px;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  z-index: 10;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"selected-area\">\r\n    <div class=\"selected-title\">{{ title }}</div>\r\n    <div class=\"selected-list\">\r\n      <template v-for=\"(videos, type) in selectedList\" :key=\"type\">\r\n        <div class=\"selected-category\">\r\n          <h3 class=\"category-title\" @click=\"toggleCategory(type)\">\r\n            {{ getCategoryLabel(type) }} ({{ videos.length }}/{{ maxItemsByType[type] }})\r\n            <el-icon class=\"toggle-icon\">\r\n              <ArrowDown v-if=\"isCategoryCollapsed(type)\" />\r\n              <ArrowUp v-else />\r\n            </el-icon>\r\n          </h3>\r\n          <div v-if=\"!isCategoryCollapsed(type)\">\r\n            <div v-if=\"videos.length === 0\" class=\"empty-category\">\r\n              <span>暂无选中内容</span>\r\n            </div>\r\n            <div v-else v-for=\"(item, index) in videos\" :key=\"index\" class=\"selected-item\">\r\n              <span class=\"item-name\" :title=\"item.element_name\">{{ item.element_name }}</span>\r\n              <el-icon class=\"remove-icon\" @click=\"handleRemove(item,type)\">\r\n                <Close />\r\n              </el-icon>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n    </div>\r\n    <div class=\"clear-btn-wrapper\">\r\n      <el-button @click=\"handleClear\" type=\"info\" plain>{{ clearButtonText }}</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue'\r\nimport { Close, ArrowDown, ArrowUp } from '@element-plus/icons-vue'\r\n\r\nconst props = defineProps({\r\n  title: {\r\n    type: String,\r\n    default: '已选原料'\r\n  },\r\n  selectedList: {\r\n    type: Object,\r\n    default: () => ({\r\n      RAW: [],\r\n      PRE_VIDEO: [],\r\n      POST_VIDEO: [],\r\n      FOREGROUND: [],\r\n      BACKGROUND: [],\r\n      BGM: []\r\n    })\r\n  },\r\n  emptyText: {\r\n    type: String,\r\n    default: '暂无选中内容'\r\n  },\r\n  clearButtonText: {\r\n    type: String,\r\n    default: '清空选中'\r\n  },\r\n  maxItemsByType: {\r\n    type: Object,\r\n    default: () => ({\r\n      RAW: 20,\r\n      PRE_VIDEO: 1,\r\n      POST_VIDEO: 1,\r\n      FOREGROUND: 1,\r\n      BACKGROUND: 1,\r\n      BGM: 1,\r\n    })\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['remove', 'clear'])\r\n\r\nconst handleRemove = (item, type) => {\r\n  emit('remove', item, type)\r\n}\r\n\r\nconst handleClear = () => {\r\n  emit('clear')\r\n}\r\n\r\nconst getCategoryLabel = (type) => {\r\n  const labels = {\r\n    RAW: '剪辑素材',\r\n    PRE_VIDEO: '前贴',\r\n    POST_VIDEO: '后贴',\r\n    FOREGROUND: '前景',\r\n    BACKGROUND: '背景',\r\n    BGM: '背景音乐'\r\n  }\r\n  return labels[type] || '未知类别'\r\n}\r\n\r\nconst collapsedCategories = ref({})\r\n\r\nconst toggleCategory = (type) => {\r\n  collapsedCategories.value[type] = !collapsedCategories.value[type]\r\n}\r\n\r\nconst isCategoryCollapsed = (type) => {\r\n  return collapsedCategories.value[type] || false\r\n}\r\n// 暴露方法\r\ndefineExpose({\r\n  isCategoryCollapsed,\r\n  toggleCategory,\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.selected-area {\r\n  width: 300px;\r\n  flex-shrink: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-right: 1px solid #e4e7ed;\r\n  padding-right: 24px;\r\n  background: #f8f9fb;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n}\r\n\r\n.selected-title {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 16px;\r\n  border-bottom: 1px solid #e4e7ed;\r\n  background: linear-gradient(\r\n    135deg,\r\n    rgba(128, 135, 255, 0.15),\r\n    rgba(116, 189, 255, 0.15),\r\n    rgba(124, 239, 203, 0.15)\r\n  );\r\n  padding: 16px;\r\n  border-radius: 6px;\r\n  margin: -20px -20px 20px;\r\n}\r\n\r\n.selected-list {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding-right: 8px;\r\n  margin: 0 -10px;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 4px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgba(144, 147, 153, 0.3);\r\n    border-radius: 4px;\r\n    \r\n    &:hover {\r\n      background-color: rgba(144, 147, 153, 0.5);\r\n    }\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n.selected-item {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px 16px;\r\n  // background: #fff;\r\n  // background-color: #f0f4f8; // 更改背景色\r\n  background-color: #f8f9fb; // 更改背景色\r\n  border-radius: 6px;\r\n  margin-bottom: 8px;\r\n  transition: all 0.3s ease;\r\n  border: 1px solid #e4e7ed;\r\n  \r\n  &:hover {\r\n    transform: translateX(4px);\r\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);\r\n    border-color: #d4d7de;\r\n  }\r\n\r\n  .item-name {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    font-size: 14px;\r\n    color: #606266;\r\n    margin-right: 12px;\r\n  }\r\n\r\n  .remove-icon {\r\n    cursor: pointer;\r\n    color: #909399;\r\n    font-size: 24px;\r\n    padding: 4px;\r\n    border-radius: 4px;\r\n    transition: all 0.3s ease;\r\n    \r\n    &:hover {\r\n      color: #409EFF;\r\n      background-color: rgba(64, 158, 255, 0.1);\r\n    }\r\n  }\r\n}\r\n\r\n.empty-selected {\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #909399;\r\n  \r\n  :deep(.el-empty__description) {\r\n    margin-top: 0;\r\n  }\r\n}\r\n\r\n.clear-btn-wrapper {\r\n  padding: 20px 0 0;\r\n  border-top: 1px solid #e4e7ed;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n\r\n  .el-button {\r\n    width: 100%;\r\n    border-radius: 6px;\r\n    background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n    border: none;\r\n    color: #fff;\r\n    padding: 10px 24px;\r\n    transition: all 0.3s ease;\r\n    \r\n    &:hover {\r\n      transform: translateY(-1px);\r\n      box-shadow: 0 4px 12px rgba(var(--primary-blue-rgb), 0.2);\r\n    }\r\n\r\n    &.is-plain {\r\n      background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n      border: none;\r\n      color: #fff;\r\n    }\r\n  }\r\n}\r\n.selected-category {\r\n  margin-bottom: 20px;\r\n  border: 1px solid #e4e7ed; // 添加边框\r\n  border-radius: 6px; // 添加圆角\r\n  padding: 10px; // 添加内边距\r\n  background-color: #f0f4f8; // 更改背景色\r\n  background: #fff;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); // 添加阴影\r\n}\r\n\r\n.category-title {\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  margin: -10px -10px 10px;\r\n  color: #303133;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background: linear-gradient(\r\n    135deg,\r\n    rgba(128, 135, 255, 0.15),\r\n    rgba(116, 189, 255, 0.15),\r\n    rgba(124, 239, 203, 0.15)\r\n  );\r\n  padding: 8px; // 添加内边距\r\n  border-radius: 4px; // 添加圆角\r\n}\r\n\r\n.toggle-icon {\r\n  font-size: 16px;\r\n  color: #606266;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.empty-category {\r\n  padding: 10px;\r\n  color: #909399;\r\n  text-align: center;\r\n}\r\n</style>","<template>\r\n  <div class=\"path-display\">\r\n    <el-breadcrumb separator=\"/\">\r\n      <div class=\"path-wrapper\">\r\n        <el-icon v-if=\"path !== '/'\" class=\"back-icon\" title=\"返回上一级\" @click=\"handleBackPath\">\r\n          <ArrowLeft />\r\n        </el-icon>\r\n        <div class=\"path-label\">当前路径:</div>\r\n        <el-breadcrumb-item class=\"clickable\" @click=\"emitPathClick('/')\"\r\n          >根目录</el-breadcrumb-item\r\n        >\r\n        <template v-for=\"(folder, index) in pathArray\" :key=\"index\">\r\n          <el-breadcrumb-item\r\n            class=\"clickable\"\r\n            v-if=\"index < pathArray.length - 1\"\r\n            @click=\"emitPathClick(getPathByIndex(index))\"\r\n          >\r\n            {{ folder }}\r\n          </el-breadcrumb-item>\r\n          <el-breadcrumb-item v-else class=\"clickable\">\r\n            {{ folder }}\r\n          </el-breadcrumb-item>\r\n        </template>\r\n      </div>\r\n    </el-breadcrumb>\r\n    <!-- 添加刷新按钮 -->\r\n    <el-icon class=\"refresh-icon\" title=\"刷新列表\" @click=\"emitPathClick(path)\">\r\n      <Refresh />\r\n    </el-icon>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue'\r\nimport { ArrowLeft } from '@element-plus/icons-vue'\r\nimport { Refresh } from '@element-plus/icons-vue'\r\n\r\nconst props = defineProps({\r\n  path: {\r\n    type: String,\r\n    default: '/'\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['path-click'])\r\n\r\nconst pathArray = computed(() => {\r\n  return props.path.startsWith('/')\r\n    ? props.path.substring(1).split('/').filter(Boolean)\r\n    : props.path.split('/').filter(Boolean)\r\n})\r\n\r\nconst getPathByIndex = (index) => {\r\n  return '/' + pathArray.value.slice(0, index + 1).join('/')\r\n}\r\n\r\nconst handleBackPath = () => {\r\n  const currentPath = props.path\r\n  if (currentPath === '/') return\r\n\r\n  const lastSlashIndex = currentPath.lastIndexOf('/')\r\n  const parentPath = lastSlashIndex === 0 ? '/' : currentPath.substring(0, lastSlashIndex)\r\n\r\n  emit('path-click', parentPath)\r\n}\r\nconst emitPathClick = (path) => {\r\n  emit('path-click', path)\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.path-display {\r\n  padding: 0 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  .path-wrapper {\r\n    display: flex;\r\n    align-items: flex-start; // 改为flex-start以支持多行文本\r\n    gap: 8px;\r\n    flex-wrap: wrap; // 允许内容换行\r\n  }\r\n  .refresh-icon {\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    color: #606266;\r\n    transition: all 0.3s ease;\r\n    margin-left: 8px;\r\n\r\n    &:hover {\r\n      color: #409eff;\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n  .path-label {\r\n    color: #606266;\r\n    font-size: 14px;\r\n  }\r\n\r\n  .back-icon {\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    color: #606266;\r\n    transition: all 0.3s ease;\r\n\r\n    &:hover {\r\n      color: #409eff;\r\n      transform: translateX(-2px);\r\n    }\r\n  }\r\n\r\n  :deep(.el-breadcrumb__item) {\r\n    color: #606266;\r\n    font-size: 14px;\r\n    max-width: 300px; // 增加最大宽度\r\n\r\n    :deep(.el-breadcrumb__inner) {\r\n      white-space: normal; // 允许文本换行\r\n      word-wrap: break-word; // 允许长单词换行\r\n      word-break: break-all; // 允许在任意字符间换行\r\n      overflow: visible; // 显示所有内容\r\n      text-overflow: clip; // 移除省略号\r\n      max-width: 100%;\r\n      display: inline-block;\r\n      line-height: 1.4; // 添加适当的行高\r\n      padding: 4px 0; // 添加一些内边距\r\n    }\r\n\r\n    &.clickable :deep(.el-breadcrumb__inner) {\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        color: #409eff;\r\n      }\r\n    }\r\n\r\n    // 添加根目录特殊样式\r\n    &:first-child.clickable :deep(.el-breadcrumb__inner) {\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        color: #409eff;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import request from '../utils/axios'\r\n\r\n// 获取原料列表\r\nexport const getElementList = async(params) => {\r\n  return request({\r\n    url: `/jd_aic/element/list`,\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n//视频剪辑(暂未使用)\r\nexport const postVideoMixCut = async(data) => {\r\n  return request({\r\n    url: `/jd_aic/video_mix_cut`,\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n// 图片剪辑(暂未使用)\r\nexport const postImageMixCut = async(data) => {\r\n  return request({\r\n    url: `/jd_aic/image_mix_cut`,\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n// 剪辑通用\r\nexport const postMixCut = async(data) => {\r\n  return request({\r\n    url: `/jd_aic/mix_cut`,\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n// 刷新单条任务生成结果\r\nexport const getTaskResult = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/task/result/${params.task_id}`,\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n// 获取任务生成结果列表\r\nexport const getTaskList = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/task/list`,\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n// 将任务结果保存至即创\r\nexport const postTaskSave = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/task/save`,\r\n    method: 'post',\r\n    data: params\r\n  })\r\n}\r\n// 获取已保存的即创素材 \r\nexport const getMaterialList = async () => {\r\n  return request({\r\n    url: `/jd_aic/material/list`,\r\n    method: 'get'\r\n  })\r\n}\r\n// 推送即创素材至广告主账号(暂未使用)\r\nexport const postMaterialPush = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/material/push`,\r\n    method: 'post',\r\n    data: params\r\n  })\r\n}\r\n// 授权回调地址(暂未使用)\r\nexport const getAuthorizeCallback = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/auth/callback`,\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n// 设置token(暂未使用)\r\nexport const setAdminToken = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/admin/set_token`,\r\n    method: 'post',\r\n    data: params\r\n  })\r\n}\r\n// 刷新token(暂未使用)\r\nexport const refreshAdminToken = async () => {\r\n  return request({\r\n    url: `/jd_aic/admin/refresh_token`,\r\n    method: 'post'\r\n  })\r\n}\r\n// 获取商品信息\r\nexport const getProductInfo = async (params) => {\r\n  return request({\r\n    url: `/jd_aic/product/info`,\r\n    method: 'get',\r\n    params\r\n  })\r\n}","<template>\r\n  <el-dialog\r\n    v-model=\"dialogVisible\"\r\n    title=\"选择视频\"\r\n    width=\"85%\"\r\n    class=\"template-library-dialog\"\r\n    top=\"5vh\"\r\n    @close=\"handleDialogClose\"\r\n  >\r\n    <div class=\"dialog-content\">\r\n      <SelectedItemsList\r\n        ref=\"selectedItemsRef\"\r\n        title=\"已选视频\"\r\n        :selected-list=\"selectedList\"\r\n        empty-text=\"暂无选中视频\"\r\n        :maxItemsByType=\"maxItemsByType\"\r\n        @remove=\"removeSelected\"\r\n        @clear=\"handleCancel\"\r\n      />\r\n      <!-- 右侧视频列表区域 -->\r\n      <div class=\"video-list-area\">\r\n        <!-- 搜索框 -->\r\n        <div class=\"search-box\">\r\n          <div class=\"search-btn\">\r\n            <label class=\"select-label\">筛选原料用途:</label>\r\n            <el-select\r\n              v-model=\"filterOption\"\r\n              placeholder=\"选择原料用途\"\r\n              class=\"select-box\"\r\n              @change=\"handleFilterChange\"\r\n              clearable\r\n            >\r\n              <el-option\r\n                v-for=\"option in videoOptions\"\r\n                :key=\"option.value\"\r\n                :label=\"option.label\"\r\n                :value=\"option.value\"\r\n              ></el-option>\r\n            </el-select>\r\n          </div>\r\n          <el-input\r\n            class=\"custom-search-input\"\r\n            v-model=\"searchKey\"\r\n            placeholder=\"搜索关键字...\"\r\n            clearable\r\n            size=\"large\"\r\n            @clear=\"handleSearch\"\r\n            @keyup.enter=\"handleSearch\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Search /></el-icon>\r\n            </template>\r\n          </el-input>\r\n        </div>\r\n        <!-- 文件路径 -->\r\n        <BreadcrumbPath :path=\"currentPath\" @path-click=\"handlePathClick\" />\r\n        <!-- 添加加载状态 -->\r\n        <div class=\"loading-container\" v-loading=\"VideoLoading\" element-loading-text=\"加载中...\">\r\n          <LibraryVideoList\r\n            ref=\"libraryRef\"\r\n            :visible=\"dialogVisible\"\r\n            :selected-data=\"selectedList\"\r\n            :data-list=\"videoList\"\r\n            :maxCount=\"maxItemsByType[addOption]\"\r\n            @selection-change=\"handleSelectionChange\"\r\n            @folder-click=\"handleFolderClick\"\r\n            @scroll=\"handleScroll\"\r\n          />\r\n        </div>\r\n        <div v-if=\"isVideoLoadMore\" class=\"bottom-loading\">\r\n          <el-icon class=\"loading-icon\"><Loading /></el-icon>\r\n          <span class=\"loading-text\">加载更多...</span>\r\n        </div>\r\n        <div\r\n          v-else-if=\"\r\n            !VideoLoading &&\r\n            !isVideoLoadMore &&\r\n            videoList.length > 0 &&\r\n            videoList.length == videoTotalNumber + folderTotalNumber\r\n          \"\r\n          class=\"no-more\"\r\n        >\r\n          <span class=\"no-more-text\">已加载全部数据</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <label class=\"select-label\">添加为:</label>\r\n        <el-select v-model=\"addOption\" placeholder=\"选择原料用途\" class=\"select-box\">\r\n          <el-option\r\n            v-for=\"option in videoOptions\"\r\n            :key=\"option.value\"\r\n            :label=\"option.label\"\r\n            :value=\"option.value\"\r\n            :disabled=\"props.disabledVideoTypes.includes(option.value)\"\r\n            :title=\"getDisabledTitle(option.value)\"\r\n          ></el-option>\r\n        </el-select>\r\n        <el-button @click=\"toggleSelectAll\">{{ selectAllButtonText }}</el-button>\r\n        <el-button class=\"save-btn\" type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, watch, onMounted, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Search, Loading } from '@element-plus/icons-vue'\r\nimport LibraryVideoList from './components/LibraryVideoList.vue'\r\nimport SelectedItemsList from './components/SelectedItemsList.vue'\r\nimport BreadcrumbPath from './components/BreadcrumbPath.vue'\r\nimport { getElementList } from '@/service/jingDong'\r\n\r\nconst emit = defineEmits(['update:visible', 'confirm'])\r\n\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  selectedData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  maxCount: {\r\n    type: Number,\r\n    default: 1\r\n  },\r\n  disabledVideoTypes: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n})\r\nconst selectedItemsRef = ref(null)\r\nconst libraryRef = ref(null)\r\nconst selectedList = ref({\r\n  RAW: [],\r\n  PRE_VIDEO: [],\r\n  POST_VIDEO: [],\r\n  FOREGROUND: [],\r\n  BACKGROUND: []\r\n})\r\n// 添加计算属性\r\nconst maxItemsByType = computed(() => {\r\n  return {\r\n    RAW: 20,\r\n    PRE_VIDEO: props.maxCount,\r\n    POST_VIDEO: props.maxCount,\r\n    FOREGROUND: 1,\r\n    BACKGROUND: 1\r\n  }\r\n})\r\nonMounted(() => {})\r\nconst selectAllButtonText = ref('本页全选')\r\nconst videoOptions = [\r\n  { label: '剪辑素材', value: 'RAW' },\r\n  { label: '前贴', value: 'PRE_VIDEO' },\r\n  { label: '后贴', value: 'POST_VIDEO' },\r\n  { label: '前景', value: 'FOREGROUND' },\r\n  { label: '背景', value: 'BACKGROUND' }\r\n]\r\nconst isVideoLoadMore = ref(false)\r\nconst filterOption = ref('')\r\nconst addOption = ref('RAW')\r\nconst VideoLoading = ref(false) // 确保loading变量已经定义\r\n// 添加最后获取数据的时间戳\r\nconst lastFetchTime = ref(0)\r\n\r\nconst dialogVisible = computed({\r\n  get: () => props.visible,\r\n  set: (val) => emit('update:visible', val)\r\n})\r\n\r\n// 处理选择变化\r\nconst handleSelectionChange = (value) => {\r\n  selectedList.value[addOption.value] = value\r\n  if (selectedItemsRef.value) {\r\n    // 检查类别是否是折叠状态\r\n    const isCollapsed = selectedItemsRef.value.isCategoryCollapsed(addOption.value)\r\n    // 如果是折叠状态，则调用 toggleCategory 方法来展开\r\n    if (isCollapsed) {\r\n      selectedItemsRef.value.toggleCategory(addOption.value)\r\n    }\r\n  }\r\n}\r\nconst getDisabledTitle = (value) => {\r\n  return props.disabledVideoTypes.includes(value)\r\n    ? `已有图片类型的${value === 'FOREGROUND' ? '前景' : '背景'}`\r\n    : ''\r\n}\r\n// 移除单个选中项\r\nconst removeSelected = (item, type) => {\r\n  // 更新特定分组的 selectedList\r\n  selectedList.value[type] = selectedList.value[type].filter(\r\n    (i) => i.element_id !== item.element_id\r\n  )\r\n  // 同步更新 libraryRef 的选中状态\r\n  if (type == addOption.value) {\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[type])\r\n    }\r\n  }\r\n}\r\nconst handleFolderClick = async (folder) => {\r\n  // 拼接新路径\r\n  const newPath =\r\n    videoParams.path_name === '/'\r\n      ? '/' + folder.element_name\r\n      : `${videoParams.path_name}/${folder.element_name}`\r\n  videoParams.path_name = newPath\r\n  currentPath.value = newPath\r\n  // 调用接口获取新的数据列表\r\n  folderPage.value = 1\r\n  videoPage.value = 1\r\n  await handleGetElementList()\r\n  updateSelectAllButtonText()\r\n}\r\nconst handleConfirm = () => {\r\n  emit('confirm', selectedList.value)\r\n  dialogVisible.value = false\r\n}\r\n\r\nconst handleCancel = () => {\r\n  selectedList.value = {\r\n    RAW: [],\r\n    PRE_VIDEO: [],\r\n    POST_VIDEO: [],\r\n    FOREGROUND: [],\r\n    BACKGROUND: []\r\n  }\r\n  if (libraryRef.value) {\r\n    libraryRef.value.clearSelection()\r\n  }\r\n}\r\n\r\nconst handleDialogClose = () => {\r\n  // console.log('关闭时清空选中状态,也可以不清空')\r\n  // selectedList.value = {\r\n  //   RAW: [],\r\n  //   PRE_VIDEO: [],\r\n  //   POST_VIDEO: [],\r\n  //   FOREGROUND: [],\r\n  //   BACKGROUND: []\r\n  // }\r\n  // if (libraryRef.value) {\r\n  //   libraryRef.value.clearSelection()\r\n  // }\r\n}\r\n\r\nconst videoList = ref([]) // 存储视频列表数据\r\n// 获取模板列表\r\nconst videoParams = reactive({\r\n  page: 1,\r\n  page_size: 20,\r\n  element_type: 'VIDEO',\r\n  path_name: '/'\r\n})\r\nconst folderTotalNumber = ref(0)\r\nconst videoTotalNumber = ref(0)\r\n// 获取视频列表数据\r\nconst handleGetElementList = async (isLoadMore = false, type, pageMore) => {\r\n  try {\r\n    if (isLoadMore) {\r\n      if (type === 'folder') {\r\n        const folderMoreRes = await getElementList({\r\n          ...videoParams,\r\n          page: pageMore,\r\n          element_type: 'FOLDER'\r\n        })\r\n        if (folderMoreRes.code === 0) {\r\n          // 合并文件夹和视频数据，文件夹在前\r\n          const folders = (folderMoreRes.data.elements || []).map((item) => ({\r\n            ...item,\r\n            isFolder: true // 添加标识，用于区分文件夹和视频\r\n          }))\r\n          videoList.value =  [...videoList.value, ...folders]\r\n        } else {\r\n          ElMessage.error(folderMoreRes.message || '获取数据失败')\r\n        }\r\n      } else if (type === 'video') {\r\n        const videoMoreRes = await getElementList({\r\n          ...videoParams,\r\n          page: pageMore,\r\n          element_type: 'VIDEO'\r\n        })\r\n        if (videoMoreRes.code === 0) {\r\n          // 合并文件夹和视频数据，文件夹在前\r\n          const videos = videoMoreRes.data.elements || []\r\n          videoList.value = [...videoList.value, ...videos]\r\n        } else {\r\n          ElMessage.error(videoMoreRes.message || '获取数据失败')\r\n        }\r\n      }\r\n      isVideoLoadMore.value = false\r\n      return // 不执行后续代码，直接返回\r\n    }\r\n    VideoLoading.value = true\r\n    // 先获取文件夹数据\r\n    const folderRes = await getElementList({\r\n      ...videoParams,\r\n      element_type: 'FOLDER'\r\n    })\r\n\r\n    // 再获取视频数据\r\n    const videoRes = await getElementList({\r\n      ...videoParams,\r\n      element_type: 'VIDEO'\r\n    })\r\n\r\n    if (folderRes.code === 0 && videoRes.code === 0) {\r\n      // 合并文件夹和视频数据，文件夹在前\r\n      const folders = (folderRes.data.elements || []).map((item) => ({\r\n        ...item,\r\n        isFolder: true // 添加标识，用于区分文件夹和视频\r\n      }))\r\n      const videos = videoRes.data.elements || []\r\n\r\n      videoList.value = [...folders, ...videos]\r\n      folderTotalNumber.value = folderRes.data.page_info?.total_number || 0\r\n      videoTotalNumber.value = videoRes.data.page_info?.total_number || 0\r\n    } else {\r\n      ElMessage.error(folderRes.message || videoRes.message || '获取数据失败')\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(error || '获取数据失败')\r\n  } finally {\r\n    VideoLoading.value = false\r\n  }\r\n}\r\n\r\n//筛选原料用途\r\nconst handleFilterChange = async (value) => {\r\n  if (value) {\r\n    videoParams.use_as = value\r\n  } else {\r\n    delete videoParams.use_as\r\n  }\r\n  folderPage.value = 1\r\n  videoPage.value = 1\r\n  await handleGetElementList()\r\n}\r\n\r\n// 添加搜索相关的响应式变量和方法\r\nconst searchKey = ref('')\r\nconst handleSearch = async () => {\r\n  folderPage.value = 1\r\n  videoPage.value = 1\r\n  // 实现搜索逻辑\r\n  if (searchKey.value == '' && videoParams.element_name) {\r\n    delete videoParams.element_name\r\n    await handleGetElementList()\r\n    return\r\n  }\r\n  videoParams.element_name = searchKey.value\r\n  await handleGetElementList()\r\n}\r\nconst currentPath = ref('/')\r\n// 处理路径点击\r\nconst handlePathClick = async (path) => {\r\n  folderPage.value = 1\r\n  videoPage.value = 1\r\n  currentPath.value = path\r\n  videoParams.path_name = path\r\n  // 重新获取数据\r\n  await handleGetElementList()\r\n  updateSelectAllButtonText()\r\n}\r\nconst updateSelectAllButtonText = () => {\r\n  const videoIds = videoList.value.filter((item) => !item.isFolder).map((item) => item.element_id)\r\n  if (videoIds.length === 0) {\r\n    selectAllButtonText.value = '本页全选'\r\n    return\r\n  }\r\n  // 检查 selectedList 中是否包含所有视频的 ID\r\n  const allSelected = videoIds.every((id) =>\r\n    selectedList.value[addOption.value].some((selected) => selected.element_id === id)\r\n  )\r\n  selectAllButtonText.value = allSelected ? '取消本页选中' : '本页全选'\r\n}\r\nconst toggleSelectAll = () => {\r\n  const videoIds = videoList.value.filter((item) => !item.isFolder).map((item) => item.element_id)\r\n  if (videoIds.length === 0) {\r\n    return\r\n  }\r\n  if (selectAllButtonText.value === '本页全选') {\r\n    // 获取当前类型的最大可选数量\r\n    const maxCount = maxItemsByType.value[addOption.value]\r\n    // 计算还可以选择多少个\r\n    const remainingCount = maxCount - selectedList.value[addOption.value].length\r\n    if (remainingCount <= 0) {\r\n      ElMessage.warning(\r\n        `${\r\n          videoOptions.find((opt) => opt.value === addOption.value)?.label || '该类型'\r\n        }最多可选${maxCount}个`\r\n      )\r\n      return\r\n    }\r\n    // 本页全选，但要考虑数量限制\r\n    const newSelections = videoList.value.filter(\r\n      (item) =>\r\n        !item.isFolder &&\r\n        !selectedList.value[addOption.value].some(\r\n          (selected) => selected.element_id === item.element_id\r\n        )\r\n    )\r\n\r\n    // 如果剩余可选数量小于未选视频数量，则随机选择\r\n    if (remainingCount < newSelections.length) {\r\n      // 随机打乱数组顺序并只取需要的数量\r\n      const shuffled = [...newSelections].sort(() => Math.random() - 0.5)\r\n      selectedList.value[addOption.value] = [\r\n        ...selectedList.value[addOption.value],\r\n        ...shuffled.slice(0, remainingCount)\r\n      ]\r\n    } else {\r\n      // 如果剩余可选数量足够，则全部选择\r\n      selectedList.value[addOption.value] = [\r\n        ...selectedList.value[addOption.value],\r\n        ...newSelections\r\n      ]\r\n    }\r\n    selectAllButtonText.value = '取消本页选中'\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n    }\r\n  } else if (selectAllButtonText.value === '取消本页选中') {\r\n    // 取消本页选中\r\n    selectedList.value[addOption.value] = selectedList.value[addOption.value].filter(\r\n      (selected) => !videoList.value.some((item) => item.element_id === selected.element_id)\r\n    )\r\n    selectAllButtonText.value = '本页全选'\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n    }\r\n  }\r\n}\r\nconst folderPage = ref(1)\r\nconst videoPage = ref(1)\r\n// 处理滚动\r\nconst handleScroll = async () => {\r\n  if (folderPage.value * videoParams.page_size < folderTotalNumber.value) {\r\n    isVideoLoadMore.value = true\r\n    folderPage.value += 1\r\n    await handleGetElementList(true, 'folder', folderPage.value) // 添加参数表示是分页加载\r\n  }\r\n  if (videoPage.value * videoParams.page_size < videoTotalNumber.value) {\r\n    isVideoLoadMore.value = true\r\n    videoPage.value += 1\r\n    await handleGetElementList(true, 'video', videoPage.value) // 添加参数表示是分页加载\r\n  }\r\n}\r\n\r\n// 修改 visible 的监听器\r\nwatch(\r\n  () => props.visible,\r\n  async (newVal) => {\r\n    if (newVal) {\r\n      addOption.value = 'RAW'\r\n      const currentTime = Date.now()\r\n      // 如果是第一次获取数据或者距离上次获取数据超过5分钟，则重新获取\r\n      if (lastFetchTime.value === 0 || currentTime - lastFetchTime.value > 5 * 60 * 1000) {\r\n        folderPage.value = 1\r\n        videoPage.value = 1\r\n        await handleGetElementList()\r\n        // 更新最后获取时间\r\n        lastFetchTime.value = currentTime\r\n      }\r\n\r\n      if (props.selectedData && typeof props.selectedData === 'object') {\r\n        selectedList.value = JSON.parse(JSON.stringify(props.selectedData))\r\n        nextTick(() => {\r\n          if (libraryRef.value) {\r\n            libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n)\r\n// 监听 addOption 的变化\r\nwatch(\r\n  () => addOption.value,\r\n  (newVal) => {\r\n    // console.log('addOption变化', newVal, maxItemsByType.value[newVal])\r\n    if (libraryRef.value && selectedList.value[newVal]) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[newVal])\r\n    }\r\n    updateSelectAllButtonText()\r\n  }\r\n)\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-dialog {\r\n  :deep(.el-dialog) {\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n    box-shadow: 0 12px 32px 4px rgba(0, 0, 0, 0.04), 0 8px 20px rgba(0, 0, 0, 0.08);\r\n  }\r\n\r\n  :deep(.el-dialog__header) {\r\n    margin: 0;\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #e4e7ed;\r\n\r\n    .el-dialog__title {\r\n      font-size: 18px;\r\n      font-weight: 600;\r\n      color: #303133;\r\n    }\r\n  }\r\n\r\n  .dialog-content {\r\n    display: flex;\r\n    gap: 24px;\r\n    height: 70vh;\r\n    padding: 24px;\r\n  }\r\n\r\n  .video-list-area {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    background: #fff;\r\n    border-radius: 8px;\r\n    // padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    height: 100%;\r\n    .loading-container {\r\n      flex: 1;\r\n      overflow-y: auto;\r\n      min-height: 0;\r\n    }\r\n  }\r\n\r\n  .search-box {\r\n    // width: 600px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 30px;\r\n    // padding: 0 20px;\r\n    :deep(.el-input__wrapper) {\r\n      border-radius: 20px;\r\n      background-color: #f5f7fa;\r\n      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n    }\r\n\r\n    :deep(.el-input__inner) {\r\n      background-color: transparent;\r\n    }\r\n    .custom-search-input {\r\n      width: 300px;\r\n    }\r\n  }\r\n  .save-btn {\r\n    min-width: 80px;\r\n    font-size: 14px;\r\n    background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n    border: none;\r\n  }\r\n\r\n  .path-display {\r\n    padding: 0 20px;\r\n\r\n    .path-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n    }\r\n\r\n    .path-label {\r\n      color: #606266;\r\n      font-size: 14px;\r\n    }\r\n\r\n    .back-icon {\r\n      font-size: 16px;\r\n      cursor: pointer;\r\n      color: #606266;\r\n      transition: all 0.3s ease;\r\n\r\n      &:hover {\r\n        color: #409eff;\r\n        transform: translateX(-2px);\r\n      }\r\n    }\r\n\r\n    :deep(.el-breadcrumb__item) {\r\n      color: #606266;\r\n      font-size: 14px;\r\n\r\n      &.clickable {\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          color: #409eff;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .dialog-footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 15px;\r\n    margin-left: auto;\r\n  }\r\n  .search-btn {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 2px;\r\n  }\r\n  .select-label {\r\n    font-size: 14px;\r\n    color: #606266;\r\n    width: 100px;\r\n    font-weight: 600;\r\n  }\r\n  .select-box {\r\n    width: 200px;\r\n  }\r\n  /* 底部加载更多 */\r\n  .bottom-loading {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -20px;\r\n    background: transparent;\r\n  }\r\n  /* 加载图标 */\r\n  .loading-icon {\r\n    font-size: 20px;\r\n    color: #409eff;\r\n    animation: rotate 1.5s linear infinite;\r\n  }\r\n  /* 加载文本 */\r\n  .loading-text {\r\n    margin-left: 8px;\r\n    font-size: 14px;\r\n    color: #909399;\r\n  }\r\n  /* 无更多数据 */\r\n  .no-more {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -20px;\r\n    .no-more-text {\r\n      font-size: 14px;\r\n      color: #909399;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"template-library-container\">\r\n    <div class=\"resource-layout\">\r\n      <div class=\"right-panel\">\r\n        <!-- 模板列表 -->\r\n        <div class=\"materials-display\" @scroll=\"handleScroll\">\r\n          <el-checkbox-group\r\n            v-model=\"selectedTemplates\"\r\n            @change=\"handleSelectionChange\"\r\n            class=\"template-grid\"\r\n          >\r\n            <!-- 文件夹项 -->\r\n            <div v-for=\"(template, index) in filteredTemplates\" :key=\"index\" class=\"template-item\">\r\n              <!-- 文件夹显示 -->\r\n              <template v-if=\"template.element_type === 'FOLDER'\">\r\n                <div class=\"template-content folder-content\" @click=\"handleFolderClick(template)\">\r\n                  <el-icon :size=\"60\"><Folder /></el-icon>\r\n                  <div class=\"template-name\" :title=\"template.element_name || '未命名文件夹'\">\r\n                    {{ template.element_name || '未命名文件夹' }}\r\n                  </div>\r\n                </div>\r\n              </template>\r\n              <!-- 视频显示 -->\r\n              <template v-else>\r\n                <div class=\"template-content\">\r\n                  <img\r\n                    :src=\"template.element_url\"\r\n                    :key=\"template.element_id\"\r\n                    class=\"preview\"\r\n                    :alt=\"template.element_name || '未命名图片'\"\r\n                  />\r\n                  <div class=\"template-name\" :title=\"template.element_name || '未命名图片'\">\r\n                    {{ template.element_name || '未命名图片' }}\r\n                  </div>\r\n                  <el-checkbox\r\n                    :label=\"template\"\r\n                    class=\"template-checkbox\"\r\n                    :disabled=\"isTemplateDisabled(template)\"\r\n                    :title=\"\r\n                      isTemplateDisabled(template) ? `已达到最大选择数量 ${props.maxCount}` : ''\r\n                    \"\r\n                  ></el-checkbox>\r\n                </div>\r\n              </template>\r\n            </div>\r\n          </el-checkbox-group>\r\n          <!-- 空状态 -->\r\n          <div v-if=\"filteredTemplates.length === 0\" class=\"empty-state\">\r\n            <el-empty description=\"暂无视频\"></el-empty>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Folder } from '@element-plus/icons-vue' // 添加文件夹图标导入\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  dataList: {\r\n    // 接收父组件的数据列表\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  selectedData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  maxCount: {\r\n    type: Number,\r\n    default: 20\r\n  }\r\n})\r\n// 定义事件\r\nconst emit = defineEmits(['selection-change', 'folder-click', 'scroll'])\r\n\r\nconst selectedTemplates = ref([])\r\nconst selectedTemplateIds = ref([])\r\n\r\n// 过滤后的模板列表\r\nconst filteredTemplates = computed(() => {\r\n  return props.dataList || []\r\n})\r\n// 添加计算属性判断是否达到最大选择数量\r\nconst isTemplateDisabled = (template) => {\r\n  return (\r\n    selectedTemplates.value.length >= props.maxCount &&\r\n    !selectedTemplates.value.some((item) => item.element_id === template.element_id)\r\n  )\r\n}\r\n// 清空选中状态的方法\r\nconst clearSelection = () => {\r\n  selectedTemplates.value = []\r\n  selectedTemplateIds.value = []\r\n  // 通知父组件，选中项已清空\r\n}\r\n\r\n// 更新选中状态\r\nconst updateSelectedTemplates = () => {\r\n  selectedTemplates.value = selectedTemplateIds.value\r\n    .map((id) => {\r\n      const template = props.dataList.find((item) => item.element_id === id)\r\n      return template ? template : selectedTemplates.value.find((item) => item.element_id === id)\r\n    })\r\n    .filter((item) => item && item.element_id)\r\n}\r\n\r\n// 设置选中模板\r\nconst setSelectedTemplates = (templates) => {\r\n  // console.log('设置选中模板', templates)\r\n  if (templates?.length) {\r\n    selectedTemplates.value = templates\r\n    selectedTemplateIds.value = templates.map((item) => item.element_id)\r\n  } else {\r\n    selectedTemplates.value = []\r\n    selectedTemplateIds.value = []\r\n  }\r\n}\r\n// 处理选择变化\r\nconst handleSelectionChange = (value) => {\r\n  // 获取当前选中和取消选中的项\r\n  const currentIds = value.map((item) => item.element_id)\r\n  // 合并ID列表，保持之前选中的状态\r\n  selectedTemplateIds.value = Array.from(\r\n    new Set([...selectedTemplateIds.value, ...currentIds])\r\n  ).filter((id) => {\r\n    // 如果在当前视图中取消选中，则从总列表中移除\r\n    if (props.dataList.some((item) => item.element_id === id)) {\r\n      return currentIds.includes(id)\r\n    }\r\n    // 不在当前视图中的ID保持原状\r\n    return true\r\n  })\r\n  // 更新本地选中状态\r\n  updateSelectedTemplates()\r\n  // 通知父组件，传递所有选中项的完整数据\r\n  emit('selection-change', selectedTemplates.value)\r\n}\r\n// 添加防抖函数\r\nconst debounce = (fn, delay) => {\r\n  let timer = null\r\n  return function (...args) {\r\n    if (timer) clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(this, args)\r\n    }, delay)\r\n  }\r\n}\r\n// 处理滚动\r\nconst isLoading = ref(false)\r\nconst handleScroll = debounce((e) => {\r\n  const { scrollTop, scrollHeight, clientHeight } = e.target\r\n  if (Math.abs(scrollHeight - scrollTop - clientHeight) <= 1 && !isLoading.value) {\r\n    isLoading.value = true\r\n    emit('scroll')\r\n    // 1秒后重置状态，防止频繁触发\r\n    setTimeout(() => {\r\n      isLoading.value = false\r\n    }, 1000)\r\n  }\r\n}, 200) // 200ms 的防抖延迟\r\n\r\n// 处理文件夹点击\r\nconst handleFolderClick = (folder) => {\r\n  emit('folder-click', folder)\r\n}\r\n\r\n// 监听父组件传入的selectedData变化\r\nwatch(\r\n  () => props.selectedData,\r\n  (newVal) => {\r\n    if (newVal?.length) {\r\n      // 更新选中ID列表\r\n      selectedTemplateIds.value = newVal.map((item) => item.element_id)\r\n      updateSelectedTemplates()\r\n    }\r\n  },\r\n  { immediate: true }\r\n)\r\n\r\n// 监听数据列表变化\r\nwatch(\r\n  () => props.dataList,\r\n  () => {\r\n    // 当数据列表更新时，根据已保存的ID重新设置选中状态\r\n    updateSelectedTemplates()\r\n  }\r\n)\r\n// 暴露方法\r\ndefineExpose({\r\n  setSelectedTemplates,\r\n  clearSelection\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-container {\r\n  height: 100%;\r\n  width: 100%;\r\n  // max-height: 55vh; // 设置最大高度为视窗高度的80%\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.resource-layout {\r\n  flex: 1;\r\n  display: flex;\r\n  background-color: #ffffff;\r\n  overflow: hidden; // 防止内容溢出\r\n}\r\n\r\n.right-panel {\r\n  flex: 1;\r\n  padding: 20px 20px 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  overflow: hidden; // 防止内容溢出\r\n}\r\n\r\n.materials-display {\r\n  flex: 1;\r\n  overflow-y: auto; // 添加垂直滚动\r\n  margin-right: -10px; // 抵消padding-right造成的宽度增加\r\n  padding-right: 10px; // 为滚动条预留空间\r\n\r\n  // 自定义滚动条样式\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #e4e7ed;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n.template-grid {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 30px;\r\n  width: 100%;\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.template-item {\r\n  flex: 0 0 200px;\r\n  position: relative;\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  background: #fff;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n  }\r\n}\r\n\r\n.template-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; // 垂直居中\r\n  align-items: center; // 水平居中\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #e2e4e6c2;\r\n  .preview {\r\n    // width: 100%;\r\n    object-fit: cover;\r\n  }\r\n\r\n  .template-name {\r\n    padding: 24px 12px;\r\n    min-height: 48px;\r\n    font-size: 14px;\r\n    color: #606266;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    border-top: 1px solid #f0f0f0;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    cursor: pointer; // 添加指针样式提示可悬停\r\n\r\n    &:hover {\r\n      color: #409eff; // 悬停时变色\r\n    }\r\n\r\n    &[title] {\r\n      position: relative;\r\n\r\n      &:hover::after {\r\n        content: attr(title);\r\n        position: absolute;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        bottom: 100%;\r\n        padding: 5px 10px;\r\n        background: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        border-radius: 4px;\r\n        font-size: 12px;\r\n        white-space: nowrap;\r\n        z-index: 10;\r\n      }\r\n    }\r\n  }\r\n}\r\n:deep(.template-checkbox) {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  margin: 0;\r\n  z-index: 10;\r\n  border-radius: 4px;\r\n  padding: 4px;\r\n\r\n  .el-checkbox__input {\r\n    position: static;\r\n    margin-right: 0;\r\n    z-index: 2;\r\n\r\n    .el-checkbox__inner {\r\n      background-color: transparent; // 未选中时透明背景\r\n      border-color: #dcdfe6; // 灰色边框\r\n      width: 24px;\r\n      height: 24px;\r\n      border-radius: 4px;\r\n\r\n      &::after {\r\n        height: 12px;\r\n        width: 6px;\r\n        left: 8px;\r\n        top: 4px;\r\n        border-right: 2px solid #fff;\r\n        border-bottom: 2px solid #fff;\r\n      }\r\n    }\r\n    &.is-checked .el-checkbox__inner {\r\n      background-color: #409eff; // 选中时蓝色背景\r\n      border-color: #409eff;\r\n      &::after {\r\n        transform: rotate(45deg) scaleY(1);\r\n      }\r\n      &:hover {\r\n        background-color: #409eff; // 选中状态下悬浮保持背景色不变\r\n      }\r\n    }\r\n    &:hover .el-checkbox__inner {\r\n      background-color: rgba(255, 255, 255, 0.9);\r\n      border-color: #409eff; // 悬停时边框变蓝\r\n    }\r\n  }\r\n\r\n  .el-checkbox__label {\r\n    display: none;\r\n  }\r\n}\r\n.template-name {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.empty-state {\r\n  padding: 40px 0;\r\n  text-align: center;\r\n}\r\n.search-box {\r\n  width: 250px;\r\n  :deep(.el-input__wrapper) {\r\n    border-radius: 20px;\r\n    background-color: #f5f7fa;\r\n    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n  :deep(.el-input__inner) {\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n.folder-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  cursor: pointer;\r\n  color: #606266;\r\n  background: #f7f8fa;\r\n  border-radius: 8px;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: #409eff;\r\n    background: #f0f7ff;\r\n  }\r\n\r\n  .el-icon {\r\n    font-size: 40px;\r\n    margin-top: auto; // 将图标推到顶部\r\n    margin-bottom: auto; // 图标与底部文字保持距离\r\n    color: #409eff;\r\n  }\r\n\r\n  .template-name {\r\n    text-align: center;\r\n    padding: 24px 12px; // 与视频项保持一致的内边距\r\n    min-height: 48px; // 与视频项保持一致的最小高度\r\n    font-size: 14px;\r\n    color: inherit;\r\n    background-color: #fff; // 与视频项保持一致的背景色\r\n    border-top: 1px solid #f0f0f0; // 与视频项保持一致的边框\r\n    width: 100%;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    &:hover {\r\n      color: #409eff;\r\n    }\r\n\r\n    &[title]:hover::after {\r\n      content: attr(title);\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      bottom: 100%;\r\n      padding: 5px 10px;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      color: white;\r\n      border-radius: 4px;\r\n      font-size: 12px;\r\n      white-space: nowrap;\r\n      z-index: 10;\r\n    }\r\n  }\r\n}\r\n\r\n// 添加提示样式\r\n.template-checkbox[title]:hover::after {\r\n  content: attr(title);\r\n  position: absolute;\r\n  top: -30px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 5px 10px;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  z-index: 10;\r\n}\r\n</style>\r\n","<template>\r\n  <el-dialog\r\n    v-model=\"dialogVisible\"\r\n    title=\"选择图片\"\r\n    width=\"85%\"\r\n    class=\"template-library-dialog\"\r\n    top=\"5vh\"\r\n    @close=\"handleDialogClose\"\r\n  >\r\n    <div class=\"dialog-content\">\r\n      <SelectedItemsList\r\n        ref=\"selectedItemsRef\"\r\n        title=\"已选图片\"\r\n        :selected-list=\"selectedList\"\r\n        empty-text=\"暂无选中图片\"\r\n        :maxItemsByType=\"maxItemsByType\"\r\n        @remove=\"removeSelected\"\r\n        @clear=\"handleCancel\"\r\n      />\r\n      <!-- 右侧图片列表区域 -->\r\n      <div class=\"image-list-area\">\r\n        <!-- 搜索框 -->\r\n        <div class=\"search-box\">\r\n          <div class=\"search-btn\">\r\n            <label class=\"select-label\">筛选原料用途:</label>\r\n            <el-select\r\n              v-model=\"filterOption\"\r\n              placeholder=\"选择原料用途\"\r\n              class=\"select-box\"\r\n              @change=\"handleFilterChange\"\r\n              clearable\r\n            >\r\n              <el-option\r\n                v-for=\"option in imageOptions\"\r\n                :key=\"option.value\"\r\n                :label=\"option.label\"\r\n                :value=\"option.value\"\r\n              ></el-option>\r\n            </el-select>\r\n          </div>\r\n          <el-input\r\n            class=\"custom-search-input\"\r\n            v-model=\"searchKey\"\r\n            placeholder=\"搜索关键字...\"\r\n            clearable\r\n            size=\"large\"\r\n            @clear=\"handleSearch\"\r\n            @keyup.enter=\"handleSearch\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Search /></el-icon>\r\n            </template>\r\n          </el-input>\r\n        </div>\r\n        <!-- 文件路径 -->\r\n        <BreadcrumbPath :path=\"currentPath\" @path-click=\"handlePathClick\" />\r\n        <!-- 添加加载状态 -->\r\n        <div class=\"loading-container\" v-loading=\"imageLoading\" element-loading-text=\"加载中...\">\r\n          <LibraryImageList\r\n            ref=\"libraryRef\"\r\n            :visible=\"dialogVisible\"\r\n            :selected-data=\"selectedList\"\r\n            :data-list=\"imageList\"\r\n            :maxCount=\"maxItemsByType[addOption]\"\r\n            @selection-change=\"handleSelectionChange\"\r\n            @folder-click=\"handleFolderClick\"\r\n            @scroll=\"handleScroll\"\r\n          />\r\n        </div>\r\n        <div v-if=\"isImageLoadMore\" class=\"bottom-loading\">\r\n          <el-icon class=\"loading-icon\"><Loading /></el-icon>\r\n          <span class=\"loading-text\">加载更多...</span>\r\n        </div>\r\n        <div\r\n          v-else-if=\"\r\n            !imageLoading &&\r\n            !isImageLoadMore &&\r\n            imageList.length > 0 &&\r\n            imageList.length == imageTotalNumber + folderTotalNumber\r\n          \"\r\n          class=\"no-more\"\r\n        >\r\n          <span class=\"no-more-text\">已加载全部数据</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <label class=\"select-label\">添加为:</label>\r\n        <el-select v-model=\"addOption\" placeholder=\"选择原料用途\" class=\"select-box\">\r\n          <el-option\r\n            v-for=\"option in imageOptions\"\r\n            :key=\"option.value\"\r\n            :label=\"option.label\"\r\n            :value=\"option.value\"\r\n            :disabled=\"props.disabledImageTypes.includes(option.value)\"\r\n            :title=\"getDisabledTitle(option.value)\"\r\n          ></el-option>\r\n        </el-select>\r\n        <el-button @click=\"toggleSelectAll\">{{ selectAllButtonText }}</el-button>\r\n        <el-button class=\"save-btn\" type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, watch, onMounted, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Search, Loading } from '@element-plus/icons-vue'\r\nimport LibraryImageList from './components/LibraryImageList.vue'\r\nimport SelectedItemsList from './components/SelectedItemsList.vue'\r\nimport BreadcrumbPath from './components/BreadcrumbPath.vue'\r\nimport { getElementList } from '@/service/jingDong'\r\n\r\nconst emit = defineEmits(['update:visible', 'confirm'])\r\n\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  selectedData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  maxCount: {\r\n    type: Number,\r\n    default: 1\r\n  },\r\n  disabledImageTypes: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n})\r\nconst selectedItemsRef = ref(null)\r\nconst libraryRef = ref(null)\r\nconst selectedList = ref({\r\n  RAW: [],\r\n  FOREGROUND: [],\r\n  BACKGROUND: []\r\n})\r\n// 添加计算属性\r\nconst maxItemsByType = computed(() => {\r\n  return {\r\n    RAW: 20,\r\n    FOREGROUND: 1,\r\n    BACKGROUND: 1\r\n  }\r\n})\r\nonMounted(() => {})\r\nconst selectAllButtonText = ref('本页全选')\r\nconst imageOptions = [\r\n  { label: '剪辑素材', value: 'RAW' },\r\n  { label: '前景', value: 'FOREGROUND' },\r\n  { label: '背景', value: 'BACKGROUND' }\r\n]\r\nconst isImageLoadMore = ref(false)\r\nconst filterOption = ref('')\r\nconst addOption = ref('RAW')\r\nconst imageLoading = ref(false) // 确保loading变量已经定义\r\n// 添加最后获取数据的时间戳\r\nconst lastFetchTime = ref(0)\r\nconst dialogVisible = computed({\r\n  get: () => props.visible,\r\n  set: (val) => emit('update:visible', val)\r\n})\r\n\r\n// 处理选择变化\r\nconst handleSelectionChange = (value) => {\r\n  selectedList.value[addOption.value] = value\r\n  if (selectedItemsRef.value) {\r\n    // 检查类别是否是折叠状态\r\n    const isCollapsed = selectedItemsRef.value.isCategoryCollapsed(addOption.value)\r\n    // 如果是折叠状态，则调用 toggleCategory 方法来展开\r\n    if (isCollapsed) {\r\n      selectedItemsRef.value.toggleCategory(addOption.value)\r\n    }\r\n  }\r\n}\r\nconst getDisabledTitle = (value) => {\r\n  return props.disabledImageTypes.includes(value)\r\n    ? `已有视频类型的${value === 'FOREGROUND' ? '前景' : '背景'}`\r\n    : ''\r\n}\r\n// 移除单个选中项\r\nconst removeSelected = (item, type) => {\r\n  // 更新特定分组的 selectedList\r\n  selectedList.value[type] = selectedList.value[type].filter(\r\n    (i) => i.element_id !== item.element_id\r\n  )\r\n  // 同步更新 libraryRef 的选中状态\r\n  if (type == addOption.value) {\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[type])\r\n    }\r\n  }\r\n}\r\nconst handleFolderClick = async (folder) => {\r\n  // 拼接新路径\r\n  const newPath =\r\n    imageParams.path_name === '/'\r\n      ? '/' + folder.element_name\r\n      : `${imageParams.path_name}/${folder.element_name}`\r\n  imageParams.path_name = newPath\r\n  currentPath.value = newPath\r\n  // 调用接口获取新的数据列表\r\n  folderPage.value = 1\r\n  imagePage.value = 1\r\n  await handleGetElementList()\r\n  updateSelectAllButtonText()\r\n}\r\nconst handleConfirm = () => {\r\n  emit('confirm', selectedList.value)\r\n  dialogVisible.value = false\r\n}\r\n\r\nconst handleCancel = () => {\r\n  selectedList.value = {\r\n    RAW: [],\r\n    FOREGROUND: [],\r\n    BACKGROUND: []\r\n  }\r\n  if (libraryRef.value) {\r\n    libraryRef.value.clearSelection()\r\n  }\r\n}\r\n\r\nconst handleDialogClose = () => {\r\n  // console.log('关闭时清空选中状态,也可以不清空')\r\n  // selectedList.value = {\r\n  //   RAW: [],\r\n  //   FOREGROUND: [],\r\n  //   BACKGROUND: []\r\n  // }\r\n  // if (libraryRef.value) {\r\n  //   libraryRef.value.clearSelection()\r\n  // }\r\n}\r\n\r\nconst imageList = ref([]) // 存储图片列表数据\r\n// 获取模板列表\r\nconst imageParams = reactive({\r\n  page: 1,\r\n  page_size: 20,\r\n  element_type: 'IMAGE',\r\n  path_name: '/'\r\n})\r\nconst folderTotalNumber = ref(0)\r\nconst imageTotalNumber = ref(0)\r\n// 获取图片列表数据\r\nconst handleGetElementList = async (isLoadMore = false, type, pageMore) => {\r\n  try {\r\n    if (isLoadMore) {\r\n      if (type === 'folder') {\r\n        const folderMoreRes = await getElementList({\r\n          ...imageParams,\r\n          page: pageMore,\r\n          element_type: 'FOLDER'\r\n        })\r\n        if (folderMoreRes.code === 0) {\r\n          const folders = (folderMoreRes.data.elements || []).map((item) => ({\r\n            ...item,\r\n            isFolder: true // 添加标识，用于区分文件夹和图片\r\n          }))\r\n          imageList.value = [...imageList.value, ...folders]\r\n        } else {\r\n          ElMessage.error(folderMoreRes.message || '获取数据失败')\r\n        }\r\n      } else if (type === 'image') {\r\n        const imageMoreRes = await getElementList({\r\n          ...imageParams,\r\n          page: pageMore,\r\n          element_type: 'IMAGE'\r\n        })\r\n        if (imageMoreRes.code === 0) {\r\n          const images = imageMoreRes.data.elements || []\r\n          imageList.value = [...imageList.value, ...images]\r\n        } else {\r\n          ElMessage.error(imageMoreRes.message || '获取数据失败')\r\n        }\r\n      }\r\n      isImageLoadMore.value = false\r\n      return // 不执行后续代码，直接返回\r\n    }\r\n    imageLoading.value = true\r\n    // 先获取文件夹数据\r\n    const folderRes = await getElementList({\r\n      ...imageParams,\r\n      element_type: 'FOLDER'\r\n    })\r\n\r\n    // 再获取图片数据\r\n    const imageRes = await getElementList({\r\n      ...imageParams,\r\n      element_type: 'IMAGE'\r\n    })\r\n\r\n    if (folderRes.code === 0 && imageRes.code === 0) {\r\n      // 合并文件夹和图片数据，文件夹在前\r\n      const folders = (folderRes.data.elements || []).map((item) => ({\r\n        ...item,\r\n        isFolder: true // 添加标识，用于区分文件夹和图片\r\n      }))\r\n      const images = imageRes.data.elements || []\r\n\r\n      imageList.value = [...folders, ...images]\r\n      folderTotalNumber.value = folderRes.data.page_info?.total_number || 0\r\n      imageTotalNumber.value = imageRes.data.page_info?.total_number || 0\r\n    } else {\r\n      ElMessage.error(folderRes.message || imageRes.message || '获取数据失败')\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(error || '获取数据失败')\r\n  } finally {\r\n    imageLoading.value = false\r\n  }\r\n}\r\n\r\n//筛选原料用途\r\nconst handleFilterChange = async (value) => {\r\n  if (value) {\r\n    imageParams.use_as = value\r\n  } else {\r\n    delete imageParams.use_as\r\n  }\r\n  folderPage.value = 1\r\n  imagePage.value = 1\r\n  await handleGetElementList()\r\n}\r\n\r\n// 添加搜索相关的响应式变量和方法\r\nconst searchKey = ref('')\r\nconst handleSearch = async () => {\r\n  folderPage.value = 1\r\n  imagePage.value = 1\r\n  // 实现搜索逻辑\r\n  if (searchKey.value == '' && imageParams.element_name) {\r\n    delete imageParams.element_name\r\n    await handleGetElementList()\r\n    return\r\n  }\r\n  imageParams.element_name = searchKey.value\r\n  await handleGetElementList()\r\n}\r\nconst currentPath = ref('/')\r\n// 处理路径点击\r\nconst handlePathClick = async (path) => {\r\n  folderPage.value = 1\r\n  imagePage.value = 1\r\n  currentPath.value = path\r\n  imageParams.path_name = path\r\n  // 重新获取数据\r\n  await handleGetElementList()\r\n  updateSelectAllButtonText()\r\n}\r\nconst updateSelectAllButtonText = () => {\r\n  const imageIds = imageList.value.filter((item) => !item.isFolder).map((item) => item.element_id)\r\n  if (imageIds.length === 0) {\r\n    selectAllButtonText.value = '本页全选'\r\n    return\r\n  }\r\n  // 检查 selectedList 中是否包含所有图片的 ID\r\n  const allSelected = imageIds.every((id) =>\r\n    selectedList.value[addOption.value].some((selected) => selected.element_id === id)\r\n  )\r\n  selectAllButtonText.value = allSelected ? '取消本页选中' : '本页全选'\r\n}\r\nconst toggleSelectAll = () => {\r\n  const imageIds = imageList.value.filter((item) => !item.isFolder).map((item) => item.element_id)\r\n  if (imageIds.length === 0) {\r\n    return\r\n  }\r\n  if (selectAllButtonText.value === '本页全选') {\r\n    // 获取当前类型的最大可选数量\r\n    const maxCount = maxItemsByType.value[addOption.value]\r\n    // 计算还可以选择多少个\r\n    const remainingCount = maxCount - selectedList.value[addOption.value].length\r\n    if (remainingCount <= 0) {\r\n      ElMessage.warning(\r\n        `${\r\n          imageOptions.find((opt) => opt.value === addOption.value)?.label || '该类型'\r\n        }最多可选${maxCount}个`\r\n      )\r\n      return\r\n    }\r\n    // 本页全选，但要考虑数量限制\r\n    const newSelections = imageList.value.filter(\r\n      (item) =>\r\n        !item.isFolder &&\r\n        !selectedList.value[addOption.value].some(\r\n          (selected) => selected.element_id === item.element_id\r\n        )\r\n    )\r\n\r\n    // 如果剩余可选数量小于未选图片数量，则随机选择\r\n    if (remainingCount < newSelections.length) {\r\n      // 随机打乱数组顺序并只取需要的数量\r\n      const shuffled = [...newSelections].sort(() => Math.random() - 0.5)\r\n      selectedList.value[addOption.value] = [\r\n        ...selectedList.value[addOption.value],\r\n        ...shuffled.slice(0, remainingCount)\r\n      ]\r\n    } else {\r\n      // 如果剩余可选数量足够，则全部选择\r\n      selectedList.value[addOption.value] = [\r\n        ...selectedList.value[addOption.value],\r\n        ...newSelections\r\n      ]\r\n    }\r\n    selectAllButtonText.value = '取消本页选中'\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n    }\r\n  } else if (selectAllButtonText.value === '取消本页选中') {\r\n    // 取消本页选中\r\n    selectedList.value[addOption.value] = selectedList.value[addOption.value].filter(\r\n      (selected) => !imageList.value.some((item) => item.element_id === selected.element_id)\r\n    )\r\n    selectAllButtonText.value = '本页全选'\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n    }\r\n  }\r\n}\r\nconst folderPage = ref(1)\r\nconst imagePage = ref(1)\r\n// 处理滚动\r\nconst handleScroll = async () => {\r\n  if (folderPage.value * imageParams.page_size < folderTotalNumber.value) {\r\n    isImageLoadMore.value = true\r\n    folderPage.value += 1\r\n    await handleGetElementList(true, 'folder', folderPage.value) // 添加参数表示是分页加载\r\n  }\r\n  if (imagePage.value * imageParams.page_size < imageTotalNumber.value) {\r\n    isImageLoadMore.value = true\r\n    imagePage.value += 1\r\n    await handleGetElementList(true, 'image', imagePage.value) // 添加参数表示是分页加载\r\n  }\r\n}\r\n// 修改 visible 的监听器\r\nwatch(\r\n  () => props.visible,\r\n  async (newVal) => {\r\n    if (newVal) {\r\n      addOption.value = 'RAW'\r\n      const currentTime = Date.now()\r\n      // 如果是第一次获取数据或者距离上次获取数据超过5分钟，则重新获取\r\n      if (lastFetchTime.value === 0 || currentTime - lastFetchTime.value > 5 * 60 * 1000) {\r\n        folderPage.value = 1\r\n        imagePage.value = 1\r\n        await handleGetElementList()\r\n        // 更新最后获取时间\r\n        lastFetchTime.value = currentTime\r\n      }\r\n\r\n      if (props.selectedData && typeof props.selectedData === 'object') {\r\n        selectedList.value = JSON.parse(JSON.stringify(props.selectedData))\r\n        nextTick(() => {\r\n          if (libraryRef.value) {\r\n            libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n)\r\n// 监听 addOption 的变化\r\nwatch(\r\n  () => addOption.value,\r\n  (newVal) => {\r\n    // console.log('addOption变化', newVal, maxItemsByType.value[newVal])\r\n    if (libraryRef.value && selectedList.value[newVal]) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[newVal])\r\n    }\r\n    updateSelectAllButtonText()\r\n  }\r\n)\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-dialog {\r\n  :deep(.el-dialog) {\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n    box-shadow: 0 12px 32px 4px rgba(0, 0, 0, 0.04), 0 8px 20px rgba(0, 0, 0, 0.08);\r\n  }\r\n\r\n  :deep(.el-dialog__header) {\r\n    margin: 0;\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #e4e7ed;\r\n\r\n    .el-dialog__title {\r\n      font-size: 18px;\r\n      font-weight: 600;\r\n      color: #303133;\r\n    }\r\n  }\r\n\r\n  .dialog-content {\r\n    display: flex;\r\n    gap: 24px;\r\n    height: 70vh;\r\n    padding: 24px;\r\n  }\r\n\r\n  .image-list-area {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    background: #fff;\r\n    border-radius: 8px;\r\n    // padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    height: 100%;\r\n    .loading-container {\r\n      flex: 1;\r\n      overflow-y: auto;\r\n      min-height: 0;\r\n    }\r\n  }\r\n\r\n  .search-box {\r\n    // width: 600px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 30px;\r\n    // padding: 0 20px;\r\n    :deep(.el-input__wrapper) {\r\n      border-radius: 20px;\r\n      background-color: #f5f7fa;\r\n      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n    }\r\n\r\n    :deep(.el-input__inner) {\r\n      background-color: transparent;\r\n    }\r\n    .custom-search-input {\r\n      width: 300px;\r\n    }\r\n  }\r\n  .save-btn {\r\n    min-width: 80px;\r\n    font-size: 14px;\r\n    background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n    border: none;\r\n  }\r\n\r\n  .path-display {\r\n    padding: 0 20px;\r\n\r\n    .path-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n    }\r\n\r\n    .path-label {\r\n      color: #606266;\r\n      font-size: 14px;\r\n    }\r\n\r\n    .back-icon {\r\n      font-size: 16px;\r\n      cursor: pointer;\r\n      color: #606266;\r\n      transition: all 0.3s ease;\r\n\r\n      &:hover {\r\n        color: #409eff;\r\n        transform: translateX(-2px);\r\n      }\r\n    }\r\n\r\n    :deep(.el-breadcrumb__item) {\r\n      color: #606266;\r\n      font-size: 14px;\r\n\r\n      &.clickable {\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          color: #409eff;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .dialog-footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 15px;\r\n    margin-left: auto;\r\n  }\r\n  .search-btn {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 2px;\r\n  }\r\n  .select-label {\r\n    font-size: 14px;\r\n    color: #606266;\r\n    width: 100px;\r\n    font-weight: 600;\r\n  }\r\n  .select-box {\r\n    width: 200px;\r\n  }\r\n  /* 底部加载更多 */\r\n  .bottom-loading {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -20px;\r\n    background: transparent;\r\n  }\r\n  /* 加载图标 */\r\n  .loading-icon {\r\n    font-size: 20px;\r\n    color: #409eff;\r\n    animation: rotate 1.5s linear infinite;\r\n  }\r\n  /* 加载文本 */\r\n  .loading-text {\r\n    margin-left: 8px;\r\n    font-size: 14px;\r\n    color: #909399;\r\n  }\r\n  /* 无更多数据 */\r\n  .no-more {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -20px;\r\n    .no-more-text {\r\n      font-size: 14px;\r\n      color: #909399;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"template-library-container\">\r\n    <div class=\"resource-layout\">\r\n      <div class=\"right-panel\">\r\n        <div class=\"materials-display\" @scroll=\"handleScroll\">\r\n          <el-table\r\n            ref=\"tableRef\"\r\n            :data=\"filteredTemplates\"\r\n            style=\"width: 100%\"\r\n            @selection-change=\"handleSelectionChange\"\r\n            @select-all=\"handleSelectAll\"\r\n          >\r\n            <el-table-column v-if=\"props.showSelection\" type=\"selection\" width=\"55\" :selectable=\"isTemplateSelectable\" />\r\n            <el-table-column width=\"50\">\r\n              <template #default=\"{ row }\">\r\n                <el-icon v-if=\"row.element_type === 'FOLDER'\" :size=\"20\"><Folder /></el-icon>\r\n                <el-icon v-else :size=\"20\"><Headset /></el-icon>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"element_name\" label=\"名称\" min-width=\"200\">\r\n              <template #default=\"{ row }\">\r\n                <div\r\n                  class=\"name-cell\"\r\n                  :class=\"{ 'folder-name': row.element_type === 'FOLDER' }\"\r\n                  @click=\"row.element_type === 'FOLDER' ? handleFolderClick(row) : null\"\r\n                >\r\n                  {{ row.element_name || '未命名' }}\r\n                </div>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"element_type\" label=\"类型\" width=\"100\">\r\n              <template #default=\"{ row }\">\r\n                {{ row.element_type === 'FOLDER' ? '文件夹' : '音频文件' }}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"预览\" min-width=\"300\">\r\n              <template #default=\"{ row }\">\r\n                <audio\r\n                  v-if=\"row.element_type !== 'FOLDER'\"\r\n                  :key=\"row.element_id\"\r\n                  :src=\"row.element_url\"\r\n                  controls\r\n                  preload=\"metadata\"\r\n                  class=\"audio-player\"\r\n                  @play=\"handleAudioPlay\"\r\n                ></audio>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n\r\n          <!-- 空状态 -->\r\n          <!-- <div v-if=\"filteredTemplates.length === 0\" class=\"empty-state\">\r\n            <el-empty description=\"暂无音频\"></el-empty>\r\n          </div> -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Folder ,Headset } from '@element-plus/icons-vue'\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  dataList: {\r\n    // 接收父组件的数据列表\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  selectedData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  maxCount: {\r\n    type: Number,\r\n    default: 20\r\n  },\r\n  showSelection: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n})\r\n// 定义事件\r\nconst emit = defineEmits(['selection-change', 'folder-click', 'scroll'])\r\nconst selectedTemplates = ref([])\r\nconst selectedTemplateIds = ref([])\r\nconst tableRef = ref(null)\r\n// 过滤后的模板列表\r\nconst filteredTemplates = computed(() => {\r\n  return props.dataList || []\r\n})\r\n\r\n// 判断是否可选\r\nconst isTemplateSelectable = (row) => {\r\n  // 如果是文件夹类型，直接返回 false\r\n  if (row.element_type === 'FOLDER') {\r\n    return false\r\n  }\r\n  // 其他类型的文件按照原有逻辑判断\r\n  return !isTemplateDisabled(row)\r\n}\r\n// 添加计算属性判断是否达到最大选择数量\r\nconst isTemplateDisabled = (template) => {\r\n  return (\r\n    selectedTemplates.value.length >= props.maxCount &&\r\n    !selectedTemplates.value.some((item) => item.element_id === template.element_id)\r\n  )\r\n}\r\n// 清空选中状态的方法\r\nconst clearSelection = () => {\r\n  selectedTemplates.value = []\r\n  selectedTemplateIds.value = []\r\n  // 通知父组件，选中项已清空\r\n}\r\n// 更新选中状态\r\nconst updateSelectedTemplates = () => {\r\n  // 先保存一份选中的ID列表，避免在处理过程中被修改\r\n  const currentSelectedIds = [...selectedTemplateIds.value]\r\n  selectedTemplates.value = currentSelectedIds\r\n    .map((id) => {\r\n      const template = props.dataList.find((item) => item.element_id === id)\r\n      return template ? template : selectedTemplates.value.find((item) => item.element_id === id)\r\n    })\r\n    .filter((item) => item && item.element_id)\r\n  // 添加勾选回显逻辑\r\n  nextTick(() => {\r\n    // 先清空表格选中状态\r\n    tableRef.value?.clearSelection()\r\n    // 使用保存的ID列表进行过滤\r\n    const rowsToSelect = filteredTemplates.value.filter(\r\n      (item) => currentSelectedIds.includes(item.element_id) && item.element_type !== 'FOLDER'\r\n    )\r\n    // 批量设置选中状态\r\n    rowsToSelect.forEach((row) => {\r\n      tableRef.value?.toggleRowSelection(row, true)\r\n    })\r\n  })\r\n}\r\nconst currentPlayingAudio = ref(null);\r\n\r\nconst handleAudioPlay = (event) => {\r\n  const audio = event.target;\r\n  if (currentPlayingAudio.value && currentPlayingAudio.value !== audio) {\r\n    currentPlayingAudio.value.pause();\r\n  }\r\n  currentPlayingAudio.value = audio;\r\n};\r\n\r\n// 设置选中模板\r\nconst setSelectedTemplates = (templates) => {\r\n  // console.log('设置选中模板', templates)\r\n  if (templates?.length) {\r\n    selectedTemplates.value = templates\r\n    selectedTemplateIds.value = templates.map((item) => item.element_id)\r\n  } else {\r\n    selectedTemplates.value = []\r\n    selectedTemplateIds.value = []\r\n  }\r\n  updateSelectedTemplates()\r\n}\r\nconst handleSelectAll = (selection) => {\r\n  // 获取当前可选的音频文件（排除文件夹）\r\n  if (selection.length > 0) {\r\n    // 如果总数超过最大限制\r\n    if (selectedTemplates.value.length > props.maxCount) {\r\n      // 取消全选操作\r\n      tableRef.value?.clearSelection()\r\n      // 提示用户\r\n      ElMessage.warning(`超过最大选择数量限制(${props.maxCount})个，无法全选`)\r\n      return\r\n    }\r\n  }\r\n}\r\n// 处理选择变化\r\nconst handleSelectionChange = (value) => {\r\n  // 获取当前选中和取消选中的项\r\n  const currentIds = value.map((item) => item.element_id)\r\n  // 合并ID列表，保持之前选中的状态\r\n  selectedTemplateIds.value = Array.from(\r\n    new Set([...selectedTemplateIds.value, ...currentIds])\r\n  ).filter((id) => {\r\n    // 如果在当前视图中取消选中，则从总列表中移除\r\n    if (props.dataList.some((item) => item.element_id === id)) {\r\n      return currentIds.includes(id)\r\n    }\r\n    // 不在当前视图中的ID保持原状\r\n    return true\r\n  })\r\n  selectedTemplates.value = selectedTemplateIds.value\r\n    .map((id) => {\r\n      const template = props.dataList.find((item) => item.element_id === id)\r\n      return template ? template : selectedTemplates.value.find((item) => item.element_id === id)\r\n    })\r\n    .filter((item) => item && item.element_id)\r\n  // 通知父组件，传递所有选中项的完整数据\r\n  emit('selection-change', selectedTemplates.value)\r\n}\r\n// 添加防抖函数\r\nconst debounce = (fn, delay) => {\r\n  let timer = null\r\n  return function (...args) {\r\n    if (timer) clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(this, args)\r\n    }, delay)\r\n  }\r\n}\r\n// 处理滚动\r\nconst isLoading = ref(false)\r\nconst handleScroll = debounce((e) => {\r\n  const { scrollTop, scrollHeight, clientHeight } = e.target\r\n  if (Math.abs(scrollHeight - scrollTop - clientHeight) <= 1 && !isLoading.value) {\r\n    isLoading.value = true\r\n    emit('scroll')\r\n    // 1秒后重置状态，防止频繁触发\r\n    setTimeout(() => {\r\n      isLoading.value = false\r\n    }, 1000)\r\n  }\r\n}, 200) // 200ms 的防抖延迟\r\n\r\n// 处理文件夹点击\r\nconst handleFolderClick = (folder) => {\r\n  emit('folder-click', folder)\r\n}\r\n\r\n// 监听父组件传入的selectedData变化\r\nwatch(\r\n  () => props.selectedData,\r\n  (newVal) => {\r\n    if (newVal?.length) {\r\n      // 更新选中ID列表\r\n      selectedTemplates.value = newVal\r\n      selectedTemplateIds.value = newVal.map((item) => item.element_id)\r\n      updateSelectedTemplates()\r\n    }\r\n  },\r\n  { immediate: true }\r\n)\r\n\r\n// 监听数据列表变化\r\nwatch(\r\n  () => props.dataList,\r\n  () => {\r\n    // 当数据列表更新时，根据已保存的ID重新设置选中状态\r\n    updateSelectedTemplates()\r\n  }\r\n)\r\n// 暴露方法\r\ndefineExpose({\r\n  setSelectedTemplates,\r\n  clearSelection\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-container {\r\n  height: 100%;\r\n  width: 100%;\r\n  // max-height: 55vh; // 设置最大高度为视窗高度的80%\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.resource-layout {\r\n  flex: 1;\r\n  display: flex;\r\n  background-color: #ffffff;\r\n  overflow: hidden; // 防止内容溢出\r\n}\r\n\r\n.right-panel {\r\n  flex: 1;\r\n  padding: 20px 20px 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  overflow: hidden; // 防止内容溢出\r\n}\r\n\r\n.materials-display {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 10px;\r\n\r\n  :deep(.el-table) {\r\n    .el-table__header-wrapper {\r\n      background-color: #f5f7fa;\r\n    }\r\n\r\n    .el-table__row {\r\n      cursor: default;\r\n    }\r\n  }\r\n}\r\n\r\n.name-cell {\r\n  &.folder-name {\r\n    color: #409eff;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n}\r\n\r\n.audio-player {\r\n  width: 100%;\r\n  height: 32px;\r\n}\r\n\r\n.template-name {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.empty-state {\r\n  padding: 40px 0;\r\n  text-align: center;\r\n}\r\n.search-box {\r\n  width: 250px;\r\n  :deep(.el-input__wrapper) {\r\n    border-radius: 20px;\r\n    background-color: #f5f7fa;\r\n    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n  :deep(.el-input__inner) {\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n.folder-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  cursor: pointer;\r\n  color: #606266;\r\n  background: #f7f8fa;\r\n  border-radius: 8px;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: #409eff;\r\n    background: #f0f7ff;\r\n  }\r\n\r\n  .el-icon {\r\n    font-size: 40px;\r\n    margin-top: auto; // 将图标推到顶部\r\n    margin-bottom: auto; // 图标与底部文字保持距离\r\n    color: #409eff;\r\n  }\r\n\r\n  .template-name {\r\n    text-align: center;\r\n    padding: 24px 12px; // 与视频项保持一致的内边距\r\n    min-height: 48px; // 与视频项保持一致的最小高度\r\n    font-size: 14px;\r\n    color: inherit;\r\n    background-color: #fff; // 与视频项保持一致的背景色\r\n    border-top: 1px solid #f0f0f0; // 与视频项保持一致的边框\r\n    width: 100%;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    &:hover {\r\n      color: #409eff;\r\n    }\r\n\r\n    &[title]:hover::after {\r\n      content: attr(title);\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      bottom: 100%;\r\n      padding: 5px 10px;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      color: white;\r\n      border-radius: 4px;\r\n      font-size: 12px;\r\n      white-space: nowrap;\r\n      z-index: 10;\r\n    }\r\n  }\r\n}\r\n\r\n// 添加提示样式\r\n.template-checkbox[title]:hover::after {\r\n  content: attr(title);\r\n  position: absolute;\r\n  top: -30px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 5px 10px;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  z-index: 10;\r\n}\r\n</style>\r\n","<template>\r\n  <el-dialog\r\n    v-model=\"dialogVisible\"\r\n    title=\"选择音频\"\r\n    width=\"85%\"\r\n    class=\"template-library-dialog\"\r\n    top=\"5vh\"\r\n    @close=\"handleDialogClose\"\r\n  >\r\n    <div class=\"dialog-content\">\r\n      <SelectedItemsList\r\n        ref=\"selectedItemsRef\"\r\n        title=\"已选音频\"\r\n        :selected-list=\"selectedList\"\r\n        empty-text=\"暂无选中音频\"\r\n        :maxItemsByType=\"maxItemsByType\"\r\n        @remove=\"removeSelected\"\r\n        @clear=\"handleCancel\"\r\n      />\r\n      <!-- 右侧音频列表区域 -->\r\n      <div class=\"music-list-area\">\r\n        <!-- 搜索框 -->\r\n        <div class=\"search-box\">\r\n          <el-input\r\n            class=\"custom-search-input\"\r\n            v-model=\"searchKey\"\r\n            placeholder=\"搜索关键字...\"\r\n            clearable\r\n            size=\"large\"\r\n            @clear=\"handleSearch\"\r\n            @keyup.enter=\"handleSearch\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Search /></el-icon>\r\n            </template>\r\n          </el-input>\r\n        </div>\r\n        <!-- 文件路径 -->\r\n        <BreadcrumbPath :path=\"currentPath\" @path-click=\"handlePathClick\" />\r\n        <!-- 添加加载状态 -->\r\n        <div class=\"loading-container\" v-loading=\"musicLoading\" element-loading-text=\"加载中...\">\r\n          <LibraryMusicList\r\n            ref=\"libraryRef\"\r\n            :visible=\"dialogVisible\"\r\n            :selected-data=\"selectedList\"\r\n            :data-list=\"musicList\"\r\n            :maxCount=\"maxItemsByType[addOption]\"\r\n            @selection-change=\"handleSelectionChange\"\r\n            @folder-click=\"handleFolderClick\"\r\n            @scroll=\"handleScroll\"\r\n          />\r\n        </div>\r\n        <div v-if=\"isMusicLoadMore\" class=\"bottom-loading\">\r\n          <el-icon class=\"loading-icon\"><Loading /></el-icon>\r\n          <span class=\"loading-text\">加载更多...</span>\r\n        </div>\r\n        <div\r\n          v-else-if=\"\r\n            !musicLoading &&\r\n            !isMusicLoadMore &&\r\n            musicList.length > 0 &&\r\n            musicList.length == musicTotalNumber + folderTotalNumber\r\n          \"\r\n          class=\"no-more\"\r\n        >\r\n          <span class=\"no-more-text\">已加载全部数据</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <label class=\"select-label\">添加为:</label>\r\n        <el-select v-model=\"addOption\" placeholder=\"选择原料用途\" class=\"select-box\">\r\n          <el-option\r\n            v-for=\"option in musicOptions\"\r\n            :key=\"option.value\"\r\n            :label=\"option.label\"\r\n            :value=\"option.value\"\r\n          ></el-option>\r\n        </el-select>\r\n        <!-- <el-button @click=\"toggleSelectAll\">{{ selectAllButtonText }}</el-button> -->\r\n        <el-button class=\"save-btn\" type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, watch, onMounted, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Search, Loading } from '@element-plus/icons-vue'\r\nimport LibraryMusicList from './components/LibraryMusicList.vue'\r\nimport SelectedItemsList from './components/SelectedItemsList.vue'\r\nimport BreadcrumbPath from './components/BreadcrumbPath.vue'\r\nimport { getElementList } from '@/service/jingDong'\r\n\r\nconst emit = defineEmits(['update:visible', 'confirm'])\r\n\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  selectedData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  maxCount: {\r\n    type: Number,\r\n    default: 1\r\n  }\r\n})\r\nonMounted(() => {})\r\nconst selectedItemsRef = ref(null)\r\nconst libraryRef = ref(null)\r\nconst musicList = ref([]) // 存储音频列表数据\r\nconst selectedList = ref({\r\n  BGM: []\r\n})\r\n// 添加计算属性\r\nconst maxItemsByType = computed(() => {\r\n  return {\r\n    BGM: props.maxCount\r\n  }\r\n})\r\n\r\n// 获取模板列表\r\nconst musicParams = reactive({\r\n  page: 1,\r\n  page_size: 20,\r\n  element_type: 'MUSIC',\r\n  path_name: '/'\r\n})\r\nconst selectAllButtonText = ref('本页全选')\r\nconst musicOptions = [{ label: '背景音乐', value: 'BGM' }]\r\nconst isMusicLoadMore = ref(false)\r\nconst addOption = ref('BGM')\r\nconst musicLoading = ref(false) // 确保loading变量已经定义\r\n// 添加最后获取数据的时间戳\r\nconst lastFetchTime = ref(0)\r\n\r\nconst dialogVisible = computed({\r\n  get: () => props.visible,\r\n  set: (val) => emit('update:visible', val)\r\n})\r\n\r\n// 处理选择变化\r\nconst handleSelectionChange = (value) => {\r\n  selectedList.value[addOption.value] = value\r\n  if (selectedItemsRef.value) {\r\n    // 检查类别是否是折叠状态\r\n    const isCollapsed = selectedItemsRef.value.isCategoryCollapsed(addOption.value)\r\n    // 如果是折叠状态，则调用 toggleCategory 方法来展开\r\n    if (isCollapsed) {\r\n      selectedItemsRef.value.toggleCategory(addOption.value)\r\n    }\r\n  }\r\n}\r\n\r\n// 移除单个选中项\r\nconst removeSelected = (item, type) => {\r\n  // 更新特定分组的 selectedList\r\n  selectedList.value[type] = selectedList.value[type].filter(\r\n    (i) => i.element_id !== item.element_id\r\n  )\r\n  // 同步更新 libraryRef 的选中状态\r\n  if (type == addOption.value) {\r\n    if (libraryRef.value) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[type])\r\n    }\r\n  }\r\n}\r\nconst handleFolderClick = async (folder) => {\r\n  // 拼接新路径\r\n  const newPath =\r\n    musicParams.path_name === '/'\r\n      ? '/' + folder.element_name\r\n      : `${musicParams.path_name}/${folder.element_name}`\r\n  musicParams.path_name = newPath\r\n  currentPath.value = newPath\r\n  // 调用接口获取新的数据列表\r\n  folderPage.value = 1\r\n  musicPage.value = 1\r\n  await handleGetElementList()\r\n  updateSelectAllButtonText()\r\n}\r\nconst handleConfirm = () => {\r\n  emit('confirm', selectedList.value)\r\n  dialogVisible.value = false\r\n}\r\n\r\nconst handleCancel = () => {\r\n  selectedList.value = {\r\n    BGM: []\r\n  }\r\n  if (libraryRef.value) {\r\n    libraryRef.value.clearSelection()\r\n  }\r\n}\r\n\r\nconst handleDialogClose = () => {\r\n  // console.log('关闭时清空选中状态,也可以不清空')\r\n}\r\n\r\nconst folderTotalNumber = ref(0)\r\nconst musicTotalNumber = ref(0)\r\n// 获取音频列表数据\r\nconst handleGetElementList = async (isLoadMore = false, type, pageMore) => {\r\n  try {\r\n    if (isLoadMore) {\r\n      if (type === 'folder') {\r\n        const folderMoreRes = await getElementList({\r\n          ...musicParams,\r\n          page: pageMore,\r\n          element_type: 'FOLDER'\r\n        })\r\n        if (folderMoreRes.code === 0) {\r\n          // 合并文件夹和音频数据，文件夹在前\r\n          const folders = (folderMoreRes.data.elements || []).map((item) => ({\r\n            ...item,\r\n            isFolder: true // 添加标识，用于区分文件夹和音频\r\n          }))\r\n          musicList.value = [...musicList.value, ...folders]\r\n        } else {\r\n          ElMessage.error(folderMoreRes.message || '获取数据失败')\r\n        }\r\n      } else if (type === 'music') {\r\n        const musicMoreRes = await getElementList({\r\n          ...musicParams,\r\n          page: pageMore,\r\n          element_type: 'MUSIC'\r\n        })\r\n        if (musicMoreRes.code === 0) {\r\n          const musics = musicMoreRes.data.elements || []\r\n          musicList.value = [...musicList.value, ...musics]\r\n        } else {\r\n          ElMessage.error(musicMoreRes.message || '获取数据失败')\r\n        }\r\n      }\r\n      isMusicLoadMore.value = false\r\n      return // 不执行后续代码，直接返回\r\n    }\r\n    musicLoading.value = true\r\n    // 先获取文件夹数据\r\n    const folderRes = await getElementList({\r\n      ...musicParams,\r\n      element_type: 'FOLDER'\r\n    })\r\n\r\n    // 再获取音频数据\r\n    const musicRes = await getElementList({\r\n      ...musicParams,\r\n      element_type: 'MUSIC'\r\n    })\r\n\r\n    if (folderRes.code === 0 && musicRes.code === 0) {\r\n      // 合并文件夹和音频数据，文件夹在前\r\n      const folders = (folderRes.data.elements || []).map((item) => ({\r\n        ...item,\r\n        isFolder: true // 添加标识，用于区分文件夹和音频\r\n      }))\r\n      const musics = musicRes.data.elements || []\r\n\r\n      musicList.value = [...folders, ...musics]\r\n      folderTotalNumber.value = folderRes.data.page_info?.total_number || 0\r\n      musicTotalNumber.value = musicRes.data.page_info?.total_number || 0\r\n\r\n    } else {\r\n      ElMessage.error(folderRes.message || musicRes.message || '获取数据失败')\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(error || '获取数据失败')\r\n  } finally {\r\n    musicLoading.value = false\r\n  }\r\n}\r\n\r\n// 添加搜索相关的响应式变量和方法\r\nconst searchKey = ref('')\r\nconst handleSearch = async () => {\r\n  folderPage.value = 1\r\n  musicPage.value = 1\r\n  // 实现搜索逻辑\r\n  if (searchKey.value == '' && musicParams.element_name) {\r\n    delete musicParams.element_name\r\n    await handleGetElementList()\r\n    return\r\n  }\r\n  musicParams.element_name = searchKey.value\r\n  await handleGetElementList()\r\n}\r\nconst currentPath = ref('/')\r\n// 处理路径点击\r\nconst handlePathClick = async (path) => {\r\n  folderPage.value = 1\r\n  musicPage.value = 1\r\n  currentPath.value = path\r\n  musicParams.path_name = path\r\n  // 重新获取数据\r\n  await handleGetElementList()\r\n  updateSelectAllButtonText()\r\n}\r\nconst updateSelectAllButtonText = () => {\r\n  const musicIds = musicList.value.filter((item) => !item.isFolder).map((item) => item.element_id)\r\n  if (musicIds.length === 0) {\r\n    selectAllButtonText.value = '本页全选'\r\n    return\r\n  }\r\n  // 检查 selectedList 中是否包含所有音频的 ID\r\n  const allSelected = musicIds.every((id) =>\r\n    selectedList.value[addOption.value].some((selected) => selected.element_id === id)\r\n  )\r\n  selectAllButtonText.value = allSelected ? '取消本页选中' : '本页全选'\r\n}\r\nconst folderPage = ref(1)\r\nconst musicPage = ref(1)\r\n// 处理滚动\r\nconst handleScroll = async () => {\r\n  if (folderPage.value * musicParams.page_size < folderTotalNumber.value) {\r\n    isMusicLoadMore.value = true\r\n    folderPage.value += 1\r\n    await handleGetElementList(true, 'folder', folderPage.value) // 添加参数表示是分页加载\r\n  }\r\n  if (musicPage.value * musicParams.page_size < musicTotalNumber.value) {\r\n    isMusicLoadMore.value = true\r\n    musicPage.value += 1\r\n    await handleGetElementList(true, 'music', musicPage.value) // 添加参数表示是分页加载\r\n  }\r\n}\r\n\r\n// 修改 visible 的监听器\r\nwatch(\r\n  () => props.visible,\r\n  async (newVal) => {\r\n    if (newVal) {\r\n      const currentTime = Date.now()\r\n      // 如果是第一次获取数据或者距离上次获取数据超过5分钟，则重新获取\r\n      if (lastFetchTime.value === 0 || currentTime - lastFetchTime.value > 5 * 60 * 1000) {\r\n        folderPage.value = 1\r\n        musicPage.value = 1\r\n        await handleGetElementList()\r\n        // 更新最后获取时间\r\n        lastFetchTime.value = currentTime\r\n      }\r\n\r\n      if (props.selectedData && typeof props.selectedData === 'object') {\r\n        selectedList.value = JSON.parse(JSON.stringify(props.selectedData))\r\n        nextTick(() => {\r\n          if (libraryRef.value) {\r\n            libraryRef.value.setSelectedTemplates(selectedList.value[addOption.value])\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n)\r\n// 监听 addOption 的变化\r\nwatch(\r\n  () => addOption.value,\r\n  (newVal) => {\r\n    if (libraryRef.value && selectedList.value[newVal]) {\r\n      libraryRef.value.setSelectedTemplates(selectedList.value[newVal])\r\n    }\r\n    updateSelectAllButtonText()\r\n  }\r\n)\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-dialog {\r\n  :deep(.el-dialog) {\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n    box-shadow: 0 12px 32px 4px rgba(0, 0, 0, 0.04), 0 8px 20px rgba(0, 0, 0, 0.08);\r\n  }\r\n\r\n  :deep(.el-dialog__header) {\r\n    margin: 0;\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #e4e7ed;\r\n\r\n    .el-dialog__title {\r\n      font-size: 18px;\r\n      font-weight: 600;\r\n      color: #303133;\r\n    }\r\n  }\r\n\r\n  .dialog-content {\r\n    display: flex;\r\n    gap: 24px;\r\n    height: 70vh;\r\n    padding: 24px;\r\n  }\r\n\r\n  .music-list-area {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    background: #fff;\r\n    border-radius: 8px;\r\n    // padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    height: 100%;\r\n    .loading-container {\r\n      flex: 1;\r\n      overflow-y: auto;\r\n      min-height: 0;\r\n    }\r\n  }\r\n\r\n  .search-box {\r\n    // width: 600px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 30px;\r\n    // padding: 0 20px;\r\n    :deep(.el-input__wrapper) {\r\n      border-radius: 20px;\r\n      background-color: #f5f7fa;\r\n      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n    }\r\n\r\n    :deep(.el-input__inner) {\r\n      background-color: transparent;\r\n    }\r\n    .custom-search-input {\r\n      width: 300px;\r\n    }\r\n  }\r\n  .save-btn {\r\n    min-width: 80px;\r\n    font-size: 14px;\r\n    background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n    border: none;\r\n  }\r\n\r\n  .path-display {\r\n    padding: 0 20px;\r\n\r\n    .path-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n    }\r\n\r\n    .path-label {\r\n      color: #606266;\r\n      font-size: 14px;\r\n    }\r\n\r\n    .back-icon {\r\n      font-size: 16px;\r\n      cursor: pointer;\r\n      color: #606266;\r\n      transition: all 0.3s ease;\r\n\r\n      &:hover {\r\n        color: #409eff;\r\n        transform: translateX(-2px);\r\n      }\r\n    }\r\n\r\n    :deep(.el-breadcrumb__item) {\r\n      color: #606266;\r\n      font-size: 14px;\r\n\r\n      &.clickable {\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          color: #409eff;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .dialog-footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 15px;\r\n    margin-left: auto;\r\n  }\r\n  .search-btn {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 2px;\r\n  }\r\n  .select-label {\r\n    font-size: 14px;\r\n    color: #606266;\r\n    width: 100px;\r\n    font-weight: 600;\r\n  }\r\n  .select-box {\r\n    width: 200px;\r\n  }\r\n  /* 底部加载更多 */\r\n  .bottom-loading {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -20px;\r\n    background: transparent;\r\n  }\r\n  /* 加载图标 */\r\n  .loading-icon {\r\n    font-size: 20px;\r\n    color: #409eff;\r\n    animation: rotate 1.5s linear infinite;\r\n  }\r\n  /* 加载文本 */\r\n  .loading-text {\r\n    margin-left: 8px;\r\n    font-size: 14px;\r\n    color: #909399;\r\n  }\r\n  /* 无更多数据 */\r\n  .no-more {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -20px;\r\n    .no-more-text {\r\n      font-size: 14px;\r\n      color: #909399;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"create-task-container\">\r\n    <div class=\"two-column-layout\">\r\n      <div class=\"left-config-area\">\r\n        <div class=\"left-content-wrapper\">\r\n          <div class=\"cards-container\">\r\n            <div class=\"config-card\">\r\n              <div class=\"card-header\">\r\n                <span class=\"card-title\">参数配置</span>\r\n              </div>\r\n              <div class=\"card-content\">\r\n                <el-form\r\n                  :model=\"formData\"\r\n                  :rules=\"formRules\"\r\n                  ref=\"formRef\"\r\n                  label-position=\"top\"\r\n                  require-asterisk-position=\"right\"\r\n                >\r\n                  <el-form-item label=\"产品名称\" prop=\"productName\" required>\r\n                    <el-input\r\n                      v-model=\"formData.productName\"\r\n                      placeholder=\"请输入产品名称\"\r\n                      clearable\r\n                    />\r\n                  </el-form-item>\r\n                  <el-form-item label=\"产品卖点\" prop=\"productSellingPoints\" required>\r\n                    <el-select\r\n                      v-model=\"formData.productSellingPoints\"\r\n                      multiple\r\n                      filterable\r\n                      allow-create\r\n                      default-first-option\r\n                      placeholder=\"请输入产品卖点\"\r\n                      @keyup.enter=\"clearSelectInput\"\r\n                    >\r\n                      <el-option\r\n                        v-for=\"(item, index) in productSellingPointsList\"\r\n                        :key=\"index\"\r\n                        :label=\"item\"\r\n                        :value=\"item\"\r\n                      />\r\n                    </el-select>\r\n                  </el-form-item>\r\n                  <el-form-item label=\"产品利益点\" prop=\"productBenefit\">\r\n                    <el-select\r\n                      v-model=\"formData.productBenefit\"\r\n                      multiple\r\n                      filterable\r\n                      allow-create\r\n                      default-first-option\r\n                      placeholder=\"请输入产品利益点\"\r\n                      @keyup.enter=\"clearSelectInput\"\r\n                    >\r\n                      <el-option\r\n                        v-for=\"(item, index) in productBenefitList\"\r\n                        :key=\"index\"\r\n                        :label=\"item\"\r\n                        :value=\"item\"\r\n                      />\r\n                    </el-select>\r\n                  </el-form-item>\r\n                  <el-form-item label=\"生成条数\" prop=\"count\" required>\r\n                    <el-input-number v-model=\"formData.count\" :min=\"1\" :max=\"5\" />\r\n                  </el-form-item>\r\n                  <el-form-item label=\"视频原料\" prop=\"selectedVideoIds\">\r\n                    <template #label>\r\n                      <span>视频原料</span>\r\n                      <span\r\n                        v-if=\"formData.selectedVideoNames.length\"\r\n                        style=\"margin-left: 8px; font-size: 12px; color: #909399\"\r\n                      >\r\n                        (已选择 {{ formData.selectedVideoNames.length }} 个视频)\r\n                      </span>\r\n                    </template>\r\n                    <div class=\"image-upload-wrapper\">\r\n                      <div class=\"watermark-uploader\" @click=\"selectTemplate\">\r\n                        <div class=\"upload-box\">\r\n                          <template v-if=\"formData.selectedVideoNames.length\">\r\n                            <span class=\"selected-name\">{{\r\n                              formData.selectedVideoNames.join(', ')\r\n                            }}</span>\r\n                          </template>\r\n                          <div v-else class=\"upload-placeholder\">\r\n                            <el-icon class=\"upload-icon\"><Plus /></el-icon>\r\n                            <span>选择视频</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </el-form-item>\r\n                  <el-form-item label=\"图片原料\" prop=\"selectedImageIds\">\r\n                    <template #label>\r\n                      <span>图片原料</span>\r\n                      <span\r\n                        v-if=\"formData.selectedImageNames.length\"\r\n                        style=\"margin-left: 8px; font-size: 12px; color: #909399\"\r\n                      >\r\n                        (已选择 {{ formData.selectedImageNames.length }} 个图片)\r\n                      </span>\r\n                    </template>\r\n                    <div class=\"image-upload-wrapper\">\r\n                      <div class=\"watermark-uploader\" @click=\"selectImage\">\r\n                        <div class=\"upload-box\">\r\n                          <template v-if=\"formData.selectedImageNames.length\">\r\n                            <span class=\"selected-name\">{{\r\n                              formData.selectedImageNames.join(', ')\r\n                            }}</span>\r\n                          </template>\r\n                          <div v-else class=\"upload-placeholder\">\r\n                            <el-icon class=\"upload-icon\"><Plus /></el-icon>\r\n                            <span>选择图片</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </el-form-item>\r\n                  <el-form-item label=\"音频原料\" prop=\"selectedMusicIds\">\r\n                    <template #label>\r\n                      <span>音频原料</span>\r\n                      <span\r\n                        v-if=\"formData.selectedMusicNames.length\"\r\n                        style=\"margin-left: 8px; font-size: 12px; color: #909399\"\r\n                      >\r\n                        (已选择 {{ formData.selectedMusicNames.length }} 个音频)\r\n                      </span>\r\n                    </template>\r\n                    <div class=\"image-upload-wrapper\">\r\n                      <div class=\"watermark-uploader\" @click=\"selectMusic\">\r\n                        <div class=\"upload-box\">\r\n                          <template v-if=\"formData.selectedMusicNames.length\">\r\n                            <span class=\"selected-name\">{{\r\n                              formData.selectedMusicNames.join(', ')\r\n                            }}</span>\r\n                          </template>\r\n                          <div v-else class=\"upload-placeholder\">\r\n                            <el-icon class=\"upload-icon\"><Plus /></el-icon>\r\n                            <span>选择音频</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </el-form-item>\r\n\r\n                  <el-form-item label=\"自动保存\" prop=\"autoSave\">\r\n                    <el-switch v-model=\"formData.autoSave\" active-text=\"是\" inactive-text=\"否\" />\r\n                  </el-form-item>\r\n                  <el-form-item label=\"命名规则\" prop=\"customImageName\" required>\r\n                    <template #label>\r\n                      <span>命名规则</span>\r\n                      <span\r\n                        v-if=\"formData.autoSave\"\r\n                        style=\"margin-left: 8px; font-size: 12px; color: #909399\"\r\n                      >\r\n                        (自动保存时,命名规则需以{序号}结尾)\r\n                      </span>\r\n                    </template>\r\n                    <div class=\"naming-rule-selector\">\r\n                      <div class=\"naming-input-container\">\r\n                        <el-input\r\n                          v-model=\"formData.customImageName\"\r\n                          placeholder=\"请输入自定义命名规则\"\r\n                          clearable\r\n                        >\r\n                        </el-input>\r\n                        <div class=\"naming-variables\">\r\n                          <span class=\"variables-title\">可用变量：</span>\r\n                          <div class=\"variables-container\">\r\n                            <el-tag\r\n                              v-for=\"variable in namingVariables\"\r\n                              :key=\"variable.value\"\r\n                              size=\"small\"\r\n                              class=\"variable-tag\"\r\n                              @click=\"insertNamingVariable(variable.value)\"\r\n                            >\r\n                              {{ variable.label }}\r\n                            </el-tag>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"naming-rule-hint\">\r\n                          <el-tag size=\"small\" type=\"info\"\r\n                            >预览: {{ getCustomNamingExample() }}</el-tag\r\n                          >\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </el-form-item>\r\n                </el-form>\r\n                <div class=\"card-actions\">\r\n                  <button class=\"create-task-btn\" @click=\"handleSubmit\" :disabled=\"submitting\">\r\n                    <span class=\"btn-icon\">\r\n                      <el-icon><Plus /></el-icon>\r\n                    </span>\r\n                    <span class=\"btn-text\">{{ submitting ? '创建中...' : '创建任务' }}</span>\r\n                  </button>\r\n                  <button class=\"reset-btn\" @click=\"resetForm\">\r\n                    <span class=\"btn-text\">重置</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"right-preview-area\">\r\n        <div class=\"preview-header\">\r\n          <div class=\"title-wrapper\">\r\n            <span class=\"preview-title\"\r\n              >产品列表\r\n              <el-icon title=\"点击刷新列表\" class=\"refresh-icon\" @click=\"handleRefresh()\"\r\n                ><Refresh /></el-icon\r\n            ></span>\r\n          </div>\r\n          <div class=\"search_container\">\r\n            <div class=\"preview-status\">\r\n              状态筛选:<el-tag\r\n                class=\"tag_status\"\r\n                type=\"info\"\r\n                :class=\"{ 'selected-tag': selectedTag === variable.value }\"\r\n                v-for=\"variable in statusTag\"\r\n                :key=\"variable.value\"\r\n                @click=\"handleTag(variable.value)\"\r\n              >\r\n                <div class=\"tag_label\">\r\n                  {{ variable.label }}\r\n                </div>\r\n              </el-tag>\r\n            </div>\r\n            <div class=\"search-box\">\r\n              <el-input\r\n                class=\"custom-search-input\"\r\n                v-model=\"searchKey\"\r\n                placeholder=\"搜索关键字...\"\r\n                clearable\r\n                size=\"large\"\r\n                @clear=\"handleSearch\"\r\n                @keyup.enter=\"handleSearch\"\r\n              >\r\n                <template #prefix>\r\n                  <el-icon><Search /></el-icon>\r\n                </template>\r\n              </el-input>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"task-list-content\" @scroll=\"handleScroll\">\r\n            <div v-if=\"loading && !isLoadMore\" class=\"loading-container\">\r\n              <el-icon class=\"loading-icon\"><Loading /></el-icon>\r\n              <span class=\"loading-text\">数据加载中...</span>\r\n            </div>\r\n            <div v-else-if=\"synthesizedVoices.length === 0 && !loading\" class=\"empty-state\">\r\n              <el-empty description=\"暂无数据\"></el-empty>\r\n            </div>\r\n            <template v-else>\r\n              <div class=\"task-group\" v-for=\"(voice, index) in synthesizedVoices\" :key=\"index\">\r\n                <div class=\"task-header\">\r\n                  <div class=\"task-info\">\r\n                    <div class=\"task-name\">\r\n                      <span class=\"task-index\">{{ index + 1 }}</span\r\n                      >{{ voice.task_name }}\r\n                      <el-tag\r\n                        v-if=\"voice.status == 'saved' || voice.status == 'autosave'\"\r\n                        type=\"warning\"\r\n                        class=\"task_status\"\r\n                      >\r\n                        {{ voice.status == 'saved' ? '已保存' : '自动保存' }}\r\n                      </el-tag>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"task-content\">\r\n                  <div class=\"task-actions\">\r\n                    <el-checkbox-group\r\n                      v-if=\"voice.result.status == 'SUCCESS' && voice.result.video_infos.length > 0\"\r\n                      v-model=\"checkedNames\"\r\n                      class=\"el-checkbox-group\"\r\n                    >\r\n                      <el-checkbox\r\n                        v-for=\"(item, index) in voice.result.video_infos\"\r\n                        :key=\"index\"\r\n                        :label=\"item\"\r\n                        :value=\"item.id\"\r\n                        class=\"image-item\"\r\n                      >\r\n                        <video\r\n                          :src=\"item.video_url\"\r\n                          class=\"preview\"\r\n                          controls\r\n                          preload=\"metadata\"\r\n                          @play=\"handlePlay\"\r\n                        ></video>\r\n                        <div class=\"info\">\r\n                          <div class=\"video-name\" :title=\"item.video_name\">\r\n                            {{ item.video_name }}\r\n                          </div>\r\n                        </div>\r\n                      </el-checkbox>\r\n                    </el-checkbox-group>\r\n                    <div v-else-if=\"voice.status == 'waiting'\" class=\"padding-status\">\r\n                      <div class=\"padding-content\">\r\n                        <el-icon class=\"padding-icon\"><Loading /></el-icon>\r\n                        <span class=\"padding-text\">等待中...</span>\r\n                      </div>\r\n                    </div>\r\n                    <div v-else-if=\"voice.result.status == 'PROCESSING'\" class=\"padding-status\">\r\n                      <div class=\"padding-content\">\r\n                        <el-icon class=\"padding-icon\"><Loading /></el-icon>\r\n                        <span class=\"padding-text\">视频生成中...</span>\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      v-else-if=\"voice.result.status == 'FAILED' || voice.status == 'failed'\"\r\n                      class=\"failed-status\"\r\n                    >\r\n                      <div class=\"failed-content\">\r\n                        <el-icon class=\"failed-icon\"><Warning /></el-icon>\r\n                        <span class=\"failed-text\">视频生成失败</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    class=\"save-btn-wrapper\"\r\n                    v-if=\"\r\n                      voice.result.status == 'SUCCESS' &&\r\n                      voice.status !== 'saved' &&\r\n                      voice.status !== 'autosave'\r\n                    \"\r\n                  >\r\n                    <el-button\r\n                      type=\"primary\"\r\n                      size=\"small\"\r\n                      class=\"save-btn\"\r\n                      @click=\"handleSave(voice)\"\r\n                      >{{ hasCheckedVideos(voice) ? '保存选中' : '保存全部' }}</el-button\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div v-if=\"isLoadMore\" class=\"bottom-loading\">\r\n                <el-icon class=\"loading-icon\"><Loading /></el-icon>\r\n                <span class=\"loading-text\">加载更多...</span>\r\n              </div>\r\n              <div\r\n                v-if=\"!isLoadMore && total > 0 && synthesizedVoices.length >= total\"\r\n                class=\"no-more\"\r\n              >\r\n                <span class=\"no-more-text\">已加载全部数据</span>\r\n              </div>\r\n            </template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <SelectVideoDialog\r\n      v-model:visible=\"videoDialogVisible\"\r\n      :selectedData=\"selectVideoList\"\r\n      :maxCount=\"formData.count\"\r\n      :disabledVideoTypes=\"disabledVideoTypes\"\r\n      @confirm=\"(data) => handleResourceConfirm('video', data)\"\r\n    />\r\n    <SelectImageDialog\r\n      v-model:visible=\"imageDialogVisible\"\r\n      :selectedData=\"selectImageList\"\r\n      :maxCount=\"formData.count\"\r\n      :disabledImageTypes=\"disabledImageTypes\"\r\n      @confirm=\"(data) => handleResourceConfirm('image', data)\"\r\n    />\r\n    <SelectMusicDialog\r\n      v-model:visible=\"musicDialogVisible\"\r\n      :selectedData=\"selectMusicList\"\r\n      :maxCount=\"formData.count\"\r\n      @confirm=\"(data) => handleResourceConfirm('music', data)\"\r\n    />\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { ref, reactive, nextTick, onMounted, computed, watch, onUnmounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Plus, Document, Loading, Refresh } from '@element-plus/icons-vue'\r\nimport SelectVideoDialog from './SelectVideoDialog.vue'\r\nimport SelectImageDialog from './SelectImageDialog.vue'\r\nimport SelectMusicDialog from './SelectMusicDialog.vue'\r\n\r\nimport {\r\n  postMixCut,\r\n  getTaskList,\r\n  getTaskResult,\r\n  postTaskSave,\r\n  getProductInfo\r\n} from '@/service/jingDong'\r\nonMounted(() => {\r\n  handleGetTaskList()\r\n})\r\n// 简化的模拟数据\r\nconst synthesizedVoices = ref([])\r\n// 表单数据\r\nconst formData = reactive({\r\n  productName: '',\r\n  productSellingPoints: [],\r\n  productBenefit: [],\r\n  selectedVideoIds: {},\r\n  selectedVideoNames: [],\r\n  selectedImageIds: {},\r\n  selectedImageNames: [],\r\n  selectedMusicIds: [],\r\n  selectedMusicNames: [],\r\n  customImageName: '{产品名}-{序号}',\r\n  templateIds: [],\r\n  taskName: '',\r\n  count: 1,\r\n  autoSave: false\r\n})\r\nconst productSellingPointsList = ref([])\r\nconst productBenefitList = ref([])\r\n\r\nconst selectVideoList = ref({\r\n  RAW: [],\r\n  PRE_VIDEO: [],\r\n  POST_VIDEO: [],\r\n  FOREGROUND: [],\r\n  BACKGROUND: []\r\n})\r\nconst selectImageList = ref({\r\n  RAW: [],\r\n  FOREGROUND: [],\r\n  BACKGROUND: []\r\n})\r\nconst selectMusicList = ref({\r\n  BGM: []\r\n})\r\nconst selectedTag = ref('all')\r\nconst searchKey = ref('')\r\n// 表单校验规则\r\nconst formRules = {\r\n  productName: [{ required: true, message: '请输入产品名称', trigger: 'blur' }],\r\n  productSellingPoints: [{ required: true, message: '请输入产品卖点', trigger: 'blur' }],\r\n  customImageName: [{ required: true, message: '请设置命名规则', trigger: 'blur' }]\r\n}\r\nconst loading = ref(false)\r\nconst isLoadMore = ref(false)\r\nconst total = ref(0)\r\nconst formRef = ref(null)\r\nconst submitting = ref(false)\r\n// 选择原料\r\nconst videoDialogVisible = ref(false)\r\nconst imageDialogVisible = ref(false)\r\nconst musicDialogVisible = ref(false)\r\n\r\nconst checkedNames = ref([])\r\n// 命名变量选项\r\nconst namingVariables = [\r\n  { label: '{产品名}', value: '{产品名}' },\r\n  { label: '{序号}', value: '{序号}' },\r\n  { label: '{日期}', value: '{日期}' },\r\n  { label: '{时间}', value: '{时间}' }\r\n]\r\nconst statusTag = [\r\n  { label: '全部', value: 'all' },\r\n  { label: '等待中', value: 'waiting' },\r\n  { label: '已开始', value: 'started' },\r\n  { label: '已保存', value: 'saved' },\r\n  { label: '自动保存', value: 'autosave' }\r\n]\r\nconst clearSelectInput = (event) => {\r\n  const input = event.target\r\n  if (input) {\r\n    input.value = ''\r\n    input.dispatchEvent(new Event('input'))\r\n  }\r\n}\r\n// 处理选择确认\r\nconst handleResourceConfirm = (type, selectedList) => {\r\n  const idsByType = {}\r\n  for (const [types, items] of Object.entries(selectedList)) {\r\n    idsByType[types] = items.map((item) => item.element_id)\r\n  }\r\n  const allSelectedItems = Object.values(selectedList).flat()\r\n  switch (type) {\r\n    case 'video':\r\n      videoDialogVisible.value = false\r\n      selectVideoList.value = selectedList\r\n      formData.selectedVideoIds = idsByType\r\n      formData.selectedVideoNames = allSelectedItems.map((item) => item.element_name) || []\r\n      break\r\n    case 'image':\r\n      imageDialogVisible.value = false\r\n      selectImageList.value = selectedList\r\n      formData.selectedImageIds = idsByType\r\n      formData.selectedImageNames = allSelectedItems.map((item) => item.element_name) || []\r\n      break\r\n    case 'music':\r\n      musicDialogVisible.value = false\r\n      selectMusicList.value = selectedList\r\n      formData.selectedMusicIds = idsByType\r\n      formData.selectedMusicNames = allSelectedItems.map((item) => item.element_name) || []\r\n      break\r\n  }\r\n}\r\nconst taskParams = reactive({\r\n  name: '',\r\n  page: 1,\r\n  page_size: 5\r\n})\r\n// 修改获取任务列表方法\r\nconst handleGetTaskList = async (loadMore = false) => {\r\n  if (loadMore) {\r\n    isLoadMore.value = true\r\n  } else {\r\n    loading.value = true\r\n  }\r\n  try {\r\n    const res = await getTaskList(taskParams)\r\n    if (res.code === 0) {\r\n      if (loadMore) {\r\n        synthesizedVoices.value = [...synthesizedVoices.value, ...res.data.list]\r\n      } else {\r\n        synthesizedVoices.value = res.data.list\r\n      }\r\n      total.value = res.data.count\r\n      // 检查是否有PROCESSING状态的任务\r\n      const hasProcessing = synthesizedVoices.value.some(\r\n        (voice) =>\r\n          voice.status === 'waiting' || (voice.result && voice.result.status === 'PROCESSING')\r\n      )\r\n      if (hasProcessing && !pollTimeout) {\r\n        // 设置3秒后再次轮询\r\n        setTimeout(() => {\r\n          pollProcessingTasks()\r\n        }, 3000)\r\n      }\r\n    } else {\r\n      throw new Error(res.message)\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error('获取产品列表失败')\r\n  } finally {\r\n    loading.value = false\r\n    isLoadMore.value = false\r\n  }\r\n}\r\nlet pollTimeout = null\r\nconst pollParams = reactive({\r\n  page: 1,\r\n  page_size: 5\r\n})\r\nconst pollProcessingTasks = async () => {\r\n  try {\r\n    // 获取当前所有waiting状态的任务ID\r\n    const waitingTaskIds = synthesizedVoices.value\r\n      .filter(\r\n        (voice) =>\r\n          voice.status === 'waiting' || (voice.result && voice.result.status === 'PROCESSING')\r\n      )\r\n      .map((voice) => voice.id)\r\n    // 如果没有waiting状态的任务，则不需要轮询\r\n    if (waitingTaskIds.length === 0) {\r\n      return\r\n    }\r\n    const pollRes = await getTaskList(pollParams)\r\n    if (pollRes.code === 0) {\r\n      // 只更新状态为waiting的任务\r\n      synthesizedVoices.value = synthesizedVoices.value.map((voice) => {\r\n        if (waitingTaskIds.includes(voice.id)) {\r\n          const updatedVoice = pollRes.data.list.find((v) => v.id === voice.id)\r\n          if (updatedVoice) {\r\n            // 保留原始视频URL，避免重新加载\r\n            if (\r\n              voice.result &&\r\n              voice.result.video_infos &&\r\n              updatedVoice.result &&\r\n              updatedVoice.result.video_infos\r\n            ) {\r\n              // 深拷贝更新后的视频信息\r\n              const updatedVideoInfos = JSON.parse(JSON.stringify(updatedVoice.result.video_infos))\r\n\r\n              // 将原始视频URL保留到更新后的数据中\r\n              for (let i = 0; i < updatedVideoInfos.length; i++) {\r\n                const oldInfo = voice.result.video_infos[i]\r\n                if (oldInfo && oldInfo.video_url) {\r\n                  updatedVideoInfos[i].video_url = oldInfo.video_url\r\n                }\r\n              }\r\n\r\n              // 更新视频信息\r\n              updatedVoice.result.video_infos = updatedVideoInfos\r\n            }\r\n            return updatedVoice\r\n          }\r\n          return voice\r\n        }\r\n        return voice\r\n      })\r\n\r\n      // 检查是否还有处理中的任务\r\n      const stillProcessing = synthesizedVoices.value.some(\r\n        (voice) =>\r\n          voice.status === 'waiting' || (voice.result && voice.result.status === 'PROCESSING')\r\n      )\r\n      if (stillProcessing) {\r\n        pollTimeout = setTimeout(pollProcessingTasks, 3000)\r\n      }\r\n    } else {\r\n      ElMessage.error(pollRes.message)\r\n    }\r\n  } catch (error) {\r\n    console.error('轮询失败:', error)\r\n  }\r\n}\r\n// 刷新列表\r\nconst handleRefresh = () => {\r\n  taskParams.page = 1\r\n  handleGetTaskList(false)\r\n}\r\n// 优化滚动处理方法\r\nconst handleScroll = (e) => {\r\n  const { scrollTop, scrollHeight, clientHeight } = e.target\r\n  // 判断是否滚动到底部\r\n  if (scrollHeight - scrollTop <= clientHeight + 50) {\r\n    if (\r\n      !loading.value &&\r\n      !isLoadMore.value &&\r\n      taskParams.page * taskParams.page_size < total.value\r\n    ) {\r\n      taskParams.page += 1\r\n      handleGetTaskList(true)\r\n    }\r\n  }\r\n}\r\nconst handleTag = (value) => {\r\n  selectedTag.value = value\r\n  taskParams.page = 1\r\n  taskParams.status = value\r\n  handleGetTaskList()\r\n}\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  taskParams.page = 1\r\n  taskParams.name = searchKey.value\r\n  handleGetTaskList()\r\n}\r\nconst disabledVideoTypes = ref([])\r\n// 选择视频\r\nconst selectTemplate = () => {\r\n  pauseAllVideos()\r\n  // 检查是否已选择前景和背景图片\r\n  updateDisabledTypes(['FOREGROUND', 'BACKGROUND'], formData.selectedImageIds, disabledVideoTypes)\r\n  videoDialogVisible.value = true\r\n}\r\nconst disabledImageTypes = ref([])\r\n// 选择图片\r\nconst selectImage = () => {\r\n  pauseAllVideos()\r\n  updateDisabledTypes(['FOREGROUND', 'BACKGROUND'], formData.selectedVideoIds, disabledImageTypes)\r\n  imageDialogVisible.value = true\r\n}\r\n// 更新禁用类型\r\nconst updateDisabledTypes = (types, sourceIds, targetDisabled) => {\r\n  types.forEach((type) => {\r\n    if (sourceIds?.[type]?.length > 0) {\r\n      if (!targetDisabled.value.includes(type)) {\r\n        targetDisabled.value.push(type)\r\n      }\r\n    } else {\r\n      const index = targetDisabled.value.indexOf(type)\r\n      if (index > -1) {\r\n        targetDisabled.value.splice(index, 1)\r\n      }\r\n    }\r\n  })\r\n}\r\n// 选择音频\r\nconst selectMusic = () => {\r\n  pauseAllVideos()\r\n  musicDialogVisible.value = true\r\n}\r\n// 获取自定义命名示例\r\nconst getCustomNamingExample = () => {\r\n  if (!formData.customImageName) {\r\n    return '自定义-{序号}'\r\n  }\r\n\r\n  // 替换示例变量\r\n  let example = formData.customImageName\r\n  const productName = formData.productName || '产品名'\r\n  const today = new Date()\r\n  const dateStr = `${today.getFullYear()}${(today.getMonth() + 1)\r\n    .toString()\r\n    .padStart(2, '0')}${today.getDate().toString().padStart(2, '0')}`\r\n  const timeStr = `${today.getHours().toString().padStart(2, '0')}${today\r\n    .getMinutes()\r\n    .toString()\r\n    .padStart(2, '0')}`\r\n\r\n  example = example\r\n    .replace(/{产品名}/g, productName)\r\n    .replace(/{序号}/g, '001')\r\n    .replace(/{日期}/g, dateStr)\r\n    .replace(/{时间}/g, timeStr)\r\n\r\n  return example\r\n}\r\n\r\n// 插入命名变量\r\nconst insertNamingVariable = (variable) => {\r\n  formData.customImageName += variable\r\n}\r\nconst currentPlayingVideo = ref(null)\r\n// 处理视频播放\r\nconst handlePlay = (event) => {\r\n  const video = event.target\r\n  if (currentPlayingVideo.value && currentPlayingVideo.value !== video) {\r\n    currentPlayingVideo.value.pause()\r\n  }\r\n  currentPlayingVideo.value = video\r\n}\r\nconst pauseAllVideos = () => {\r\n  const videos = document.querySelectorAll('video')\r\n  videos.forEach((video) => {\r\n    if (!video.paused) {\r\n      video.pause()\r\n    }\r\n  })\r\n}\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  if (submitting.value) return\r\n  formRef.value.validate(async (valid) => {\r\n    if (!valid) {\r\n      ElMessage.error('请完善表单信息')\r\n      return\r\n    }\r\n    // 校验有没有视频剪辑数据或者图片剪辑数据,二者必有其一,否则提示\r\n    if (\r\n      (!formData.selectedVideoIds?.RAW || formData.selectedVideoIds.RAW.length === 0) &&\r\n      (!formData.selectedImageIds?.RAW || formData.selectedImageIds.RAW.length === 0)\r\n    ) {\r\n      ElMessage.error('请至少选择一个视频剪辑素材或图片剪辑素材')\r\n      submitting.value = false\r\n      return\r\n    }\r\n    submitting.value = true\r\n    // 入参赋值\r\n    const submitParams = {\r\n      product_info: {\r\n        // 产品信息\r\n        product_name: formData.productName, // 产品名称\r\n        product_selling_points: formData.productSellingPoints, // 产品卖点\r\n        benefit_points: formData.productBenefit // 产品利益点\r\n      },\r\n      count: formData.count, // 生成数量\r\n      video_element_ids: formData.selectedVideoIds?.RAW || [], // 视频剪辑素材id\r\n      image_element_ids: formData.selectedImageIds?.RAW || [], // 图片剪辑素材id\r\n      optional_elements: {\r\n        pre_video_element_ids: formData.selectedVideoIds?.PRE_VIDEO || [], // 视频前贴素材id\r\n        post_video_element_ids: formData.selectedVideoIds?.POST_VIDEO || [], // 视频后贴素材id\r\n        // 前景素材id\r\n        foreground_element_id:\r\n          formData.selectedVideoIds?.FOREGROUND?.[0] ||\r\n          formData.selectedImageIds?.FOREGROUND?.[0] ||\r\n          null,\r\n        // 背景素材id\r\n        background_element_id:\r\n          formData.selectedVideoIds?.BACKGROUND?.[0] ||\r\n          formData.selectedImageIds?.BACKGROUND?.[0] ||\r\n          null\r\n      },\r\n      audio_option: {\r\n        bgm_element_id: formData.selectedMusicIds?.BGM || [] // 背景音乐素材id\r\n      },\r\n      auto_save: formData.autoSave, // 是否自动保存\r\n      task_name: formData.customImageName // 任务名\r\n    }\r\n    // console.log('提交参数', submitParams)\r\n    try {\r\n      // 提交逻辑\r\n      const res = await postMixCut(submitParams)\r\n      if (res.code === 0) {\r\n        ElMessage.success('任务创建成功')\r\n        // 而是只获取新创建的任务并添加到列表顶部\r\n        setTimeout(async () => {\r\n          try {\r\n            // 临时设置查询参数为第一页\r\n            const tempParams = { ...taskParams, page: 1, page_size: 10 }\r\n            const newTaskRes = await getTaskList(tempParams)\r\n            if (newTaskRes.code === 0) {\r\n              // 找出新创建的任务\r\n              const newTasks = newTaskRes.data.list.filter((task) => {\r\n                // 检查是否已存在于当前列表中\r\n                return !synthesizedVoices.value.some((existing) => existing.id === task.id)\r\n              })\r\n              // 将新任务添加到列表顶部\r\n              if (newTasks.length > 0) {\r\n                synthesizedVoices.value = [...newTasks, ...synthesizedVoices.value]\r\n                // 更新总数\r\n                total.value = total.value + newTasks.length\r\n              }\r\n              // 检查是否有处理中的任务需要轮询\r\n              const hasProcessing = newTasks.some(\r\n                (voice) =>\r\n                  voice.status === 'waiting' ||\r\n                  (voice.result && voice.result.status === 'PROCESSING')\r\n              )\r\n              if (hasProcessing) {\r\n                setTimeout(() => {\r\n                  pollProcessingTasks()\r\n                }, 3000)\r\n              }\r\n            } else {\r\n              ElMessage.error(newTaskRes.message)\r\n            }\r\n          } catch (error) {\r\n            console.error('获取新任务失败:', error)\r\n          }\r\n        }, 1000)\r\n      } else {\r\n        throw new Error(res.message)\r\n      }\r\n    } catch (error) {\r\n      console.error('创建任务失败:', error)\r\n      ElMessage.error('创建任务失败: ' + (error.response?.data?.error || error.message))\r\n    } finally {\r\n      submitting.value = false\r\n    }\r\n  })\r\n}\r\n// 判断是否有选中的视频\r\nconst hasCheckedVideos = (voice) => {\r\n  // 检查当前任务中是否有被选中的视频\r\n  const selectedVideosInCurrentTask = checkedNames.value.filter((checkedItem) => {\r\n    return voice.result.video_infos.some((videoInfo) => videoInfo.video_id === checkedItem.video_id)\r\n  })\r\n  return selectedVideosInCurrentTask.length > 0\r\n}\r\n// 保存视频\r\nconst handleSave = async (item) => {\r\n  // 只过滤当前item中存在的视频\r\n  const selectedVideos = checkedNames.value\r\n    .filter((checked) =>\r\n      item.result.video_infos.some((video) => video.video_id === checked.video_id)\r\n    )\r\n    .map((checked) => item.result.video_infos.find((video) => video.video_id === checked.video_id))\r\n\r\n  try {\r\n    const res = await postTaskSave({\r\n      task_id: item.task_id,\r\n      video_ids: selectedVideos.map((video) => video.video_id)\r\n    })\r\n    if (res.code === 0) {\r\n      ElMessage.success('保存成功')\r\n      synthesizedVoices.value = synthesizedVoices.value.map((voice) => {\r\n        if (voice.task_id === item.task_id) {\r\n          return { ...voice, status: 'saved' }\r\n        }\r\n        return voice\r\n      })\r\n    } else {\r\n      throw new Error(res.message)\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error('保存失败: ' + error.message)\r\n  }\r\n}\r\nconst resetForm = () => {\r\n  formRef.value.resetFields()\r\n  // 手动清空非表单项的数据\r\n  selectVideoList.value = { RAW: [], PRE_VIDEO: [], POST_VIDEO: [], FOREGROUND: [], BACKGROUND: [] }\r\n  selectImageList.value = { RAW: [], FOREGROUND: [], BACKGROUND: [] }\r\n  selectMusicList.value = { BGM: [] }\r\n  formData.selectedVideoIds = {}\r\n  formData.selectedVideoNames = []\r\n  formData.selectedImageIds = {}\r\n  formData.selectedImageNames = []\r\n  formData.selectedMusicIds = []\r\n  formData.selectedMusicNames = []\r\n}\r\n// 在组件卸载时清除轮询\r\nonUnmounted(() => {\r\n  if (pollTimeout) {\r\n    clearTimeout(pollTimeout)\r\n    pollTimeout = null\r\n  }\r\n})\r\nconst updateProductInfo = async () => {\r\n  if (!formData.productName) return\r\n\r\n  try {\r\n    const res = await getProductInfo({ product_name: formData.productName })\r\n    if (res.code === 0 && res.data) {\r\n      // 更新选项，但不覆盖用户已输入的值\r\n      const sellingPoints = res.data.product_selling_points || []\r\n      const benefitPoints = res.data.benefit_points || []\r\n\r\n      // 合并现有选项和新选项，去重\r\n      productSellingPointsList.value = [\r\n        ...new Set([...formData.productSellingPoints, ...sellingPoints])\r\n      ]\r\n\r\n      productBenefitList.value = [...new Set([...formData.productBenefit, ...benefitPoints])]\r\n    }\r\n  } catch (error) {\r\n    console.error('获取产品信息失败:', error)\r\n  }\r\n}\r\nconst debounce = (fn, delay = 300) => {\r\n  let timeoutId\r\n  return (...args) => {\r\n    clearTimeout(timeoutId)\r\n    timeoutId = setTimeout(() => fn.apply(this, args), delay)\r\n  }\r\n}\r\n// 添加watch监听productName的变化\r\nwatch(\r\n  () => formData.productName,\r\n  debounce((newVal) => {\r\n    if (newVal) {\r\n      updateProductInfo()\r\n    }\r\n  }, 300)\r\n)\r\n// 监听 卖点 的变化\r\nwatch(\r\n  () => formData.productSellingPoints,\r\n  (newValue) => {\r\n    console.log('productSellingPointsList', newValue)\r\n    // 将新创建的选项添加到 productBenefitList 中\r\n    newValue.forEach((item) => {\r\n      if (!productSellingPointsList.value.includes(item)) {\r\n        productSellingPointsList.value.push(item)\r\n      }\r\n    })\r\n  }\r\n)\r\n// 监听 利益点 的变化\r\nwatch(\r\n  () => formData.productBenefit,\r\n  (newValue) => {\r\n    // 将新创建的选项添加到 productBenefitList 中\r\n    newValue.forEach((item) => {\r\n      if (!productBenefitList.value.includes(item)) {\r\n        productBenefitList.value.push(item)\r\n      }\r\n    })\r\n  }\r\n)\r\n// 监听 count 的变化\r\nwatch(\r\n  () => formData.count,\r\n  (newCount) => {\r\n    // 遍历每种类型的视频\r\n    for (const [videoType, ids] of Object.entries(formData.selectedVideoIds)) {\r\n      if ((videoType == 'PRE_VIDEO' || videoType == 'POST_VIDEO') && ids.length > newCount) {\r\n        const shuffled = [...ids].sort(() => Math.random() - 0.5)\r\n        formData.selectedVideoIds[videoType] = shuffled.slice(0, newCount)\r\n        // 同步更新 selectVideoList\r\n        if (selectVideoList.value[videoType]) {\r\n          selectVideoList.value[videoType] = selectVideoList.value[videoType].filter((video) =>\r\n            formData.selectedVideoIds[videoType].includes(video.element_id)\r\n          )\r\n        }\r\n        // 更新 selectedVideoNames\r\n        formData.selectedVideoNames = Object.values(selectVideoList.value)\r\n          .flat()\r\n          .map((item) => item.element_name)\r\n      }\r\n    }\r\n  }\r\n)\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.create-task-container {\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  font-size: 14px;\r\n  .two-column-layout {\r\n    display: flex;\r\n    flex: 1;\r\n    overflow: hidden;\r\n    margin-top: 5px;\r\n    /* 左侧配置区域 */\r\n    .left-config-area {\r\n      width: 35%;\r\n      min-width: 380px;\r\n      max-width: 420px;\r\n      padding: 0 12px 12px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n      height: 100%;\r\n      position: relative;\r\n      .left-content-wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        background: white;\r\n        border-radius: 12px;\r\n        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.05);\r\n        overflow: hidden;\r\n        position: relative;\r\n        margin-bottom: 45px;\r\n      }\r\n    }\r\n  }\r\n}\r\n.cards-container {\r\n  background: transparent;\r\n  box-shadow: none;\r\n  overflow-y: auto;\r\n  flex: 1;\r\n  padding: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.cards-container::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n.cards-container::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n  border-radius: 3px;\r\n}\r\n.cards-container::-webkit-scrollbar-thumb {\r\n  background: #cccccc;\r\n  border-radius: 3px;\r\n}\r\n.cards-container::-webkit-scrollbar-thumb:hover {\r\n  background: #aaaaaa;\r\n}\r\n/* 添加新的参数配置卡片样式 */\r\n.config-card {\r\n  margin-bottom: 8px;\r\n  overflow: visible;\r\n  border-radius: 8px;\r\n  border: 1px solid #eaedf5;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);\r\n  display: flex;\r\n  flex-direction: column;\r\n  .card-content {\r\n    padding: 15px;\r\n    background: white;\r\n    border-radius: 0 0 8px 8px;\r\n    margin-top: 1px;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\r\n    overflow: visible;\r\n  }\r\n  .card-header {\r\n    padding: 15px 20px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    background: linear-gradient(\r\n      135deg,\r\n      rgba(128, 135, 255, 0.15),\r\n      rgba(116, 189, 255, 0.15),\r\n      rgba(124, 239, 203, 0.15)\r\n    );\r\n    border-radius: 8px;\r\n    transition: background-color 0.2s;\r\n    z-index: 1;\r\n    &:hover {\r\n      background: linear-gradient(\r\n        135deg,\r\n        rgba(128, 135, 255, 0.2),\r\n        rgba(116, 189, 255, 0.2),\r\n        rgba(124, 239, 203, 0.2)\r\n      );\r\n    }\r\n  }\r\n}\r\n/* 右侧预览区域 */\r\n.right-preview-area {\r\n  flex: 1.2;\r\n  background: white;\r\n  margin: 0 0 0 4px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 3px 12px rgba(0, 0, 0, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .preview-header {\r\n    padding: 15px 20px;\r\n    border-bottom: 1px solid #eaedf5;\r\n\r\n    .title-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      .refresh-icon {\r\n        margin-left: 10px;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n        color: #909399;\r\n        transition: all 0.3s;\r\n\r\n        &:hover {\r\n          color: #409eff;\r\n          transform: rotate(180deg);\r\n        }\r\n      }\r\n    }\r\n    .preview-title {\r\n      font-size: 16px;\r\n      font-weight: 600;\r\n      color: var(--text-primary);\r\n      padding-bottom: 20px;\r\n      margin-bottom: 20px;\r\n      border-bottom: 1px solid #eaedf5;\r\n      width: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    .search_container {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding-bottom: 20px;\r\n    }\r\n    .preview-status {\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      color: var(--text-primary);\r\n      margin: 20px 20px 0 0;\r\n      width: 100%;\r\n    }\r\n    .tag_status {\r\n      margin: 0 10px;\r\n      padding: 10px 10px;\r\n      border-radius: 10px;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n.task-header {\r\n  padding: 16px 20px;\r\n  border-radius: 5px;\r\n  background: linear-gradient(\r\n    135deg,\r\n    rgba(128, 135, 255, 0.15),\r\n    rgba(116, 189, 255, 0.15),\r\n    rgba(124, 239, 203, 0.15)\r\n  );\r\n  border-bottom: 1px solid var(--border-light);\r\n}\r\n.task-header h2 {\r\n  font-size: 22px;\r\n  color: var(--text-primary);\r\n  margin: 0;\r\n  font-weight: 600;\r\n}\r\n.preview-content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n}\r\n.task-group {\r\n  background-color: var(--bg-tertiary);\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #eaedf5;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\r\n  transition: all 0.3s ease;\r\n}\r\n.task-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.task-name {\r\n  display: flex;\r\n  align-items: center;\r\n  .task-index {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 24px;\r\n    height: 24px;\r\n    background: linear-gradient(135deg, #8087ff, #74bdff);\r\n    color: white;\r\n    border-radius: 50%;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    margin-right: 10px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  }\r\n  .task_status {\r\n    margin-left: 10px;\r\n  }\r\n}\r\n.task-list-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-top: 10px;\r\n  padding: 24px 20px;\r\n  max-height: calc(100vh - 300px); /* 设置最大高度 */\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n    border-radius: 3px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #cccccc;\r\n    border-radius: 3px;\r\n  }\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #aaaaaa;\r\n  }\r\n}\r\n.el-checkbox-group {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n  gap: 20px;\r\n  padding: 15px;\r\n  max-height: 600px; /* 设置最大高度 */\r\n  overflow-y: auto; /* 添加垂直滚动条 */\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #cccccc;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #aaaaaa;\r\n  }\r\n}\r\n.image-item {\r\n  width: 200px;\r\n  height: 400px;\r\n  flex: 0 0 200px;\r\n  position: relative;\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  background: #fff;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  }\r\n  :deep(.el-checkbox__label) {\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  :deep(.el-checkbox__input) {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    margin-right: 0;\r\n    z-index: 2;\r\n    .el-checkbox__inner {\r\n      background-color: transparent;\r\n      border-color: #dcdfe6;\r\n      width: 20px;\r\n      height: 20px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n\r\n      &::after {\r\n        position: static;\r\n        top: unset;\r\n        left: unset;\r\n        transform: none;\r\n        margin: 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: 8px;\r\n        width: 4px;\r\n      }\r\n      &:hover {\r\n        border-color: #409eff;\r\n        background-color: rgba(255, 255, 255, 0.9);\r\n      }\r\n    }\r\n    &.is-checked .el-checkbox__inner {\r\n      background-color: #409eff;\r\n      border-color: #409eff;\r\n      &::after {\r\n        transform: rotate(45deg) scaleY(1);\r\n      }\r\n    }\r\n  }\r\n  .preview {\r\n    width: 200px;\r\n    height: 352px;\r\n    background-color: #f5f5f5;\r\n  }\r\n  .info {\r\n    width: 200px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    // background-color: #f5f5f5;\r\n    box-sizing: border-box;\r\n    .video-name {\r\n      word-break: break-all;\r\n      white-space: nowrap;\r\n      font-size: 14px;\r\n      line-height: 1.5;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      transition: color 0.3s ease;\r\n      cursor: pointer;\r\n      &:hover {\r\n        color: #409eff; // 悬停时变色\r\n      }\r\n    }\r\n  }\r\n}\r\n.padding-status {\r\n  padding: 20px;\r\n  text-align: center;\r\n  .padding-content {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding: 12px 24px;\r\n    background: #f5f7ff;\r\n    border-radius: 8px;\r\n    border: 1px solid #e6e9ff;\r\n    box-shadow: 0 2px 8px rgba(64, 158, 255, 0.1);\r\n\r\n    .padding-icon {\r\n      color: #409eff;\r\n      font-size: 20px;\r\n      margin-right: 12px;\r\n      animation: rotating 2s linear infinite;\r\n    }\r\n\r\n    .padding-text {\r\n      color: #409eff;\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n}\r\n@keyframes rotating {\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n.failed-status {\r\n  padding: 20px;\r\n  text-align: center;\r\n  .failed-content {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding: 12px 24px;\r\n    background: #fff6f6;\r\n    border-radius: 8px;\r\n    border: 1px solid #ffebee;\r\n    box-shadow: 0 2px 8px rgba(245, 108, 108, 0.1);\r\n    .failed-icon {\r\n      color: #f56c6c;\r\n      font-size: 20px;\r\n      margin-right: 12px;\r\n    }\r\n    .failed-text {\r\n      color: #f56c6c;\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n}\r\n// .image-item:hover {\r\n//   box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n// }\r\n\r\n// .preview {\r\n//   width: 100%;\r\n//   aspect-ratio: 16/9;\r\n//   object-fit: cover;\r\n// }\r\n\r\n// .info {\r\n//   padding: 12px;\r\n// }\r\n\r\n// .name {\r\n//   font-weight: 500;\r\n//   margin-bottom: 8px;\r\n// }\r\n\r\n/* 表单样式 */\r\n.naming-rule-selector {\r\n  margin-top: 8px;\r\n  width: 100%;\r\n}\r\n.naming-variables {\r\n  margin-top: 12px;\r\n}\r\n.variables-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n  margin-top: 8px;\r\n}\r\n.variable-tag {\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n.variable-tag:hover {\r\n  background: #409eff;\r\n  color: white;\r\n}\r\n.naming-rule-hint {\r\n  margin-top: 12px;\r\n}\r\n/* 按钮样式 */\r\n.card-actions {\r\n  display: flex;\r\n  gap: 12px;\r\n  margin-top: 20px;\r\n  padding-top: 20px;\r\n  border-top: 1px solid #eee;\r\n}\r\n.create-task-btn {\r\n  flex: 1;\r\n  background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n  border: none;\r\n  color: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  transition: all 0.3s;\r\n}\r\n.create-task-btn:hover {\r\n  box-shadow: 0 6px 12px rgba(77, 124, 255, 0.4);\r\n  transform: translateY(-2px);\r\n}\r\n.create-task-btn:disabled {\r\n  background: #a0cfff;\r\n  cursor: not-allowed;\r\n}\r\n.btn-icon {\r\n  margin-right: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.btn-text {\r\n  font-size: 16px;\r\n}\r\n.reset-btn {\r\n  padding: 10px 20px;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  background: white;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n.reset-btn:hover {\r\n  border-color: #409eff;\r\n  color: #409eff;\r\n}\r\n/* 视频选择样式 */\r\n.image-upload-wrapper {\r\n  display: flex;\r\n  gap: 8px;\r\n  width: 100%;\r\n}\r\n.watermark-uploader {\r\n  flex: 1;\r\n  cursor: pointer;\r\n}\r\n.upload-box {\r\n  width: 100%;\r\n  height: 40px;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  transition: border-color 0.2s;\r\n  background: white;\r\n  overflow: hidden;\r\n}\r\n.upload-placeholder {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  color: #909399;\r\n}\r\n.selected-name {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 300px; /* 设置最大宽度 */\r\n  display: inline-block;\r\n}\r\n.task-content {\r\n  position: relative;\r\n  padding-bottom: 50px; /* 为保存按钮留出空间 */\r\n}\r\n.save-btn-wrapper {\r\n  position: absolute;\r\n  bottom: 15px;\r\n  right: 15px;\r\n  z-index: 1;\r\n}\r\n.save-btn {\r\n  min-width: 80px;\r\n  font-size: 14px;\r\n  background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n  border: none;\r\n}\r\n/* 加载状态容器 */\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 200px;\r\n  width: 100%;\r\n}\r\n/* 底部加载更多 */\r\n.bottom-loading {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 20px 0;\r\n  background: transparent;\r\n}\r\n/* 加载图标 */\r\n.loading-icon {\r\n  font-size: 20px;\r\n  color: #409eff;\r\n  animation: rotate 1.5s linear infinite;\r\n}\r\n/* 加载文本 */\r\n.loading-text {\r\n  margin-left: 8px;\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n/* 无更多数据 */\r\n.no-more {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 20px 0;\r\n  .no-more-text {\r\n    font-size: 14px;\r\n    color: #909399;\r\n  }\r\n}\r\n/* 旋转动画 */\r\n@keyframes rotate {\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n.selected-tag {\r\n  background-color: #409eff; // 选中时的背景色\r\n  color: white; // 选中时的文字颜色\r\n}\r\n.search-box {\r\n  margin-top: 20px;\r\n  width: 250px;\r\n  :deep(.el-input__wrapper) {\r\n    border-radius: 20px;\r\n    background-color: #f5f7fa;\r\n    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n  :deep(.el-input__inner) {\r\n    background-color: transparent;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"template-library-container\">\r\n    <div class=\"resource-layout\">\r\n      <div class=\"right-panel\">\r\n        <!-- 标签切换 -->\r\n        <div class=\"tab-switch\">\r\n          <el-tabs v-model=\"activeTab\" @tab-click=\"handleTabClick\" type=\"card\">\r\n            <el-tab-pane label=\"视频原料\" name=\"VIDEO\"></el-tab-pane>\r\n            <el-tab-pane label=\"图片原料\" name=\"IMAGE\"></el-tab-pane>\r\n            <el-tab-pane label=\"音频原料\" name=\"MUSIC\"></el-tab-pane>\r\n          </el-tabs>\r\n        </div>\r\n\r\n        <!-- 搜索框 -->\r\n        <div class=\"search-box\">\r\n          <div class=\"search-btn\" v-if=\"activeTab !== 'MUSIC'\">\r\n            <label class=\"select-label\">筛选原料用途:</label>\r\n            <el-select\r\n              v-model=\"filterOption\"\r\n              placeholder=\"选择原料用途\"\r\n              class=\"select-box\"\r\n              @change=\"handleFilterChange\"\r\n              clearable\r\n            >\r\n              <el-option\r\n                v-for=\"option in selectOptions\"\r\n                :key=\"option.value\"\r\n                :label=\"option.label\"\r\n                :value=\"option.value\"\r\n              ></el-option>\r\n            </el-select>\r\n          </div>\r\n          <el-input\r\n            class=\"custom-search-input\"\r\n            v-model=\"searchKey\"\r\n            placeholder=\"搜索关键字...\"\r\n            clearable\r\n            size=\"large\"\r\n            @clear=\"handleSearch\"\r\n            @keyup.enter=\"handleSearch\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Search /></el-icon>\r\n            </template>\r\n          </el-input>\r\n        </div>\r\n        <!-- 文件路径 -->\r\n        <BreadcrumbPath :path=\"currentPath\" @path-click=\"handlePathClick\" />\r\n        <!-- 模板列表 -->\r\n        <div class=\"materials-display\" v-loading=\"loading\">\r\n          <div>\r\n            <div v-if=\"activeTab !== 'MUSIC'\" class=\"template-grid\">\r\n              <div\r\n                v-for=\"(template, index) in filteredTemplates\"\r\n                :key=\"index\"\r\n                class=\"template-item\"\r\n              >\r\n                <template v-if=\"template.element_type === 'FOLDER' && activeTab !== 'MUSIC'\">\r\n                  <div class=\"template-content folder-content\" @click=\"handleFolderClick(template)\">\r\n                    <el-icon :size=\"60\"><Folder /></el-icon>\r\n                    <div class=\"template-name\" :title=\"template.element_name || '未命名文件夹'\">\r\n                      {{ template.element_name || '未命名文件夹' }}\r\n                    </div>\r\n                  </div>\r\n                </template>\r\n                <!-- 视频显示 -->\r\n                <template v-else>\r\n                  <div class=\"template-image-container\">\r\n                    <video\r\n                      v-if=\"template.element_type === 'VIDEO'\"\r\n                      :src=\"template.element_url\"\r\n                      class=\"preview\"\r\n                      controls\r\n                      preload=\"metadata\"\r\n                      @play=\"handlePlay\"\r\n                    ></video>\r\n                    <img\r\n                      v-if=\"template.element_type === 'IMAGE'\"\r\n                      :src=\"template.element_url\"\r\n                      class=\"preview-image\"\r\n                      :alt=\"template.element_name || '未命名文件'\"\r\n                    />\r\n                    <div class=\"info\">\r\n                      <div class=\"template-name\" :title=\"template.element_name\">\r\n                        {{ template.element_name || '未命名文件' }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </template>\r\n              </div>\r\n            </div>\r\n            <div v-else-if=\"activeTab === 'MUSIC'\">\r\n              <LibraryMusicList\r\n                ref=\"libraryRef\"\r\n                :data-list=\"filteredTemplates\"\r\n                :showSelection=\"false\"\r\n                @folder-click=\"handleFolderClick\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <!-- 空状态 -->\r\n          <div v-if=\"filteredTemplates.length === 0 && activeTab !== 'MUSIC'\" class=\"empty-state\">\r\n            <el-empty description=\"暂无模板\"></el-empty>\r\n          </div>\r\n        </div>\r\n        <!-- 分页控件 -->\r\n        <div class=\"pagination-container\" v-if=\"filteredTemplates.length > 0\">\r\n          <div class=\"pagination-inner\">\r\n            <el-pagination\r\n              v-model:current-page=\"pagination.currentPage\"\r\n              v-model:page-size=\"pagination.pageSize\"\r\n              :page-sizes=\"[10, 20, 50]\"\r\n              layout=\"total, sizes, prev, pager, next, jumper\"\r\n              :total=\"pagination.total\"\r\n              @size-change=\"handleSizeChange\"\r\n              @current-change=\"handlePageChange\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { ref, computed, onMounted, reactive } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Search, Edit, Delete, Folder } from '@element-plus/icons-vue'\r\nimport { getElementList } from '@/service/jingDong'\r\nonMounted(() => {\r\n  handleGetElementList()\r\n})\r\n// 核心状态变量\r\nconst loading = ref(false)\r\nconst searchKey = ref('')\r\nconst filterOption = ref('')\r\nconst activeTab = ref('VIDEO') // 默认选中第一个标签\r\nconst currentPath = ref('/')\r\nconst selectOptions = computed(() => {\r\n  if (activeTab.value === 'VIDEO') {\r\n    return [\r\n      { label: '剪辑素材', value: 'RAW' },\r\n      { label: '前贴', value: 'PRE_VIDEO' },\r\n      { label: '后贴', value: 'POST_VIDEO' },\r\n      { label: '前景', value: 'FOREGROUND' },\r\n      { label: '背景', value: 'BACKGROUND' }\r\n    ]\r\n  } else if (activeTab.value === 'IMAGE') {\r\n    return [\r\n      { label: '剪辑素材', value: 'RAW' },\r\n      { label: '前景', value: 'FOREGROUND' },\r\n      { label: '背景', value: 'BACKGROUND' }\r\n    ]\r\n  }\r\n  return []\r\n})\r\nconst handlePathClick = async (path) => {\r\n  currentPath.value = path\r\n  params.path_name = path\r\n  // 重新获取数据\r\n  await handleGetElementList()\r\n}\r\n// 处理标签点击事件\r\nconst handleTabClick = (tab) => {\r\n  // console.log('当前选中的标签:', tab.name)\r\n  // 可以在这里根据选中的标签执行相应的逻辑\r\n  pagination.currentPage = 1 // 重置到第一页\r\n  params.page = 1 // 重置到第一页\r\n  handleGetElementList()\r\n}\r\n// 处理文件夹点击\r\nconst handleFolderClick = async (folder) => {\r\n  // console.log('点击了文件夹:', folder)\r\n  // 拼接新路径\r\n  const newPath =\r\n    params.path_name === '/'\r\n      ? '/' + folder.element_name\r\n      : `${params.path_name}/${folder.element_name}`\r\n  params.path_name = newPath\r\n  currentPath.value = newPath\r\n  await handleGetElementList()\r\n}\r\n// 过滤后的模板列表\r\nconst filteredTemplates = ref([])\r\n// 添加分页相关参数\r\nconst pagination = reactive({\r\n  pageSize: 10,\r\n  currentPage: 1,\r\n  total: 0\r\n})\r\n//筛选原料用途\r\nconst handleFilterChange = async (value) => {\r\n  if (value) {\r\n    params.use_as = value\r\n  } else {\r\n    delete params.use_as\r\n  }\r\n  params.page = 1\r\n  await handleGetElementList()\r\n}\r\n// 处理对话框内分页大小变化\r\nconst handleSizeChange = (size) => {\r\n  pagination.pageSize = size\r\n  pagination.currentPage = 1 // 重置到第一页\r\n  params.page_size = size\r\n  params.page = 1 // 重置到第一页\r\n  // 在分页大小变化后，初始化新页面的图片\r\n  setTimeout(() => {\r\n    handleGetElementList()\r\n  }, 50)\r\n}\r\n// 页码变更 - 纯前端分页\r\nconst handlePageChange = (page) => {\r\n  params.page = page\r\n  pagination.currentPage = page\r\n  handleGetElementList()\r\n}\r\n// 获取模板列表\r\nconst params = reactive({\r\n  page: 1,\r\n  page_size: 10,\r\n  element_type: 'VIDEO',\r\n  path_name: '/'\r\n})\r\n// 获取模板列表\r\nconst handleGetElementList = async () => {\r\n  loading.value = true // 添加加载状态\r\n  // console.log('params', params)\r\n  try {\r\n    // 先获取文件夹数据\r\n    const folderRes = await getElementList({\r\n      ...params,\r\n      element_type: 'FOLDER'\r\n    })\r\n\r\n    // 再获取视频数据\r\n    const videoRes = await getElementList({\r\n      ...params,\r\n      element_type: activeTab.value\r\n    })\r\n    if (folderRes.code === 0 && videoRes.code === 0) {\r\n      // 合并文件夹和视频数据，文件夹在前\r\n      const folders = (folderRes.data.elements || []).map((item) => ({\r\n        ...item,\r\n        isFolder: true // 添加标识，用于区分文件夹和视频\r\n      }))\r\n      const videos = videoRes.data.elements || []\r\n\r\n      filteredTemplates.value = [...folders, ...videos]\r\n      pagination.total = videoRes.data.page_info.total_number\r\n    } else {\r\n      throw new Error(res.message)\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error('获取模板列表失败')\r\n  } finally {\r\n    loading.value = false // 无论成功失败都关闭加载状态\r\n  }\r\n}\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  if (searchKey.value == '') {\r\n    if ('element_name' in params) {\r\n      delete params.element_name\r\n      handleGetElementList()\r\n    }\r\n  } else {\r\n    params.element_name = searchKey.value\r\n    handleGetElementList()\r\n  }\r\n}\r\nconst currentPlayingVideo = ref(null)\r\n// 处理视频播放\r\nconst handlePlay = (event) => {\r\n  const video = event.target\r\n  if (currentPlayingVideo.value && currentPlayingVideo.value !== video) {\r\n    currentPlayingVideo.value.pause()\r\n  }\r\n  currentPlayingVideo.value = video\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.template-library-container {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.resource-layout {\r\n  height: 100%;\r\n  display: flex;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.right-panel {\r\n  flex: 1;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  gap: 20px;\r\n  position: relative; // 添加这行\r\n}\r\n\r\n.tab-switch {\r\n  margin-bottom: -20px; // 标签切换与搜索框之间的间距\r\n  :deep(.el-tabs--card > .el-tabs__header) {\r\n    // border-bottom: none;\r\n  }\r\n  :deep(.el-tabs--card > .el-tabs__header .el-tabs__item) {\r\n    border-bottom: none; // 去掉下划线\r\n  }\r\n  :deep(.el-tabs--card > .el-tabs__header .el-tabs__item.is-active) {\r\n    background: linear-gradient(135deg, var(--primary-purple), var(--primary-blue));\r\n    color: #fff;\r\n    border-radius: 5px; // 添加圆角\r\n  }\r\n}\r\n\r\n.material-title {\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  margin: 0;\r\n}\r\n\r\n.keyword-search {\r\n  width: 100%;\r\n}\r\n\r\n.template-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n  gap: 20px;\r\n  padding: 15px;\r\n  padding-bottom: 30px; // 增加底部内边距\r\n}\r\n\r\n.template-item {\r\n  width: 200px;\r\n  height: 400px;\r\n  flex: 0 0 200px;\r\n  position: relative;\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  background: #fff;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  }\r\n  :deep(.el-checkbox__label) {\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  :deep(.el-checkbox__input) {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    margin-right: 0;\r\n    z-index: 2;\r\n    .el-checkbox__inner {\r\n      background-color: transparent;\r\n      border-color: #dcdfe6;\r\n      width: 20px;\r\n      height: 20px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n\r\n      &::after {\r\n        position: static;\r\n        top: unset;\r\n        left: unset;\r\n        transform: none;\r\n        margin: 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: 8px;\r\n        width: 4px;\r\n      }\r\n      &:hover {\r\n        border-color: #409eff;\r\n        background-color: rgba(255, 255, 255, 0.9);\r\n      }\r\n    }\r\n    &.is-checked .el-checkbox__inner {\r\n      background-color: #409eff;\r\n      border-color: #409eff;\r\n      &::after {\r\n        transform: rotate(45deg) scaleY(1);\r\n      }\r\n    }\r\n  }\r\n  .preview {\r\n    width: 200px;\r\n    height: 352px;\r\n    background-color: #f5f5f5;\r\n  }\r\n  .preview-image {\r\n    object-fit: cover;\r\n  }\r\n  .info {\r\n    width: 200px;\r\n    // margin-bottom: 10px;\r\n    box-sizing: border-box;\r\n    .video-name {\r\n      word-break: break-all;\r\n      white-space: nowrap;\r\n      font-size: 14px;\r\n      line-height: 1.5;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      transition: color 0.3s ease;\r\n      cursor: pointer;\r\n      background-color: #fff;\r\n      &:hover {\r\n        color: #409eff; // 悬停时变色\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.template-image-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; // 垂直居中\r\n  align-items: center; // 水平居中\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #e2e4e6c2;\r\n}\r\n.preview {\r\n  height: 100%;\r\n  max-height: 352px;\r\n  object-fit: cover;\r\n  aspect-ratio: 1/2;\r\n}\r\n.preview-image {\r\n  object-fit: cover;\r\n}\r\n.template-image {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.template-actions {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  gap: 10px;\r\n  opacity: 0;\r\n  transition: opacity 0.3s;\r\n}\r\n\r\n.template-info {\r\n  padding: 12px;\r\n}\r\n\r\n.template-name {\r\n  padding: 5px 12px;\r\n  min-height: 48px;\r\n  font-size: 14px;\r\n  color: #606266;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  background-color: #fff;\r\n  border-top: 1px solid #f0f0f0;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  cursor: pointer; // 添加指针样式提示可悬停\r\n\r\n  &:hover {\r\n    color: #409eff; // 悬停时变色\r\n  }\r\n\r\n  &[title] {\r\n    position: relative;\r\n\r\n    &:hover::after {\r\n      content: attr(title);\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      top: 100%; // 改为 top: 100% 使提示框显示在下方\r\n      margin-top: 5px; // 添加上边距，与元素保持一定距离\r\n      padding: 5px 10px;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      color: white;\r\n      border-radius: 4px;\r\n      font-size: 12px;\r\n      white-space: nowrap;\r\n      z-index: 10;\r\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15); // 添加阴影效果\r\n    }\r\n  }\r\n}\r\n\r\n.template-content {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .preview {\r\n    // width: 100%;\r\n    height: 352px;\r\n    object-fit: cover;\r\n  }\r\n\r\n  .template-name {\r\n    padding: 24px 12px;\r\n    min-height: 48px;\r\n    font-size: 14px;\r\n    color: #606266;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    border-top: 1px solid #f0f0f0;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    cursor: pointer; // 添加指针样式提示可悬停\r\n\r\n    &:hover {\r\n      color: #409eff; // 悬停时变色\r\n    }\r\n\r\n    &[title] {\r\n      position: relative;\r\n\r\n      &:hover::after {\r\n        content: attr(title);\r\n        position: absolute;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        bottom: 100%;\r\n        padding: 5px 10px;\r\n        background: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        border-radius: 4px;\r\n        font-size: 12px;\r\n        white-space: nowrap;\r\n        z-index: 10;\r\n      }\r\n    }\r\n  }\r\n}\r\n.folder-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  cursor: pointer;\r\n  color: #606266;\r\n  background: #f7f8fa;\r\n  border-radius: 8px;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: #409eff;\r\n    background: #f0f7ff;\r\n  }\r\n\r\n  .el-icon {\r\n    font-size: 40px;\r\n    margin-top: auto; // 将图标推到顶部\r\n    margin-bottom: auto; // 图标与底部文字保持距离\r\n    color: #409eff;\r\n  }\r\n\r\n  .template-name {\r\n    text-align: center;\r\n    padding: 24px 12px; // 与视频项保持一致的内边距\r\n    min-height: 48px; // 与视频项保持一致的最小高度\r\n    font-size: 14px;\r\n    color: inherit;\r\n    background-color: #fff; // 与视频项保持一致的背景色\r\n    border-top: 1px solid #f0f0f0; // 与视频项保持一致的边框\r\n    width: 100%;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    &:hover {\r\n      color: #409eff;\r\n    }\r\n\r\n    &[title]:hover::after {\r\n      content: attr(title);\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      bottom: 100%;\r\n      padding: 5px 10px;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      color: white;\r\n      border-radius: 4px;\r\n      font-size: 12px;\r\n      white-space: nowrap;\r\n      z-index: 10;\r\n    }\r\n  }\r\n}\r\n.materials-display {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-bottom: 20px; // 增加底部间距，为分页器留出空间\r\n  /* 添加滚动条样式 */\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #c0c4cc;\r\n    border-radius: 3px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background-color: #f5f7fa;\r\n  }\r\n}\r\n.pagination-container {\r\n  margin-top: auto; // 添加这行\r\n  padding: 10px 0;\r\n  background-color: #fff;\r\n  position: sticky; // 添加这行\r\n  bottom: 0; // 添加这行\r\n  z-index: 1; // 添加这行\r\n}\r\n.pagination-inner {\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n:deep(.el-pagination) {\r\n  justify-content: center;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-weight: normal;\r\n}\r\n:deep(.el-pagination .el-select .el-input) {\r\n  width: 100px;\r\n}\r\n.empty-state {\r\n  padding: 40px 0;\r\n  text-align: center;\r\n}\r\n.search-box {\r\n  padding: 0 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 30px;\r\n  :deep(.el-input__wrapper) {\r\n    border-radius: 20px;\r\n    background-color: #f5f7fa;\r\n    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n  :deep(.el-input__inner) {\r\n    background-color: transparent;\r\n  }\r\n  .custom-search-input {\r\n    width: 300px;\r\n  }\r\n}\r\n.search-btn {\r\n  width: 300px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2px;\r\n}\r\n.select-label {\r\n  font-size: 14px;\r\n  color: #606266;\r\n  width: 200px;\r\n  font-weight: 600;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"image-ai-generator-container\">\r\n    <!-- 顶部导航栏 -->\r\n    <div class=\"tabs-scroll-container\">\r\n      <div class=\"custom-tabs\">\r\n        <!-- 遍历所有主菜单项 -->\r\n        <div v-for=\"(item, index) in TABS\" :key=\"index\" class=\"tab-item-container\">\r\n          <div \r\n            :class=\"['tab-item', { 'active': activeTab === item.value }]\"\r\n            @click=\"handleTabClick(item.value)\"\r\n          >\r\n            {{ item.label }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 内容区域 -->\r\n    <keep-alive>\r\n      <CreateTask v-if=\"activeTab === 'createTask'\" />\r\n    </keep-alive>\r\n    <TemplateLibrary v-if=\"activeTab === 'templateLibrary'\" />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { TABS } from '@/constants/JingDongAIGeneratorMessage'\r\nimport CreateTask from './components/CreateTask.vue'\r\nimport TemplateLibrary from './components/TemplateLibrary.vue'\r\n\r\n// 激活的标签页\r\nconst activeTab = ref('createTask')\r\n\r\n// 处理标签点击\r\nconst handleTabClick = (value) => {\r\n  activeTab.value = value\r\n}\r\n\r\nonMounted(() => {\r\n  // 初始化逻辑\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.image-ai-generator-container {\r\n  width: 100%;\r\n  padding: 10px;\r\n  height: 100%;\r\n  background-color: #f9f9fb;\r\n}\r\n\r\n/* 滚动容器样式 */\r\n.tabs-scroll-container {\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n  margin-bottom: 5px;\r\n  padding: 8px;\r\n}\r\n\r\n/* 自定义标签栏 */\r\n.custom-tabs {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.tab-item-container {\r\n  position: relative;\r\n}\r\n\r\n.tab-item {\r\n  min-width: 120px;\r\n  height: 40px;\r\n  font-size: 14px;\r\n  color: var(--text-light);\r\n  padding: 0 16px;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tab-item:hover:not(.active) {\r\n  color: var(--primary-purple);\r\n  background-color: var(--primary-purple-light);\r\n}\r\n\r\n.tab-item.active {\r\n  color: white;\r\n  font-weight: 500;\r\n  background: linear-gradient(135deg, rgba(144, 150, 255, 1), rgba(133, 200, 255, 1));\r\n  box-shadow: 0 4px 8px rgba(128, 135, 255, 0.25);\r\n}\r\n\r\n/* 隐藏滚动条（可选） */\r\n.tabs-scroll-container::-webkit-scrollbar {\r\n  height: 6px;\r\n}\r\n\r\n.tabs-scroll-container::-webkit-scrollbar-thumb {\r\n  background: #c1c1c1;\r\n  border-radius: 3px;\r\n}\r\n</style> "],"names":["breadcrumbKey","breadcrumbProps","buildProps","iconPropType","__default__","defineComponent","_sfc_main","__props","props","t","useLocale","ns","useNamespace","breadcrumb","ref","provide","onMounted","items","_ctx","_cache","openBlock","createElementBlock","normalizeClass","unref","renderSlot","Breadcrumb","_export_sfc","breadcrumbItemProps","definePropType","instance","getCurrentInstance","breadcrumbContext","inject","router","link","onClick","_a","_b","createElementVNode","createBlock","ElIcon","withCtx","resolveDynamicComponent","toDisplayString","BreadcrumbItem","ElBreadcrumb","withInstall","ElBreadcrumbItem","withNoopInstall","TABS","emit","__emit","selectedTemplates","selectedTemplateIds","filteredTemplates","computed","isTemplateDisabled","template","item","clearSelection","updateSelectedTemplates","id","currentPlayingVideo","handlePlay","event","video","setSelectedTemplates","templates","handleSelectionChange","value","currentIds","debounce","fn","delay","timer","args","isLoading","handleScroll","e","scrollTop","scrollHeight","clientHeight","handleFolderClick","folder","watch","newVal","__expose","handleRemove","type","handleClear","getCategoryLabel","collapsedCategories","toggleCategory","isCategoryCollapsed","pathArray","getPathByIndex","index","handleBackPath","currentPath","lastSlashIndex","parentPath","emitPathClick","path","getElementList","params","request","postMixCut","data","getTaskList","postTaskSave","getProductInfo","selectedItemsRef","libraryRef","selectedList","maxItemsByType","selectAllButtonText","videoOptions","isVideoLoadMore","filterOption","addOption","VideoLoading","lastFetchTime","dialogVisible","val","getDisabledTitle","removeSelected","i","newPath","videoParams","folderPage","videoPage","handleGetElementList","updateSelectAllButtonText","handleConfirm","handleCancel","handleDialogClose","videoList","reactive","folderTotalNumber","videoTotalNumber","isLoadMore","pageMore","folderMoreRes","folders","ElMessage","videoMoreRes","videos","folderRes","videoRes","error","handleFilterChange","searchKey","handleSearch","handlePathClick","videoIds","allSelected","selected","toggleSelectAll","maxCount","remainingCount","opt","newSelections","shuffled","currentTime","nextTick","imageOptions","isImageLoadMore","imageLoading","imageParams","imagePage","imageList","imageTotalNumber","imageMoreRes","images","imageRes","imageIds","tableRef","isTemplateSelectable","row","currentSelectedIds","currentPlayingAudio","handleAudioPlay","audio","handleSelectAll","selection","musicList","musicParams","musicOptions","isMusicLoadMore","musicLoading","musicPage","musicTotalNumber","musicMoreRes","musics","musicRes","musicIds","handleGetTaskList","synthesizedVoices","formData","productSellingPointsList","productBenefitList","selectVideoList","selectImageList","selectMusicList","selectedTag","formRules","loading","total","formRef","submitting","videoDialogVisible","imageDialogVisible","musicDialogVisible","checkedNames","namingVariables","statusTag","clearSelectInput","input","handleResourceConfirm","idsByType","types","allSelectedItems","taskParams","loadMore","res","voice","pollTimeout","pollProcessingTasks","pollParams","waitingTaskIds","pollRes","updatedVoice","v","updatedVideoInfos","oldInfo","handleRefresh","handleTag","disabledVideoTypes","selectTemplate","pauseAllVideos","updateDisabledTypes","disabledImageTypes","selectImage","sourceIds","targetDisabled","selectMusic","getCustomNamingExample","example","productName","today","dateStr","timeStr","insertNamingVariable","variable","handleSubmit","valid","submitParams","_c","_d","_e","_f","_h","_g","_j","_i","_l","_k","_n","_m","_o","tempParams","newTaskRes","newTasks","task","existing","_q","_p","hasCheckedVideos","checkedItem","videoInfo","handleSave","selectedVideos","checked","resetForm","onUnmounted","updateProductInfo","sellingPoints","benefitPoints","timeoutId","newValue","newCount","videoType","ids","activeTab","selectOptions","handleTabClick","tab","pagination","handleSizeChange","size","handlePageChange","page"],"mappings":"w9BAAA,MAAMA,GAAgB,OAAO,eAAe,ECGtCC,GAAkBC,GAAW,CACjC,UAAW,CACT,KAAM,OACN,QAAS,GACV,EACD,cAAe,CACb,KAAMC,EACV,CACA,CAAC,ECJKC,GAAcC,GAAgB,CAClC,KAAM,cACR,CAAC,EACKC,GAA4BD,GAAgB,CAChD,GAAGD,GACH,MAAOH,GACP,MAAMM,EAAS,CACb,MAAMC,EAAQD,EACR,CAAE,EAAAE,CAAG,EAAGC,GAAW,EACnBC,EAAKC,GAAa,YAAY,EAC9BC,EAAaC,EAAK,EACxB,OAAAC,GAAQf,GAAeQ,CAAK,EAC5BQ,GAAU,IAAM,CACd,MAAMC,EAAQJ,EAAW,MAAM,iBAAiB,IAAIF,EAAG,EAAE,MAAM,CAAC,EAAE,EAC9DM,EAAM,QACRA,EAAMA,EAAM,OAAS,CAAC,EAAE,aAAa,eAAgB,MAAM,CAEnE,CAAK,EACM,CAACC,EAAMC,KACLC,EAAS,EAAIC,EAAmB,MAAO,CAC5C,QAAS,aACT,IAAKR,EACL,MAAOS,GAAeC,EAAMZ,CAAE,EAAE,EAAC,CAAE,EACnC,aAAcY,EAAMd,CAAC,EAAE,qBAAqB,EAC5C,KAAM,YACd,EAAS,CACDe,GAAWN,EAAK,OAAQ,SAAS,CACzC,EAAS,GAAI,CAAC,YAAY,CAAC,EAE3B,CACA,CAAC,EACD,IAAIO,GAA6BC,GAAYpB,GAAW,CAAC,CAAC,SAAU,gBAAgB,CAAC,CAAC,ECpCtF,MAAMqB,GAAsBzB,GAAW,CACrC,GAAI,CACF,KAAM0B,GAAe,CAAC,OAAQ,MAAM,CAAC,EACrC,QAAS,EACV,EACD,QAAS,OACX,CAAC,ECDKxB,GAAcC,GAAgB,CAClC,KAAM,kBACR,CAAC,EACKC,GAA4BD,GAAgB,CAChD,GAAGD,GACH,MAAOuB,GACP,MAAMpB,EAAS,CACb,MAAMC,EAAQD,EACRsB,EAAWC,GAAoB,EAC/BC,EAAoBC,GAAOhC,GAAe,MAAM,EAChDW,EAAKC,GAAa,YAAY,EAC9BqB,EAASJ,EAAS,WAAW,OAAO,iBAAiB,QACrDK,EAAOpB,EAAK,EACZqB,EAAU,IAAM,CAChB,CAAC3B,EAAM,IAAM,CAACyB,IAElBzB,EAAM,QAAUyB,EAAO,QAAQzB,EAAM,EAAE,EAAIyB,EAAO,KAAKzB,EAAM,EAAE,EAChE,EACD,MAAO,CAACU,EAAMC,IAAW,CACvB,IAAIiB,EAAIC,EACR,OAAOjB,EAAS,EAAIC,EAAmB,OAAQ,CAC7C,MAAOC,GAAeC,EAAMZ,CAAE,EAAE,EAAE,MAAM,CAAC,CACjD,EAAS,CACD2B,EAAmB,OAAQ,CACzB,QAAS,OACT,IAAKJ,EACL,MAAOZ,GAAe,CAACC,EAAMZ,CAAE,EAAE,EAAE,OAAO,EAAGY,EAAMZ,CAAE,EAAE,GAAG,OAAQ,CAAC,CAACO,EAAK,EAAE,CAAC,CAAC,EAC7E,KAAM,OACN,QAAAiB,CACV,EAAW,CACDX,GAAWN,EAAK,OAAQ,SAAS,CAClC,EAAE,CAAC,GACFkB,EAAKb,EAAMQ,CAAiB,IAAM,MAAgBK,EAAG,eAAkBhB,EAAW,EAAEmB,GAAYhB,EAAMiB,EAAM,EAAG,CAC/G,IAAK,EACL,MAAOlB,GAAeC,EAAMZ,CAAE,EAAE,EAAE,WAAW,CAAC,CACxD,EAAW,CACD,QAAS8B,EAAQ,IAAM,EACpBrB,EAAS,EAAImB,GAAYG,GAAwBnB,EAAMQ,CAAiB,EAAE,aAAa,CAAC,EACrG,CAAW,EACD,EAAG,CACb,EAAW,EAAG,CAAC,OAAO,CAAC,IAAMX,EAAW,EAAEC,EAAmB,OAAQ,CAC3D,IAAK,EACL,MAAOC,GAAeC,EAAMZ,CAAE,EAAE,EAAE,WAAW,CAAC,EAC9C,KAAM,cACP,EAAEgC,GAAiBN,EAAKd,EAAMQ,CAAiB,IAAM,KAAO,OAASM,EAAG,SAAS,EAAG,CAAC,EACvF,EAAE,CAAC,CACL,CACL,CACA,CAAC,EACD,IAAIO,GAAiClB,GAAYpB,GAAW,CAAC,CAAC,SAAU,qBAAqB,CAAC,CAAC,ECjD/F,MAAMuC,GAAeC,GAAYrB,GAAY,CAC3C,eAAAmB,EACF,CAAC,EACKG,GAAmBC,GAAgBJ,EAAc,ECP1CK,GAAOnC,EAAI,CACtB,CACE,MAAO,OACP,MAAO,YACT,EACA,CACE,MAAO,MACP,MAAO,iBAAA,CAEX,CAAC,6dCiDD,MAAMN,EAAQD,EAoBR2C,EAAOC,EAEPC,EAAoBtC,EAAI,CAAE,CAAA,EAC1BuC,EAAsBvC,EAAI,CAAE,CAAA,EAG5BwC,EAAoBC,GAAS,IAC1B/C,EAAM,UAAY,CAAA,CAC1B,EAEKgD,EAAsBC,GAExBL,EAAkB,MAAM,QAAU5C,EAAM,UACxC,CAAC4C,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeD,EAAS,UAAU,EAI7EE,EAAiB,IAAM,CAC3BP,EAAkB,MAAQ,CAAA,EAC1BC,EAAoB,MAAQ,CAAA,CAE9B,EAGMO,EAA0B,IAAM,CACpCR,EAAkB,MAAQC,EAAoB,MAC3C,IAAKQ,GAAO,CACX,MAAMJ,EAAWjD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EACrE,OAAOJ,GAAsBL,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeG,CAAE,CAC3F,CAAA,EACA,OAAQH,GAASA,GAAQA,EAAK,UAAU,CAC7C,EACMI,EAAsBhD,EAAI,IAAI,EAE9BiD,EAAcC,GAAU,CAC5B,MAAMC,EAAQD,EAAM,OAChBF,EAAoB,OAASA,EAAoB,QAAUG,GAC7DH,EAAoB,MAAM,MAAK,EAEjCA,EAAoB,MAAQG,CAC9B,EAEMC,EAAwBC,GAAc,CAEtCA,GAAA,MAAAA,EAAW,QACbf,EAAkB,MAAQe,EAC1Bd,EAAoB,MAAQc,EAAU,IAAKT,GAASA,EAAK,UAAU,IAEnEN,EAAkB,MAAQ,CAAA,EAC1BC,EAAoB,MAAQ,CAAA,EAEhC,EAEMe,EAAyBC,GAAU,CAEvC,MAAMC,EAAaD,EAAM,IAAKX,GAASA,EAAK,UAAU,EAEtDL,EAAoB,MAAQ,MAAM,KAChC,IAAI,IAAI,CAAC,GAAGA,EAAoB,MAAO,GAAGiB,CAAU,CAAC,CACzD,EAAI,OAAQT,GAEJrD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EAC/CS,EAAW,SAAST,CAAE,EAGxB,EACR,EAEDD,EAAuB,EAEvBV,EAAK,mBAAoBE,EAAkB,KAAK,CAClD,EAEMmB,EAAW,CAACC,EAAIC,IAAU,CAC9B,IAAIC,EAAQ,KACZ,OAAO,YAAaC,EAAM,CACpBD,GAAO,aAAaA,CAAK,EAC7BA,EAAQ,WAAW,IAAM,CACvBF,EAAG,MAAM,KAAMG,CAAI,CACzB,EAAOF,CAAK,CACZ,CACA,EAEMG,EAAY9D,EAAI,EAAK,EACrB+D,EAAeN,EAAUO,GAAM,CACnC,KAAM,CAAE,UAAAC,EAAW,aAAAC,EAAc,aAAAC,CAAY,EAAKH,EAAE,OAChD,KAAK,IAAIE,EAAeD,EAAYE,CAAY,GAAK,GAAK,CAACL,EAAU,QACvEA,EAAU,MAAQ,GAClB1B,EAAK,QAAQ,EAEb,WAAW,IAAM,CACf0B,EAAU,MAAQ,EACxB,EAAO,GAAI,EAEX,EAAG,GAAG,EAGAM,EAAqBC,GAAW,CACpCjC,EAAK,eAAgBiC,CAAM,CAC7B,EAEA,OAAAC,GACE,IAAM5E,EAAM,aACX6E,GAAW,CACNA,GAAA,MAAAA,EAAQ,SAEVhC,EAAoB,MAAQgC,EAAO,IAAK3B,GAASA,EAAK,UAAU,EAChEE,EAAuB,EAE1B,EACD,CAAE,UAAW,EAAI,CACnB,EAGAwB,GACE,IAAM5E,EAAM,SACZ,IAAM,CAEJoD,EAAuB,CAC3B,CACA,EAEA0B,EAAa,CACX,qBAAApB,EACA,eAAAP,CACF,CAAC,ivDCpID,MAAMT,EAAOC,EAEPoC,EAAe,CAAC7B,EAAM8B,IAAS,CACnCtC,EAAK,SAAUQ,EAAM8B,CAAI,CAC3B,EAEMC,EAAc,IAAM,CACxBvC,EAAK,OAAO,CACd,EAEMwC,EAAoBF,IACT,CACb,IAAK,OACL,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,WAAY,KACZ,IAAK,MACT,GACgBA,CAAI,GAAK,OAGnBG,EAAsB7E,EAAI,CAAE,CAAA,EAE5B8E,EAAkBJ,GAAS,CAC/BG,EAAoB,MAAMH,CAAI,EAAI,CAACG,EAAoB,MAAMH,CAAI,CACnE,EAEMK,EAAuBL,GACpBG,EAAoB,MAAMH,CAAI,GAAK,GAG5C,OAAAF,EAAa,CACX,oBAAAO,EACA,eAAAD,CACF,CAAC,6jCCxED,MAAMpF,EAAQD,EAOR2C,EAAOC,EAEP2C,EAAYvC,GAAS,IAClB/C,EAAM,KAAK,WAAW,GAAG,EAC5BA,EAAM,KAAK,UAAU,CAAC,EAAE,MAAM,GAAG,EAAE,OAAO,OAAO,EACjDA,EAAM,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,CACzC,EAEKuF,EAAkBC,GACf,IAAMF,EAAU,MAAM,MAAM,EAAGE,EAAQ,CAAC,EAAE,KAAK,GAAG,EAGrDC,EAAiB,IAAM,CAC3B,MAAMC,EAAc1F,EAAM,KAC1B,GAAI0F,IAAgB,IAAK,OAEzB,MAAMC,EAAiBD,EAAY,YAAY,GAAG,EAC5CE,EAAaD,IAAmB,EAAI,IAAMD,EAAY,UAAU,EAAGC,CAAc,EAEvFjD,EAAK,aAAckD,CAAU,CAC/B,EACMC,EAAiBC,GAAS,CAC9BpD,EAAK,aAAcoD,CAAI,CACzB,wzBChEaC,GAAiB,MAAMC,GAC3BC,GAAQ,CACb,IAAK,uBACL,OAAQ,MACR,OAAAD,CACD,CAAA,EAmBUE,GAAa,MAAMC,GACvBF,GAAQ,CACb,IAAK,kBACL,OAAQ,OACR,KAAAE,CACD,CAAA,EAWUC,GAAc,MAAOJ,GACzBC,GAAQ,CACb,IAAK,oBACL,OAAQ,MACR,OAAAD,CACD,CAAA,EAGUK,GAAe,MAAOL,GAC1BC,GAAQ,CACb,IAAK,oBACL,OAAQ,OACR,KAAMD,CACP,CAAA,EAyCUM,GAAiB,MAAON,GAC5BC,GAAQ,CACb,IAAK,uBACL,OAAQ,MACR,OAAAD,CACD,CAAA,yfCaH,MAAMtD,EAAOC,EAEP3C,EAAQD,EAkBRwG,EAAmBjG,EAAI,IAAI,EAC3BkG,EAAalG,EAAI,IAAI,EACrBmG,EAAenG,EAAI,CACvB,IAAK,CAAE,EACP,UAAW,CAAE,EACb,WAAY,CAAE,EACd,WAAY,CAAE,EACd,WAAY,CAAA,CACd,CAAC,EAEKoG,EAAiB3D,GAAS,KACvB,CACL,IAAK,GACL,UAAW/C,EAAM,SACjB,WAAYA,EAAM,SAClB,WAAY,EACZ,WAAY,CAChB,EACC,EACDQ,GAAU,IAAM,CAAE,CAAA,EAClB,MAAMmG,EAAsBrG,EAAI,MAAM,EAChCsG,EAAe,CACnB,CAAE,MAAO,OAAQ,MAAO,KAAO,EAC/B,CAAE,MAAO,KAAM,MAAO,WAAa,EACnC,CAAE,MAAO,KAAM,MAAO,YAAc,EACpC,CAAE,MAAO,KAAM,MAAO,YAAc,EACpC,CAAE,MAAO,KAAM,MAAO,YAAY,CACpC,EACMC,EAAkBvG,EAAI,EAAK,EAC3BwG,EAAexG,EAAI,EAAE,EACrByG,EAAYzG,EAAI,KAAK,EACrB0G,EAAe1G,EAAI,EAAK,EAExB2G,EAAgB3G,EAAI,CAAC,EAErB4G,EAAgBnE,GAAS,CAC7B,IAAK,IAAM/C,EAAM,QACjB,IAAMmH,GAAQzE,EAAK,iBAAkByE,CAAG,CAC1C,CAAC,EAGKvD,EAAyBC,GAAU,CACvC4C,EAAa,MAAMM,EAAU,KAAK,EAAIlD,EAClC0C,EAAiB,OAECA,EAAiB,MAAM,oBAAoBQ,EAAU,KAAK,GAG5ER,EAAiB,MAAM,eAAeQ,EAAU,KAAK,CAG3D,EACMK,EAAoBvD,GACjB7D,EAAM,mBAAmB,SAAS6D,CAAK,EAC1C,UAAUA,IAAU,aAAe,KAAO,IAAI,GAC9C,GAGAwD,EAAiB,CAACnE,EAAM8B,IAAS,CAErCyB,EAAa,MAAMzB,CAAI,EAAIyB,EAAa,MAAMzB,CAAI,EAAE,OACjDsC,GAAMA,EAAE,aAAepE,EAAK,UACjC,EAEM8B,GAAQ+B,EAAU,OAChBP,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMzB,CAAI,CAAC,CAGpE,EACMN,EAAoB,MAAOC,GAAW,CAE1C,MAAM4C,EACJC,EAAY,YAAc,IACtB,IAAM7C,EAAO,aACb,GAAG6C,EAAY,SAAS,IAAI7C,EAAO,YAAY,GACrD6C,EAAY,UAAYD,EACxB7B,GAAY,MAAQ6B,EAEpBE,EAAW,MAAQ,EACnBC,EAAU,MAAQ,EAClB,MAAMC,EAAoB,EAC1BC,EAAyB,CAC3B,EACMC,EAAgB,IAAM,CAC1BnF,EAAK,UAAW+D,EAAa,KAAK,EAClCS,EAAc,MAAQ,EACxB,EAEMY,EAAe,IAAM,CACzBrB,EAAa,MAAQ,CACnB,IAAK,CAAE,EACP,UAAW,CAAE,EACb,WAAY,CAAE,EACd,WAAY,CAAE,EACd,WAAY,CAAA,CAChB,EACMD,EAAW,OACbA,EAAW,MAAM,eAAc,CAEnC,EAEMuB,EAAoB,IAAM,CAYhC,EAEMC,EAAY1H,EAAI,EAAE,EAElBkH,EAAcS,GAAS,CAC3B,KAAM,EACN,UAAW,GACX,aAAc,QACd,UAAW,GACb,CAAC,EACKC,EAAoB5H,EAAI,CAAC,EACzB6H,EAAmB7H,EAAI,CAAC,EAExBqH,EAAuB,MAAOS,EAAa,GAAOpD,EAAMqD,IAAa,SACzE,GAAI,CACF,GAAID,EAAY,CACd,GAAIpD,IAAS,SAAU,CACrB,MAAMsD,GAAgB,MAAMvC,GAAe,CACzC,GAAGyB,EACH,KAAMa,EACN,aAAc,QACf,CAAA,EACD,GAAIC,GAAc,OAAS,EAAG,CAE5B,MAAMC,IAAWD,GAAc,KAAK,UAAY,IAAI,IAAKpF,IAAU,CACjE,GAAGA,EACH,SAAU,EACtB,EAAY,EACF8E,EAAU,MAAS,CAAC,GAAGA,EAAU,MAAO,GAAGO,EAAO,CAC5D,MACUC,GAAU,MAAMF,GAAc,SAAW,QAAQ,CAE3D,SAAiBtD,IAAS,QAAS,CAC3B,MAAMyD,GAAe,MAAM1C,GAAe,CACxC,GAAGyB,EACH,KAAMa,EACN,aAAc,OACf,CAAA,EACD,GAAII,GAAa,OAAS,EAAG,CAE3B,MAAMC,GAASD,GAAa,KAAK,UAAY,CAAA,EAC7CT,EAAU,MAAQ,CAAC,GAAGA,EAAU,MAAO,GAAGU,EAAM,CAC1D,MACUF,GAAU,MAAMC,GAAa,SAAW,QAAQ,CAE1D,CACM5B,EAAgB,MAAQ,GACxB,MACN,CACIG,EAAa,MAAQ,GAErB,MAAM2B,EAAY,MAAM5C,GAAe,CACrC,GAAGyB,EACH,aAAc,QACf,CAAA,EAGKoB,GAAW,MAAM7C,GAAe,CACpC,GAAGyB,EACH,aAAc,OACf,CAAA,EAED,GAAImB,EAAU,OAAS,GAAKC,GAAS,OAAS,EAAG,CAE/C,MAAML,IAAWI,EAAU,KAAK,UAAY,IAAI,IAAKzF,IAAU,CAC7D,GAAGA,EACH,SAAU,EAClB,EAAQ,EACIwF,GAASE,GAAS,KAAK,UAAY,CAAA,EAEzCZ,EAAU,MAAQ,CAAC,GAAGO,GAAS,GAAGG,EAAM,EACxCR,EAAkB,QAAQtG,EAAA+G,EAAU,KAAK,YAAf,YAAA/G,EAA0B,eAAgB,EACpEuG,EAAiB,QAAQtG,EAAA+G,GAAS,KAAK,YAAd,YAAA/G,EAAyB,eAAgB,CACxE,MACM2G,GAAU,MAAMG,EAAU,SAAWC,GAAS,SAAW,QAAQ,CAEpE,OAAQC,EAAO,CACdL,GAAU,MAAMK,GAAS,QAAQ,CACrC,QAAY,CACR7B,EAAa,MAAQ,EACzB,CACA,EAGM8B,GAAqB,MAAOjF,GAAU,CACtCA,EACF2D,EAAY,OAAS3D,EAErB,OAAO2D,EAAY,OAErBC,EAAW,MAAQ,EACnBC,EAAU,MAAQ,EAClB,MAAMC,EAAoB,CAC5B,EAGMoB,GAAYzI,EAAI,EAAE,EAClB0I,GAAe,SAAY,CAI/B,GAHAvB,EAAW,MAAQ,EACnBC,EAAU,MAAQ,EAEdqB,GAAU,OAAS,IAAMvB,EAAY,aAAc,CACrD,OAAOA,EAAY,aACnB,MAAMG,EAAoB,EAC1B,MACJ,CACEH,EAAY,aAAeuB,GAAU,MACrC,MAAMpB,EAAoB,CAC5B,EACMjC,GAAcpF,EAAI,GAAG,EAErB2I,GAAkB,MAAOnD,GAAS,CACtC2B,EAAW,MAAQ,EACnBC,EAAU,MAAQ,EAClBhC,GAAY,MAAQI,EACpB0B,EAAY,UAAY1B,EAExB,MAAM6B,EAAoB,EAC1BC,EAAyB,CAC3B,EACMA,EAA4B,IAAM,CACtC,MAAMsB,EAAWlB,EAAU,MAAM,OAAQ9E,GAAS,CAACA,EAAK,QAAQ,EAAE,IAAKA,GAASA,EAAK,UAAU,EAC/F,GAAIgG,EAAS,SAAW,EAAG,CACzBvC,EAAoB,MAAQ,OAC5B,MACJ,CAEE,MAAMwC,EAAcD,EAAS,MAAO7F,GAClCoD,EAAa,MAAMM,EAAU,KAAK,EAAE,KAAMqC,GAAaA,EAAS,aAAe/F,CAAE,CACrF,EACEsD,EAAoB,MAAQwC,EAAc,SAAW,MACvD,EACME,EAAkB,IAAM,OAE5B,GADiBrB,EAAU,MAAM,OAAQ9E,GAAS,CAACA,EAAK,QAAQ,EAAE,IAAKA,GAASA,EAAK,UAAU,EAClF,SAAW,EAGxB,GAAIyD,EAAoB,QAAU,OAAQ,CAExC,MAAM2C,EAAW5C,EAAe,MAAMK,EAAU,KAAK,EAE/CwC,EAAiBD,EAAW7C,EAAa,MAAMM,EAAU,KAAK,EAAE,OACtE,GAAIwC,GAAkB,EAAG,CACvBf,GAAU,QACR,KACE5G,EAAAgF,EAAa,KAAM4C,GAAQA,EAAI,QAAUzC,EAAU,KAAK,IAAxD,YAAAnF,EAA2D,QAAS,KAC9E,OAAe0H,CAAQ,GACvB,EACM,MACN,CAEI,MAAMG,EAAgBzB,EAAU,MAAM,OACnC9E,GACC,CAACA,EAAK,UACN,CAACuD,EAAa,MAAMM,EAAU,KAAK,EAAE,KAClCqC,IAAaA,GAAS,aAAelG,EAAK,UACrD,CACA,EAGI,GAAIqG,EAAiBE,EAAc,OAAQ,CAEzC,MAAMC,EAAW,CAAC,GAAGD,CAAa,EAAE,KAAK,IAAM,KAAK,OAAM,EAAK,EAAG,EAClEhD,EAAa,MAAMM,EAAU,KAAK,EAAI,CACpC,GAAGN,EAAa,MAAMM,EAAU,KAAK,EACrC,GAAG2C,EAAS,MAAM,EAAGH,CAAc,CAC3C,CACA,MAEM9C,EAAa,MAAMM,EAAU,KAAK,EAAI,CACpC,GAAGN,EAAa,MAAMM,EAAU,KAAK,EACrC,GAAG0C,CACX,EAEI9C,EAAoB,MAAQ,SACxBH,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,CAE/E,MAAaJ,EAAoB,QAAU,WAEvCF,EAAa,MAAMM,EAAU,KAAK,EAAIN,EAAa,MAAMM,EAAU,KAAK,EAAE,OACvEqC,GAAa,CAACpB,EAAU,MAAM,KAAM9E,GAASA,EAAK,aAAekG,EAAS,UAAU,CAC3F,EACIzC,EAAoB,MAAQ,OACxBH,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,EAG/E,EACMU,EAAanH,EAAI,CAAC,EAClBoH,EAAYpH,EAAI,CAAC,EAEjB+D,GAAe,SAAY,CAC3BoD,EAAW,MAAQD,EAAY,UAAYU,EAAkB,QAC/DrB,EAAgB,MAAQ,GACxBY,EAAW,OAAS,EACpB,MAAME,EAAqB,GAAM,SAAUF,EAAW,KAAK,GAEzDC,EAAU,MAAQF,EAAY,UAAYW,EAAiB,QAC7DtB,EAAgB,MAAQ,GACxBa,EAAU,OAAS,EACnB,MAAMC,EAAqB,GAAM,QAASD,EAAU,KAAK,EAE7D,EAGA,OAAA9C,GACE,IAAM5E,EAAM,QACZ,MAAO6E,GAAW,CAChB,GAAIA,EAAQ,CACVkC,EAAU,MAAQ,MAClB,MAAM4C,EAAc,KAAK,IAAG,GAExB1C,EAAc,QAAU,GAAK0C,EAAc1C,EAAc,MAAQ,EAAI,GAAK,OAC5EQ,EAAW,MAAQ,EACnBC,EAAU,MAAQ,EAClB,MAAMC,EAAoB,EAE1BV,EAAc,MAAQ0C,GAGpB3J,EAAM,cAAgB,OAAOA,EAAM,cAAiB,WACtDyG,EAAa,MAAQ,KAAK,MAAM,KAAK,UAAUzG,EAAM,YAAY,CAAC,EAClE4J,GAAS,IAAM,CACTpD,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,CAE5E,CAAA,EAET,CACA,CACA,EAEAnC,GACE,IAAMmC,EAAU,MACflC,GAAW,CAEN2B,EAAW,OAASC,EAAa,MAAM5B,CAAM,GAC/C2B,EAAW,MAAM,qBAAqBC,EAAa,MAAM5B,CAAM,CAAC,EAElE+C,EAAyB,CAC7B,CACA,iyFChbA,MAAM5H,EAAQD,EAoBR2C,EAAOC,EAEPC,EAAoBtC,EAAI,CAAE,CAAA,EAC1BuC,EAAsBvC,EAAI,CAAE,CAAA,EAG5BwC,EAAoBC,GAAS,IAC1B/C,EAAM,UAAY,CAAA,CAC1B,EAEKgD,EAAsBC,GAExBL,EAAkB,MAAM,QAAU5C,EAAM,UACxC,CAAC4C,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeD,EAAS,UAAU,EAI7EE,EAAiB,IAAM,CAC3BP,EAAkB,MAAQ,CAAA,EAC1BC,EAAoB,MAAQ,CAAA,CAE9B,EAGMO,EAA0B,IAAM,CACpCR,EAAkB,MAAQC,EAAoB,MAC3C,IAAKQ,GAAO,CACX,MAAMJ,EAAWjD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EACrE,OAAOJ,GAAsBL,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeG,CAAE,CAC3F,CAAA,EACA,OAAQH,GAASA,GAAQA,EAAK,UAAU,CAC7C,EAGMQ,EAAwBC,GAAc,CAEtCA,GAAA,MAAAA,EAAW,QACbf,EAAkB,MAAQe,EAC1Bd,EAAoB,MAAQc,EAAU,IAAKT,GAASA,EAAK,UAAU,IAEnEN,EAAkB,MAAQ,CAAA,EAC1BC,EAAoB,MAAQ,CAAA,EAEhC,EAEMe,EAAyBC,GAAU,CAEvC,MAAMC,EAAaD,EAAM,IAAKX,GAASA,EAAK,UAAU,EAEtDL,EAAoB,MAAQ,MAAM,KAChC,IAAI,IAAI,CAAC,GAAGA,EAAoB,MAAO,GAAGiB,CAAU,CAAC,CACzD,EAAI,OAAQT,GAEJrD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EAC/CS,EAAW,SAAST,CAAE,EAGxB,EACR,EAEDD,EAAuB,EAEvBV,EAAK,mBAAoBE,EAAkB,KAAK,CAClD,EAEMmB,EAAW,CAACC,EAAIC,IAAU,CAC9B,IAAIC,EAAQ,KACZ,OAAO,YAAaC,EAAM,CACpBD,GAAO,aAAaA,CAAK,EAC7BA,EAAQ,WAAW,IAAM,CACvBF,EAAG,MAAM,KAAMG,CAAI,CACzB,EAAOF,CAAK,CACZ,CACA,EAEMG,EAAY9D,EAAI,EAAK,EACrB+D,EAAeN,EAAUO,GAAM,CACnC,KAAM,CAAE,UAAAC,EAAW,aAAAC,EAAc,aAAAC,CAAY,EAAKH,EAAE,OAChD,KAAK,IAAIE,EAAeD,EAAYE,CAAY,GAAK,GAAK,CAACL,EAAU,QACvEA,EAAU,MAAQ,GAClB1B,EAAK,QAAQ,EAEb,WAAW,IAAM,CACf0B,EAAU,MAAQ,EACxB,EAAO,GAAI,EAEX,EAAG,GAAG,EAGAM,EAAqBC,GAAW,CACpCjC,EAAK,eAAgBiC,CAAM,CAC7B,EAGA,OAAAC,GACE,IAAM5E,EAAM,aACX6E,GAAW,CACNA,GAAA,MAAAA,EAAQ,SAEVhC,EAAoB,MAAQgC,EAAO,IAAK3B,GAASA,EAAK,UAAU,EAChEE,EAAuB,EAE1B,EACD,CAAE,UAAW,EAAI,CACnB,EAGAwB,GACE,IAAM5E,EAAM,SACZ,IAAM,CAEJoD,EAAuB,CAC3B,CACA,EAEA0B,EAAa,CACX,qBAAApB,EACA,eAAAP,CACF,CAAC,8mDClFD,MAAMT,EAAOC,EAEP3C,EAAQD,EAkBRwG,EAAmBjG,EAAI,IAAI,EAC3BkG,EAAalG,EAAI,IAAI,EACrBmG,EAAenG,EAAI,CACvB,IAAK,CAAE,EACP,WAAY,CAAE,EACd,WAAY,CAAA,CACd,CAAC,EAEKoG,EAAiB3D,GAAS,KACvB,CACL,IAAK,GACL,WAAY,EACZ,WAAY,CAChB,EACC,EACDvC,GAAU,IAAM,CAAE,CAAA,EAClB,MAAMmG,EAAsBrG,EAAI,MAAM,EAChCuJ,EAAe,CACnB,CAAE,MAAO,OAAQ,MAAO,KAAO,EAC/B,CAAE,MAAO,KAAM,MAAO,YAAc,EACpC,CAAE,MAAO,KAAM,MAAO,YAAY,CACpC,EACMC,EAAkBxJ,EAAI,EAAK,EAC3BwG,EAAexG,EAAI,EAAE,EACrByG,EAAYzG,EAAI,KAAK,EACrByJ,EAAezJ,EAAI,EAAK,EAExB2G,EAAgB3G,EAAI,CAAC,EACrB4G,EAAgBnE,GAAS,CAC7B,IAAK,IAAM/C,EAAM,QACjB,IAAMmH,GAAQzE,EAAK,iBAAkByE,CAAG,CAC1C,CAAC,EAGKvD,EAAyBC,GAAU,CACvC4C,EAAa,MAAMM,EAAU,KAAK,EAAIlD,EAClC0C,EAAiB,OAECA,EAAiB,MAAM,oBAAoBQ,EAAU,KAAK,GAG5ER,EAAiB,MAAM,eAAeQ,EAAU,KAAK,CAG3D,EACMK,EAAoBvD,GACjB7D,EAAM,mBAAmB,SAAS6D,CAAK,EAC1C,UAAUA,IAAU,aAAe,KAAO,IAAI,GAC9C,GAGAwD,EAAiB,CAACnE,EAAM8B,IAAS,CAErCyB,EAAa,MAAMzB,CAAI,EAAIyB,EAAa,MAAMzB,CAAI,EAAE,OACjDsC,GAAMA,EAAE,aAAepE,EAAK,UACjC,EAEM8B,GAAQ+B,EAAU,OAChBP,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMzB,CAAI,CAAC,CAGpE,EACMN,EAAoB,MAAOC,GAAW,CAE1C,MAAM4C,EACJyC,EAAY,YAAc,IACtB,IAAMrF,EAAO,aACb,GAAGqF,EAAY,SAAS,IAAIrF,EAAO,YAAY,GACrDqF,EAAY,UAAYzC,EACxB7B,GAAY,MAAQ6B,EAEpBE,EAAW,MAAQ,EACnBwC,EAAU,MAAQ,EAClB,MAAMtC,EAAoB,EAC1BC,EAAyB,CAC3B,EACMC,EAAgB,IAAM,CAC1BnF,EAAK,UAAW+D,EAAa,KAAK,EAClCS,EAAc,MAAQ,EACxB,EAEMY,EAAe,IAAM,CACzBrB,EAAa,MAAQ,CACnB,IAAK,CAAE,EACP,WAAY,CAAE,EACd,WAAY,CAAA,CAChB,EACMD,EAAW,OACbA,EAAW,MAAM,eAAc,CAEnC,EAEMuB,EAAoB,IAAM,CAUhC,EAEMmC,EAAY5J,EAAI,EAAE,EAElB0J,EAAc/B,GAAS,CAC3B,KAAM,EACN,UAAW,GACX,aAAc,QACd,UAAW,GACb,CAAC,EACKC,EAAoB5H,EAAI,CAAC,EACzB6J,EAAmB7J,EAAI,CAAC,EAExBqH,EAAuB,MAAOS,EAAa,GAAOpD,EAAMqD,IAAa,SACzE,GAAI,CACF,GAAID,EAAY,CACd,GAAIpD,IAAS,SAAU,CACrB,MAAMsD,GAAgB,MAAMvC,GAAe,CACzC,GAAGiE,EACH,KAAM3B,EACN,aAAc,QACf,CAAA,EACD,GAAIC,GAAc,OAAS,EAAG,CAC5B,MAAMC,IAAWD,GAAc,KAAK,UAAY,IAAI,IAAKpF,IAAU,CACjE,GAAGA,EACH,SAAU,EACtB,EAAY,EACFgH,EAAU,MAAQ,CAAC,GAAGA,EAAU,MAAO,GAAG3B,EAAO,CAC3D,MACUC,GAAU,MAAMF,GAAc,SAAW,QAAQ,CAE3D,SAAiBtD,IAAS,QAAS,CAC3B,MAAMoF,GAAe,MAAMrE,GAAe,CACxC,GAAGiE,EACH,KAAM3B,EACN,aAAc,OACf,CAAA,EACD,GAAI+B,GAAa,OAAS,EAAG,CAC3B,MAAMC,GAASD,GAAa,KAAK,UAAY,CAAA,EAC7CF,EAAU,MAAQ,CAAC,GAAGA,EAAU,MAAO,GAAGG,EAAM,CAC1D,MACU7B,GAAU,MAAM4B,GAAa,SAAW,QAAQ,CAE1D,CACMN,EAAgB,MAAQ,GACxB,MACN,CACIC,EAAa,MAAQ,GAErB,MAAMpB,EAAY,MAAM5C,GAAe,CACrC,GAAGiE,EACH,aAAc,QACf,CAAA,EAGKM,GAAW,MAAMvE,GAAe,CACpC,GAAGiE,EACH,aAAc,OACf,CAAA,EAED,GAAIrB,EAAU,OAAS,GAAK2B,GAAS,OAAS,EAAG,CAE/C,MAAM/B,IAAWI,EAAU,KAAK,UAAY,IAAI,IAAKzF,IAAU,CAC7D,GAAGA,EACH,SAAU,EAClB,EAAQ,EACImH,GAASC,GAAS,KAAK,UAAY,CAAA,EAEzCJ,EAAU,MAAQ,CAAC,GAAG3B,GAAS,GAAG8B,EAAM,EACxCnC,EAAkB,QAAQtG,EAAA+G,EAAU,KAAK,YAAf,YAAA/G,EAA0B,eAAgB,EACpEuI,EAAiB,QAAQtI,EAAAyI,GAAS,KAAK,YAAd,YAAAzI,EAAyB,eAAgB,CACxE,MACM2G,GAAU,MAAMG,EAAU,SAAW2B,GAAS,SAAW,QAAQ,CAEpE,OAAQzB,EAAO,CACdL,GAAU,MAAMK,GAAS,QAAQ,CACrC,QAAY,CACRkB,EAAa,MAAQ,EACzB,CACA,EAGMjB,GAAqB,MAAOjF,GAAU,CACtCA,EACFmG,EAAY,OAASnG,EAErB,OAAOmG,EAAY,OAErBvC,EAAW,MAAQ,EACnBwC,EAAU,MAAQ,EAClB,MAAMtC,EAAoB,CAC5B,EAGMoB,GAAYzI,EAAI,EAAE,EAClB0I,GAAe,SAAY,CAI/B,GAHAvB,EAAW,MAAQ,EACnBwC,EAAU,MAAQ,EAEdlB,GAAU,OAAS,IAAMiB,EAAY,aAAc,CACrD,OAAOA,EAAY,aACnB,MAAMrC,EAAoB,EAC1B,MACJ,CACEqC,EAAY,aAAejB,GAAU,MACrC,MAAMpB,EAAoB,CAC5B,EACMjC,GAAcpF,EAAI,GAAG,EAErB2I,GAAkB,MAAOnD,GAAS,CACtC2B,EAAW,MAAQ,EACnBwC,EAAU,MAAQ,EAClBvE,GAAY,MAAQI,EACpBkE,EAAY,UAAYlE,EAExB,MAAM6B,EAAoB,EAC1BC,EAAyB,CAC3B,EACMA,EAA4B,IAAM,CACtC,MAAM2C,EAAWL,EAAU,MAAM,OAAQhH,GAAS,CAACA,EAAK,QAAQ,EAAE,IAAKA,GAASA,EAAK,UAAU,EAC/F,GAAIqH,EAAS,SAAW,EAAG,CACzB5D,EAAoB,MAAQ,OAC5B,MACJ,CAEE,MAAMwC,EAAcoB,EAAS,MAAOlH,GAClCoD,EAAa,MAAMM,EAAU,KAAK,EAAE,KAAMqC,GAAaA,EAAS,aAAe/F,CAAE,CACrF,EACEsD,EAAoB,MAAQwC,EAAc,SAAW,MACvD,EACME,EAAkB,IAAM,OAE5B,GADiBa,EAAU,MAAM,OAAQhH,GAAS,CAACA,EAAK,QAAQ,EAAE,IAAKA,GAASA,EAAK,UAAU,EAClF,SAAW,EAGxB,GAAIyD,EAAoB,QAAU,OAAQ,CAExC,MAAM2C,EAAW5C,EAAe,MAAMK,EAAU,KAAK,EAE/CwC,EAAiBD,EAAW7C,EAAa,MAAMM,EAAU,KAAK,EAAE,OACtE,GAAIwC,GAAkB,EAAG,CACvBf,GAAU,QACR,KACE5G,EAAAiI,EAAa,KAAML,GAAQA,EAAI,QAAUzC,EAAU,KAAK,IAAxD,YAAAnF,EAA2D,QAAS,KAC9E,OAAe0H,CAAQ,GACvB,EACM,MACN,CAEI,MAAMG,EAAgBS,EAAU,MAAM,OACnChH,GACC,CAACA,EAAK,UACN,CAACuD,EAAa,MAAMM,EAAU,KAAK,EAAE,KAClCqC,IAAaA,GAAS,aAAelG,EAAK,UACrD,CACA,EAGI,GAAIqG,EAAiBE,EAAc,OAAQ,CAEzC,MAAMC,EAAW,CAAC,GAAGD,CAAa,EAAE,KAAK,IAAM,KAAK,OAAM,EAAK,EAAG,EAClEhD,EAAa,MAAMM,EAAU,KAAK,EAAI,CACpC,GAAGN,EAAa,MAAMM,EAAU,KAAK,EACrC,GAAG2C,EAAS,MAAM,EAAGH,CAAc,CAC3C,CACA,MAEM9C,EAAa,MAAMM,EAAU,KAAK,EAAI,CACpC,GAAGN,EAAa,MAAMM,EAAU,KAAK,EACrC,GAAG0C,CACX,EAEI9C,EAAoB,MAAQ,SACxBH,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,CAE/E,MAAaJ,EAAoB,QAAU,WAEvCF,EAAa,MAAMM,EAAU,KAAK,EAAIN,EAAa,MAAMM,EAAU,KAAK,EAAE,OACvEqC,GAAa,CAACc,EAAU,MAAM,KAAMhH,GAASA,EAAK,aAAekG,EAAS,UAAU,CAC3F,EACIzC,EAAoB,MAAQ,OACxBH,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,EAG/E,EACMU,EAAanH,EAAI,CAAC,EAClB2J,EAAY3J,EAAI,CAAC,EAEjB+D,GAAe,SAAY,CAC3BoD,EAAW,MAAQuC,EAAY,UAAY9B,EAAkB,QAC/D4B,EAAgB,MAAQ,GACxBrC,EAAW,OAAS,EACpB,MAAME,EAAqB,GAAM,SAAUF,EAAW,KAAK,GAEzDwC,EAAU,MAAQD,EAAY,UAAYG,EAAiB,QAC7DL,EAAgB,MAAQ,GACxBG,EAAU,OAAS,EACnB,MAAMtC,EAAqB,GAAM,QAASsC,EAAU,KAAK,EAE7D,EAEA,OAAArF,GACE,IAAM5E,EAAM,QACZ,MAAO6E,GAAW,CAChB,GAAIA,EAAQ,CACVkC,EAAU,MAAQ,MAClB,MAAM4C,EAAc,KAAK,IAAG,GAExB1C,EAAc,QAAU,GAAK0C,EAAc1C,EAAc,MAAQ,EAAI,GAAK,OAC5EQ,EAAW,MAAQ,EACnBwC,EAAU,MAAQ,EAClB,MAAMtC,EAAoB,EAE1BV,EAAc,MAAQ0C,GAGpB3J,EAAM,cAAgB,OAAOA,EAAM,cAAiB,WACtDyG,EAAa,MAAQ,KAAK,MAAM,KAAK,UAAUzG,EAAM,YAAY,CAAC,EAClE4J,GAAS,IAAM,CACTpD,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,CAE5E,CAAA,EAET,CACA,CACA,EAEAnC,GACE,IAAMmC,EAAU,MACflC,GAAW,CAEN2B,EAAW,OAASC,EAAa,MAAM5B,CAAM,GAC/C2B,EAAW,MAAM,qBAAqBC,EAAa,MAAM5B,CAAM,CAAC,EAElE+C,EAAyB,CAC7B,CACA,suFC9ZA,MAAM5H,EAAQD,EAwBR2C,EAAOC,EACPC,EAAoBtC,EAAI,CAAE,CAAA,EAC1BuC,EAAsBvC,EAAI,CAAE,CAAA,EAC5BkK,EAAWlK,EAAI,IAAI,EAEnBwC,EAAoBC,GAAS,IAC1B/C,EAAM,UAAY,CAAA,CAC1B,EAGKyK,EAAwBC,GAExBA,EAAI,eAAiB,SAChB,GAGF,CAAC1H,EAAmB0H,CAAG,EAG1B1H,EAAsBC,GAExBL,EAAkB,MAAM,QAAU5C,EAAM,UACxC,CAAC4C,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeD,EAAS,UAAU,EAI7EE,EAAiB,IAAM,CAC3BP,EAAkB,MAAQ,CAAA,EAC1BC,EAAoB,MAAQ,CAAA,CAE9B,EAEMO,EAA0B,IAAM,CAEpC,MAAMuH,EAAqB,CAAC,GAAG9H,EAAoB,KAAK,EACxDD,EAAkB,MAAQ+H,EACvB,IAAKtH,GAAO,CACX,MAAMJ,EAAWjD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EACrE,OAAOJ,GAAsBL,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeG,CAAE,CAC3F,CAAA,EACA,OAAQH,GAASA,GAAQA,EAAK,UAAU,EAE3C0G,GAAS,IAAM,QAEbhI,EAAA4I,EAAS,QAAT,MAAA5I,EAAgB,iBAEKkB,EAAkB,MAAM,OAC1CI,GAASyH,EAAmB,SAASzH,EAAK,UAAU,GAAKA,EAAK,eAAiB,QACtF,EAEiB,QAASwH,GAAQ,QAC5B9I,EAAA4I,EAAS,QAAT,MAAA5I,EAAgB,mBAAmB8I,EAAK,GACzC,CAAA,CACF,CAAA,CACH,EACME,EAAsBtK,EAAI,IAAI,EAE9BuK,EAAmBrH,GAAU,CACjC,MAAMsH,EAAQtH,EAAM,OAChBoH,EAAoB,OAASA,EAAoB,QAAUE,GAC7DF,EAAoB,MAAM,MAAO,EAEnCA,EAAoB,MAAQE,CAC9B,EAGMpH,EAAwBC,GAAc,CAEtCA,GAAA,MAAAA,EAAW,QACbf,EAAkB,MAAQe,EAC1Bd,EAAoB,MAAQc,EAAU,IAAKT,GAASA,EAAK,UAAU,IAEnEN,EAAkB,MAAQ,CAAA,EAC1BC,EAAoB,MAAQ,CAAA,GAE9BO,EAAuB,CACzB,EACM2H,EAAmBC,GAAc,OAErC,GAAIA,EAAU,OAAS,GAEjBpI,EAAkB,MAAM,OAAS5C,EAAM,SAAU,EAEnD4B,EAAA4I,EAAS,QAAT,MAAA5I,EAAgB,iBAEhB4G,GAAU,QAAQ,cAAcxI,EAAM,QAAQ,SAAS,EACvD,MACN,CAEA,EAEM4D,EAAyBC,GAAU,CAEvC,MAAMC,EAAaD,EAAM,IAAKX,GAASA,EAAK,UAAU,EAEtDL,EAAoB,MAAQ,MAAM,KAChC,IAAI,IAAI,CAAC,GAAGA,EAAoB,MAAO,GAAGiB,CAAU,CAAC,CACzD,EAAI,OAAQT,GAEJrD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EAC/CS,EAAW,SAAST,CAAE,EAGxB,EACR,EACDT,EAAkB,MAAQC,EAAoB,MAC3C,IAAKQ,GAAO,CACX,MAAMJ,EAAWjD,EAAM,SAAS,KAAMkD,GAASA,EAAK,aAAeG,CAAE,EACrE,OAAOJ,GAAsBL,EAAkB,MAAM,KAAMM,GAASA,EAAK,aAAeG,CAAE,CAC3F,CAAA,EACA,OAAQH,GAASA,GAAQA,EAAK,UAAU,EAE3CR,EAAK,mBAAoBE,EAAkB,KAAK,CAClD,EAEMmB,EAAW,CAACC,EAAIC,IAAU,CAC9B,IAAIC,EAAQ,KACZ,OAAO,YAAaC,EAAM,CACpBD,GAAO,aAAaA,CAAK,EAC7BA,EAAQ,WAAW,IAAM,CACvBF,EAAG,MAAM,KAAMG,CAAI,CACzB,EAAOF,CAAK,CACZ,CACA,EAEMG,EAAY9D,EAAI,EAAK,EACrB+D,EAAeN,EAAUO,GAAM,CACnC,KAAM,CAAE,UAAAC,EAAW,aAAAC,EAAc,aAAAC,CAAY,EAAKH,EAAE,OAChD,KAAK,IAAIE,EAAeD,EAAYE,CAAY,GAAK,GAAK,CAACL,EAAU,QACvEA,EAAU,MAAQ,GAClB1B,EAAK,QAAQ,EAEb,WAAW,IAAM,CACf0B,EAAU,MAAQ,EACxB,EAAO,GAAI,EAEX,EAAG,GAAG,EAGAM,EAAqBC,GAAW,CACpCjC,EAAK,eAAgBiC,CAAM,CAC7B,EAGA,OAAAC,GACE,IAAM5E,EAAM,aACX6E,GAAW,CACNA,GAAA,MAAAA,EAAQ,SAEVjC,EAAkB,MAAQiC,EAC1BhC,EAAoB,MAAQgC,EAAO,IAAK3B,GAASA,EAAK,UAAU,EAChEE,EAAuB,EAE1B,EACD,CAAE,UAAW,EAAI,CACnB,EAGAwB,GACE,IAAM5E,EAAM,SACZ,IAAM,CAEJoD,EAAuB,CAC3B,CACA,EAEA0B,EAAa,CACX,qBAAApB,EACA,eAAAP,CACF,CAAC,+nDChKD,MAAMT,EAAOC,EAEP3C,EAAQD,EAcdS,GAAU,IAAM,CAAE,CAAA,EAClB,MAAM+F,EAAmBjG,EAAI,IAAI,EAC3BkG,EAAalG,EAAI,IAAI,EACrB2K,EAAY3K,EAAI,EAAE,EAClBmG,EAAenG,EAAI,CACvB,IAAK,CAAA,CACP,CAAC,EAEKoG,EAAiB3D,GAAS,KACvB,CACL,IAAK/C,EAAM,QACf,EACC,EAGKkL,EAAcjD,GAAS,CAC3B,KAAM,EACN,UAAW,GACX,aAAc,QACd,UAAW,GACb,CAAC,EACKtB,EAAsBrG,EAAI,MAAM,EAChC6K,EAAe,CAAC,CAAE,MAAO,OAAQ,MAAO,KAAO,CAAA,EAC/CC,EAAkB9K,EAAI,EAAK,EAC3ByG,EAAYzG,EAAI,KAAK,EACrB+K,EAAe/K,EAAI,EAAK,EAExB2G,EAAgB3G,EAAI,CAAC,EAErB4G,EAAgBnE,GAAS,CAC7B,IAAK,IAAM/C,EAAM,QACjB,IAAMmH,GAAQzE,EAAK,iBAAkByE,CAAG,CAC1C,CAAC,EAGKvD,EAAyBC,GAAU,CACvC4C,EAAa,MAAMM,EAAU,KAAK,EAAIlD,EAClC0C,EAAiB,OAECA,EAAiB,MAAM,oBAAoBQ,EAAU,KAAK,GAG5ER,EAAiB,MAAM,eAAeQ,EAAU,KAAK,CAG3D,EAGMM,EAAiB,CAACnE,EAAM8B,IAAS,CAErCyB,EAAa,MAAMzB,CAAI,EAAIyB,EAAa,MAAMzB,CAAI,EAAE,OACjDsC,GAAMA,EAAE,aAAepE,EAAK,UACjC,EAEM8B,GAAQ+B,EAAU,OAChBP,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMzB,CAAI,CAAC,CAGpE,EACMN,EAAoB,MAAOC,GAAW,CAE1C,MAAM4C,EACJ2D,EAAY,YAAc,IACtB,IAAMvG,EAAO,aACb,GAAGuG,EAAY,SAAS,IAAIvG,EAAO,YAAY,GACrDuG,EAAY,UAAY3D,EACxB7B,GAAY,MAAQ6B,EAEpBE,GAAW,MAAQ,EACnB6D,GAAU,MAAQ,EAClB,MAAM3D,EAAoB,EAC1BC,GAAyB,CAC3B,EACMC,EAAgB,IAAM,CAC1BnF,EAAK,UAAW+D,EAAa,KAAK,EAClCS,EAAc,MAAQ,EACxB,EAEMY,EAAe,IAAM,CACzBrB,EAAa,MAAQ,CACnB,IAAK,CAAA,CACT,EACMD,EAAW,OACbA,EAAW,MAAM,eAAc,CAEnC,EAEMuB,EAAoB,IAAM,CAEhC,EAEMG,EAAoB5H,EAAI,CAAC,EACzBiL,EAAmBjL,EAAI,CAAC,EAExBqH,EAAuB,MAAOS,EAAa,GAAOpD,EAAMqD,IAAa,UACzE,GAAI,CACF,GAAID,EAAY,CACd,GAAIpD,IAAS,SAAU,CACrB,MAAMsD,EAAgB,MAAMvC,GAAe,CACzC,GAAGmF,EACH,KAAM7C,EACN,aAAc,QACf,CAAA,EACD,GAAIC,EAAc,OAAS,EAAG,CAE5B,MAAMC,GAAWD,EAAc,KAAK,UAAY,IAAI,IAAKpF,IAAU,CACjE,GAAGA,EACH,SAAU,EACtB,EAAY,EACF+H,EAAU,MAAQ,CAAC,GAAGA,EAAU,MAAO,GAAG1C,CAAO,CAC3D,MACUC,GAAU,MAAMF,EAAc,SAAW,QAAQ,CAE3D,SAAiBtD,IAAS,QAAS,CAC3B,MAAMwG,EAAe,MAAMzF,GAAe,CACxC,GAAGmF,EACH,KAAM7C,EACN,aAAc,OACf,CAAA,EACD,GAAImD,EAAa,OAAS,EAAG,CAC3B,MAAMC,EAASD,EAAa,KAAK,UAAY,CAAA,EAC7CP,EAAU,MAAQ,CAAC,GAAGA,EAAU,MAAO,GAAGQ,CAAM,CAC1D,MACUjD,GAAU,MAAMgD,EAAa,SAAW,QAAQ,CAE1D,CACMJ,EAAgB,MAAQ,GACxB,MACN,CACIC,EAAa,MAAQ,GAErB,MAAM1C,EAAY,MAAM5C,GAAe,CACrC,GAAGmF,EACH,aAAc,QACf,CAAA,EAGKQ,EAAW,MAAM3F,GAAe,CACpC,GAAGmF,EACH,aAAc,OACf,CAAA,EAED,GAAIvC,EAAU,OAAS,GAAK+C,EAAS,OAAS,EAAG,CAE/C,MAAMnD,GAAWI,EAAU,KAAK,UAAY,IAAI,IAAKzF,IAAU,CAC7D,GAAGA,EACH,SAAU,EAClB,EAAQ,EACIuI,EAASC,EAAS,KAAK,UAAY,CAAA,EAEzCT,EAAU,MAAQ,CAAC,GAAG1C,EAAS,GAAGkD,CAAM,EACxCvD,EAAkB,QAAQtG,GAAA+G,EAAU,KAAK,YAAf,YAAA/G,GAA0B,eAAgB,EACpE2J,EAAiB,QAAQ1J,EAAA6J,EAAS,KAAK,YAAd,YAAA7J,EAAyB,eAAgB,CAExE,MACM2G,GAAU,MAAMG,EAAU,SAAW+C,EAAS,SAAW,QAAQ,CAEpE,OAAQ7C,EAAO,CACdL,GAAU,MAAMK,GAAS,QAAQ,CACrC,QAAY,CACRwC,EAAa,MAAQ,EACzB,CACA,EAGMtC,EAAYzI,EAAI,EAAE,EAClB0I,EAAe,SAAY,CAI/B,GAHAvB,GAAW,MAAQ,EACnB6D,GAAU,MAAQ,EAEdvC,EAAU,OAAS,IAAMmC,EAAY,aAAc,CACrD,OAAOA,EAAY,aACnB,MAAMvD,EAAoB,EAC1B,MACJ,CACEuD,EAAY,aAAenC,EAAU,MACrC,MAAMpB,EAAoB,CAC5B,EACMjC,GAAcpF,EAAI,GAAG,EAErB2I,GAAkB,MAAOnD,GAAS,CACtC2B,GAAW,MAAQ,EACnB6D,GAAU,MAAQ,EAClB5F,GAAY,MAAQI,EACpBoF,EAAY,UAAYpF,EAExB,MAAM6B,EAAoB,EAC1BC,GAAyB,CAC3B,EACMA,GAA4B,IAAM,CACtC,MAAM+D,EAAWV,EAAU,MAAM,OAAQ/H,GAAS,CAACA,EAAK,QAAQ,EAAE,IAAKA,GAASA,EAAK,UAAU,EAC/F,GAAIyI,EAAS,SAAW,EAAG,CACzBhF,EAAoB,MAAQ,OAC5B,MACJ,CAEE,MAAMwC,EAAcwC,EAAS,MAAOtI,GAClCoD,EAAa,MAAMM,EAAU,KAAK,EAAE,KAAMqC,IAAaA,GAAS,aAAe/F,CAAE,CACrF,EACEsD,EAAoB,MAAQwC,EAAc,SAAW,MACvD,EACM1B,GAAanH,EAAI,CAAC,EAClBgL,GAAYhL,EAAI,CAAC,EAEjB+D,EAAe,SAAY,CAC3BoD,GAAW,MAAQyD,EAAY,UAAYhD,EAAkB,QAC/DkD,EAAgB,MAAQ,GACxB3D,GAAW,OAAS,EACpB,MAAME,EAAqB,GAAM,SAAUF,GAAW,KAAK,GAEzD6D,GAAU,MAAQJ,EAAY,UAAYK,EAAiB,QAC7DH,EAAgB,MAAQ,GACxBE,GAAU,OAAS,EACnB,MAAM3D,EAAqB,GAAM,QAAS2D,GAAU,KAAK,EAE7D,EAGA,OAAA1G,GACE,IAAM5E,EAAM,QACZ,MAAO6E,GAAW,CAChB,GAAIA,EAAQ,CACV,MAAM8E,EAAc,KAAK,IAAG,GAExB1C,EAAc,QAAU,GAAK0C,EAAc1C,EAAc,MAAQ,EAAI,GAAK,OAC5EQ,GAAW,MAAQ,EACnB6D,GAAU,MAAQ,EAClB,MAAM3D,EAAoB,EAE1BV,EAAc,MAAQ0C,GAGpB3J,EAAM,cAAgB,OAAOA,EAAM,cAAiB,WACtDyG,EAAa,MAAQ,KAAK,MAAM,KAAK,UAAUzG,EAAM,YAAY,CAAC,EAClE4J,GAAS,IAAM,CACTpD,EAAW,OACbA,EAAW,MAAM,qBAAqBC,EAAa,MAAMM,EAAU,KAAK,CAAC,CAE5E,CAAA,EAET,CACA,CACA,EAEAnC,GACE,IAAMmC,EAAU,MACflC,GAAW,CACN2B,EAAW,OAASC,EAAa,MAAM5B,CAAM,GAC/C2B,EAAW,MAAM,qBAAqBC,EAAa,MAAM5B,CAAM,CAAC,EAElE+C,GAAyB,CAC7B,CACA,stHCwBApH,GAAU,IAAM,CACdoL,EAAiB,CACnB,CAAC,EAED,MAAMC,EAAoBvL,EAAI,CAAE,CAAA,EAE1BwL,EAAW7D,GAAS,CACxB,YAAa,GACb,qBAAsB,CAAE,EACxB,eAAgB,CAAE,EAClB,iBAAkB,CAAE,EACpB,mBAAoB,CAAE,EACtB,iBAAkB,CAAE,EACpB,mBAAoB,CAAE,EACtB,iBAAkB,CAAE,EACpB,mBAAoB,CAAE,EACtB,gBAAiB,aACjB,YAAa,CAAE,EACf,SAAU,GACV,MAAO,EACP,SAAU,EACZ,CAAC,EACK8D,EAA2BzL,EAAI,CAAE,CAAA,EACjC0L,EAAqB1L,EAAI,CAAE,CAAA,EAE3B2L,EAAkB3L,EAAI,CAC1B,IAAK,CAAE,EACP,UAAW,CAAE,EACb,WAAY,CAAE,EACd,WAAY,CAAE,EACd,WAAY,CAAA,CACd,CAAC,EACK4L,EAAkB5L,EAAI,CAC1B,IAAK,CAAE,EACP,WAAY,CAAE,EACd,WAAY,CAAA,CACd,CAAC,EACK6L,EAAkB7L,EAAI,CAC1B,IAAK,CAAA,CACP,CAAC,EACK8L,EAAc9L,EAAI,KAAK,EACvByI,EAAYzI,EAAI,EAAE,EAElB+L,EAAY,CAChB,YAAa,CAAC,CAAE,SAAU,GAAM,QAAS,UAAW,QAAS,OAAQ,EACrE,qBAAsB,CAAC,CAAE,SAAU,GAAM,QAAS,UAAW,QAAS,OAAQ,EAC9E,gBAAiB,CAAC,CAAE,SAAU,GAAM,QAAS,UAAW,QAAS,MAAQ,CAAA,CAC3E,EACMC,EAAUhM,EAAI,EAAK,EACnB8H,EAAa9H,EAAI,EAAK,EACtBiM,EAAQjM,EAAI,CAAC,EACbkM,EAAUlM,EAAI,IAAI,EAClBmM,EAAanM,EAAI,EAAK,EAEtBoM,EAAqBpM,EAAI,EAAK,EAC9BqM,EAAqBrM,EAAI,EAAK,EAC9BsM,EAAqBtM,EAAI,EAAK,EAE9BuM,EAAevM,EAAI,CAAE,CAAA,EAErBwM,EAAkB,CACtB,CAAE,MAAO,QAAS,MAAO,OAAS,EAClC,CAAE,MAAO,OAAQ,MAAO,MAAQ,EAChC,CAAE,MAAO,OAAQ,MAAO,MAAQ,EAChC,CAAE,MAAO,OAAQ,MAAO,MAAM,CAChC,EACMC,EAAY,CAChB,CAAE,MAAO,KAAM,MAAO,KAAO,EAC7B,CAAE,MAAO,MAAO,MAAO,SAAW,EAClC,CAAE,MAAO,MAAO,MAAO,SAAW,EAClC,CAAE,MAAO,MAAO,MAAO,OAAS,EAChC,CAAE,MAAO,OAAQ,MAAO,UAAU,CACpC,EACMC,EAAoBxJ,GAAU,CAClC,MAAMyJ,EAAQzJ,EAAM,OAChByJ,IACFA,EAAM,MAAQ,GACdA,EAAM,cAAc,IAAI,MAAM,OAAO,CAAC,EAE1C,EAEMC,EAAwB,CAAClI,EAAMyB,IAAiB,CACpD,MAAM0G,EAAY,CAAA,EAClB,SAAW,CAACC,EAAO3M,EAAK,IAAK,OAAO,QAAQgG,CAAY,EACtD0G,EAAUC,CAAK,EAAI3M,GAAM,IAAKyC,IAASA,GAAK,UAAU,EAExD,MAAMmK,EAAmB,OAAO,OAAO5G,CAAY,EAAE,KAAI,EACzD,OAAQzB,EAAI,CACV,IAAK,QACH0H,EAAmB,MAAQ,GAC3BT,EAAgB,MAAQxF,EACxBqF,EAAS,iBAAmBqB,EAC5BrB,EAAS,mBAAqBuB,EAAiB,IAAKnK,GAASA,EAAK,YAAY,GAAK,CAAA,EACnF,MACF,IAAK,QACHyJ,EAAmB,MAAQ,GAC3BT,EAAgB,MAAQzF,EACxBqF,EAAS,iBAAmBqB,EAC5BrB,EAAS,mBAAqBuB,EAAiB,IAAKnK,GAASA,EAAK,YAAY,GAAK,CAAA,EACnF,MACF,IAAK,QACH0J,EAAmB,MAAQ,GAC3BT,EAAgB,MAAQ1F,EACxBqF,EAAS,iBAAmBqB,EAC5BrB,EAAS,mBAAqBuB,EAAiB,IAAKnK,GAASA,EAAK,YAAY,GAAK,CAAA,EACnF,KACN,CACA,EACMoK,EAAarF,GAAS,CAC1B,KAAM,GACN,KAAM,EACN,UAAW,CACb,CAAC,EAEK2D,EAAoB,MAAO2B,EAAW,KAAU,CAChDA,EACFnF,EAAW,MAAQ,GAEnBkE,EAAQ,MAAQ,GAElB,GAAI,CACF,MAAMkB,EAAM,MAAMpH,GAAYkH,CAAU,EACxC,GAAIE,EAAI,OAAS,EACXD,EACF1B,EAAkB,MAAQ,CAAC,GAAGA,EAAkB,MAAO,GAAG2B,EAAI,KAAK,IAAI,EAEvE3B,EAAkB,MAAQ2B,EAAI,KAAK,KAErCjB,EAAM,MAAQiB,EAAI,KAAK,MAED3B,EAAkB,MAAM,KAC3C4B,GACCA,EAAM,SAAW,WAAcA,EAAM,QAAUA,EAAM,OAAO,SAAW,YACjF,GAC2B,CAACC,GAEpB,WAAW,IAAM,CACfC,GAAmB,CAC7B,EAAW,GAAI,MAGT,OAAM,IAAI,MAAMH,EAAI,OAAO,CAE9B,MAAe,CACdhF,GAAU,MAAM,UAAU,CAC9B,QAAY,CACR8D,EAAQ,MAAQ,GAChBlE,EAAW,MAAQ,EACvB,CACA,EACA,IAAIsF,EAAc,KAClB,MAAME,EAAa3F,GAAS,CAC1B,KAAM,EACN,UAAW,CACb,CAAC,EACK0F,GAAsB,SAAY,CACtC,GAAI,CAEF,MAAME,EAAiBhC,EAAkB,MACtC,OACE4B,GACCA,EAAM,SAAW,WAAcA,EAAM,QAAUA,EAAM,OAAO,SAAW,YACjF,EACO,IAAKA,GAAUA,EAAM,EAAE,EAE1B,GAAII,EAAe,SAAW,EAC5B,OAEF,MAAMC,EAAU,MAAM1H,GAAYwH,CAAU,EACxCE,EAAQ,OAAS,GAEnBjC,EAAkB,MAAQA,EAAkB,MAAM,IAAK4B,GAAU,CAC/D,GAAII,EAAe,SAASJ,EAAM,EAAE,EAAG,CACrC,MAAMM,EAAeD,EAAQ,KAAK,KAAK,KAAME,IAAMA,GAAE,KAAOP,EAAM,EAAE,EACpE,GAAIM,EAAc,CAEhB,GACEN,EAAM,QACNA,EAAM,OAAO,aACbM,EAAa,QACbA,EAAa,OAAO,YACpB,CAEA,MAAME,GAAoB,KAAK,MAAM,KAAK,UAAUF,EAAa,OAAO,WAAW,CAAC,EAGpF,QAASzG,GAAI,EAAGA,GAAI2G,GAAkB,OAAQ3G,KAAK,CACjD,MAAM4G,GAAUT,EAAM,OAAO,YAAYnG,EAAC,EACtC4G,IAAWA,GAAQ,YACrBD,GAAkB3G,EAAC,EAAE,UAAY4G,GAAQ,UAE3D,CAGcH,EAAa,OAAO,YAAcE,EAChD,CACY,OAAOF,CACnB,CACU,OAAON,CACjB,CACQ,OAAOA,CACR,CAAA,EAGuB5B,EAAkB,MAAM,KAC7C4B,GACCA,EAAM,SAAW,WAAcA,EAAM,QAAUA,EAAM,OAAO,SAAW,YACjF,IAEQC,EAAc,WAAWC,GAAqB,GAAI,IAGpDnF,GAAU,MAAMsF,EAAQ,OAAO,CAElC,OAAQjF,EAAO,CACd,QAAQ,MAAM,QAASA,CAAK,CAChC,CACA,EAEMsF,GAAgB,IAAM,CAC1Bb,EAAW,KAAO,EAClB1B,EAAkB,EAAK,CACzB,EAEMvH,GAAgBC,GAAM,CAC1B,KAAM,CAAE,UAAAC,EAAW,aAAAC,EAAc,aAAAC,CAAY,EAAKH,EAAE,OAEhDE,EAAeD,GAAaE,EAAe,IAE3C,CAAC6H,EAAQ,OACT,CAAClE,EAAW,OACZkF,EAAW,KAAOA,EAAW,UAAYf,EAAM,QAE/Ce,EAAW,MAAQ,EACnB1B,EAAkB,EAAI,EAG5B,EACMwC,GAAavK,GAAU,CAC3BuI,EAAY,MAAQvI,EACpByJ,EAAW,KAAO,EAClBA,EAAW,OAASzJ,EACpB+H,EAAiB,CACnB,EAEM5C,GAAe,IAAM,CACzBsE,EAAW,KAAO,EAClBA,EAAW,KAAOvE,EAAU,MAC5B6C,EAAiB,CACnB,EACMyC,EAAqB/N,EAAI,CAAE,CAAA,EAE3BgO,EAAiB,IAAM,CAC3BC,EAAc,EAEdC,GAAoB,CAAC,aAAc,YAAY,EAAG1C,EAAS,iBAAkBuC,CAAkB,EAC/F3B,EAAmB,MAAQ,EAC7B,EACM+B,EAAqBnO,EAAI,CAAE,CAAA,EAE3BoO,EAAc,IAAM,CACxBH,EAAc,EACdC,GAAoB,CAAC,aAAc,YAAY,EAAG1C,EAAS,iBAAkB2C,CAAkB,EAC/F9B,EAAmB,MAAQ,EAC7B,EAEM6B,GAAsB,CAACpB,EAAOuB,EAAWC,IAAmB,CAChExB,EAAM,QAASpI,GAAS,OACtB,KAAIpD,EAAA+M,GAAA,YAAAA,EAAY3J,KAAZ,YAAApD,EAAmB,QAAS,EACzBgN,EAAe,MAAM,SAAS5J,CAAI,GACrC4J,EAAe,MAAM,KAAK5J,CAAI,MAE3B,CACL,MAAMQ,GAAQoJ,EAAe,MAAM,QAAQ5J,CAAI,EAC3CQ,GAAQ,IACVoJ,EAAe,MAAM,OAAOpJ,GAAO,CAAC,CAE5C,CACG,CAAA,CACH,EAEMqJ,EAAc,IAAM,CACxBN,EAAc,EACd3B,EAAmB,MAAQ,EAC7B,EAEMkC,EAAyB,IAAM,CACnC,GAAI,CAAChD,EAAS,gBACZ,MAAO,WAIT,IAAIiD,EAAUjD,EAAS,gBACvB,MAAMkD,EAAclD,EAAS,aAAe,MACtCmD,EAAQ,IAAI,KACZC,EAAU,GAAGD,EAAM,YAAa,CAAA,IAAIA,EAAM,SAAQ,EAAK,GAC1D,SAAQ,EACR,SAAS,EAAG,GAAG,CAAC,GAAGA,EAAM,UAAU,WAAW,SAAS,EAAG,GAAG,CAAC,GAC3DE,EAAU,GAAGF,EAAM,SAAU,EAAC,SAAU,EAAC,SAAS,EAAG,GAAG,CAAC,GAAGA,EAC/D,WAAU,EACV,SAAQ,EACR,SAAS,EAAG,GAAG,CAAC,GAEnB,OAAAF,EAAUA,EACP,QAAQ,SAAUC,CAAW,EAC7B,QAAQ,QAAS,KAAK,EACtB,QAAQ,QAASE,CAAO,EACxB,QAAQ,QAASC,CAAO,EAEpBJ,CACT,EAGMK,EAAwBC,GAAa,CACzCvD,EAAS,iBAAmBuD,CAC9B,EACM/L,EAAsBhD,EAAI,IAAI,EAE9BiD,EAAcC,GAAU,CAC5B,MAAMC,EAAQD,EAAM,OAChBF,EAAoB,OAASA,EAAoB,QAAUG,GAC7DH,EAAoB,MAAM,MAAK,EAEjCA,EAAoB,MAAQG,CAC9B,EACM8K,EAAiB,IAAM,CACZ,SAAS,iBAAiB,OAAO,EACzC,QAAS9K,GAAU,CACnBA,EAAM,QACTA,EAAM,MAAK,CAEd,CAAA,CACH,EAEM6L,GAAe,SAAY,CAC3B7C,EAAW,OACfD,EAAQ,MAAM,SAAS,MAAO+C,GAAU,oDACtC,GAAI,CAACA,EAAO,CACV/G,GAAU,MAAM,SAAS,EACzB,MACN,CAEI,IACG,GAAC5G,EAAAkK,EAAS,mBAAT,MAAAlK,EAA2B,MAAOkK,EAAS,iBAAiB,IAAI,SAAW,KAC5E,GAACjK,EAAAiK,EAAS,mBAAT,MAAAjK,EAA2B,MAAOiK,EAAS,iBAAiB,IAAI,SAAW,GAC7E,CACAtD,GAAU,MAAM,sBAAsB,EACtCiE,EAAW,MAAQ,GACnB,MACN,CACIA,EAAW,MAAQ,GAEnB,MAAM+C,EAAe,CACnB,aAAc,CAEZ,aAAc1D,EAAS,YACvB,uBAAwBA,EAAS,qBACjC,eAAgBA,EAAS,cAC1B,EACD,MAAOA,EAAS,MAChB,oBAAmB2D,EAAA3D,EAAS,mBAAT,YAAA2D,EAA2B,MAAO,CAAE,EACvD,oBAAmBC,GAAA5D,EAAS,mBAAT,YAAA4D,GAA2B,MAAO,CAAE,EACvD,kBAAmB,CACjB,wBAAuBC,GAAA7D,EAAS,mBAAT,YAAA6D,GAA2B,YAAa,CAAE,EACjE,yBAAwBC,GAAA9D,EAAS,mBAAT,YAAA8D,GAA2B,aAAc,CAAE,EAEnE,wBACEC,IAAAC,GAAAhE,EAAS,mBAAT,YAAAgE,GAA2B,aAA3B,YAAAD,GAAwC,OACxCE,IAAAC,GAAAlE,EAAS,mBAAT,YAAAkE,GAA2B,aAA3B,YAAAD,GAAwC,KACxC,KAEF,wBACEE,IAAAC,GAAApE,EAAS,mBAAT,YAAAoE,GAA2B,aAA3B,YAAAD,GAAwC,OACxCE,IAAAC,GAAAtE,EAAS,mBAAT,YAAAsE,GAA2B,aAA3B,YAAAD,GAAwC,KACxC,IACH,EACD,aAAc,CACZ,iBAAgBE,GAAAvE,EAAS,mBAAT,YAAAuE,GAA2B,MAAO,CAAE,CACrD,EACD,UAAWvE,EAAS,SACpB,UAAWA,EAAS,eAC1B,EAEI,GAAI,CAEF,MAAM0B,GAAM,MAAMtH,GAAWsJ,CAAY,EACzC,GAAIhC,GAAI,OAAS,EACfhF,GAAU,QAAQ,QAAQ,EAE1B,WAAW,SAAY,CACrB,GAAI,CAEF,MAAM8H,GAAa,CAAE,GAAGhD,EAAY,KAAM,EAAG,UAAW,EAAE,EACpDiD,GAAa,MAAMnK,GAAYkK,EAAU,EAC/C,GAAIC,GAAW,OAAS,EAAG,CAEzB,MAAMC,GAAWD,GAAW,KAAK,KAAK,OAAQE,IAErC,CAAC5E,EAAkB,MAAM,KAAM6E,IAAaA,GAAS,KAAOD,GAAK,EAAE,CAC3E,EAEGD,GAAS,OAAS,IACpB3E,EAAkB,MAAQ,CAAC,GAAG2E,GAAU,GAAG3E,EAAkB,KAAK,EAElEU,EAAM,MAAQA,EAAM,MAAQiE,GAAS,QAGjBA,GAAS,KAC5B/C,IACCA,GAAM,SAAW,WAChBA,GAAM,QAAUA,GAAM,OAAO,SAAW,YAC3D,GAEgB,WAAW,IAAM,CACfE,GAAmB,CACrC,EAAmB,GAAI,CAEvB,MACcnF,GAAU,MAAM+H,GAAW,OAAO,CAErC,OAAQ1H,GAAO,CACd,QAAQ,MAAM,WAAYA,EAAK,CAC3C,CACA,EAAW,GAAI,MAEP,OAAM,IAAI,MAAM2E,GAAI,OAAO,CAE9B,OAAQ3E,GAAO,CACd,QAAQ,MAAM,UAAWA,EAAK,EAC9BL,GAAU,MAAM,cAAcmI,IAAAC,EAAA/H,GAAM,WAAN,YAAA+H,EAAgB,OAAhB,YAAAD,GAAsB,QAAS9H,GAAM,QAAQ,CACjF,QAAc,CACR4D,EAAW,MAAQ,EACzB,CACG,CAAA,CACH,EAEMoE,GAAoBpD,GAEYZ,EAAa,MAAM,OAAQiE,GACtDrD,EAAM,OAAO,YAAY,KAAMsD,GAAcA,EAAU,WAAaD,EAAY,QAAQ,CAChG,EACkC,OAAS,EAGxCE,GAAa,MAAO9N,GAAS,CAEjC,MAAM+N,EAAiBpE,EAAa,MACjC,OAAQqE,GACPhO,EAAK,OAAO,YAAY,KAAMO,GAAUA,EAAM,WAAayN,EAAQ,QAAQ,CACjF,EACK,IAAKA,GAAYhO,EAAK,OAAO,YAAY,KAAMO,GAAUA,EAAM,WAAayN,EAAQ,QAAQ,CAAC,EAEhG,GAAI,CACF,MAAM1D,EAAM,MAAMnH,GAAa,CAC7B,QAASnD,EAAK,QACd,UAAW+N,EAAe,IAAKxN,GAAUA,EAAM,QAAQ,CACxD,CAAA,EACD,GAAI+J,EAAI,OAAS,EACfhF,GAAU,QAAQ,MAAM,EACxBqD,EAAkB,MAAQA,EAAkB,MAAM,IAAK4B,GACjDA,EAAM,UAAYvK,EAAK,QAClB,CAAE,GAAGuK,EAAO,OAAQ,OAAO,EAE7BA,CACR,MAED,OAAM,IAAI,MAAMD,EAAI,OAAO,CAE9B,OAAQ3E,EAAO,CACdL,GAAU,MAAM,SAAWK,EAAM,OAAO,CAC5C,CACA,EACMsI,EAAY,IAAM,CACtB3E,EAAQ,MAAM,YAAW,EAEzBP,EAAgB,MAAQ,CAAE,IAAK,CAAE,EAAE,UAAW,GAAI,WAAY,CAAA,EAAI,WAAY,CAAE,EAAE,WAAY,CAAE,CAAA,EAChGC,EAAgB,MAAQ,CAAE,IAAK,CAAE,EAAE,WAAY,CAAA,EAAI,WAAY,CAAE,CAAA,EACjEC,EAAgB,MAAQ,CAAE,IAAK,CAAE,CAAA,EACjCL,EAAS,iBAAmB,CAAA,EAC5BA,EAAS,mBAAqB,CAAA,EAC9BA,EAAS,iBAAmB,CAAA,EAC5BA,EAAS,mBAAqB,CAAA,EAC9BA,EAAS,iBAAmB,CAAA,EAC5BA,EAAS,mBAAqB,CAAA,CAChC,EAEAsF,GAAY,IAAM,CACZ1D,IACF,aAAaA,CAAW,EACxBA,EAAc,KAElB,CAAC,EACD,MAAM2D,GAAoB,SAAY,CACpC,GAAKvF,EAAS,YAEd,GAAI,CACF,MAAM0B,EAAM,MAAMlH,GAAe,CAAE,aAAcwF,EAAS,WAAa,CAAA,EACvE,GAAI0B,EAAI,OAAS,GAAKA,EAAI,KAAM,CAE9B,MAAM8D,EAAgB9D,EAAI,KAAK,wBAA0B,CAAA,EACnD+D,EAAgB/D,EAAI,KAAK,gBAAkB,CAAA,EAGjDzB,EAAyB,MAAQ,CAC/B,GAAG,IAAI,IAAI,CAAC,GAAGD,EAAS,qBAAsB,GAAGwF,CAAa,CAAC,CACvE,EAEMtF,EAAmB,MAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,GAAGF,EAAS,eAAgB,GAAGyF,CAAa,CAAC,CAAC,CAC5F,CACG,OAAQ1I,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,CACpC,CACA,EASA,OAAAjE,GACE,IAAMkH,EAAS,aATA,CAAC9H,EAAIC,EAAQ,MAAQ,CACpC,IAAIuN,EACJ,MAAO,IAAIrN,IAAS,CAClB,aAAaqN,CAAS,EACtBA,EAAY,WAAW,IAAMxN,EAAG,MAAM,KAAMG,CAAI,EAAGF,CAAK,CAC5D,CACA,GAIYY,GAAW,CACfA,GACFwM,GAAiB,CAEvB,EAAK,GAAG,CACR,EAEAzM,GACE,IAAMkH,EAAS,qBACd2F,GAAa,CAEZA,EAAS,QAAKvO,GAAA,CACd6I,EAA4B,MAAA,SAAA7I,CAAA,GACxB6I,QAA4B,KAAc7I,CAAA,CAE7C,CAAA,CACL,CACA,EAEA0B,GACA,IAAMkH,EAAA,eACH2F,GAAa,CAEZA,EAAS,QAAKvO,GAAA,CACd8I,EAA0B,MAAE,SAAA9I,CAAA,GACxB8I,QAAsB,KAAc9I,CAAA,CAEvC,CAAA,CACL,CACA,EAEA0B,GACA,IAAMkH,EAAA,MACH4F,GAAa,CAEZ,SAAW,CAACC,EAAAC,CAAA,IAAA,OAAA,QAAA9F,EAAA,gBAAA,EACT,IAAE6F,GAAgB,aAAgBA,GAAiB,eAAiBC,EAAA,OAAIF,EAAA,CACvE,QAAiB,OAAS,KAAK,SAAW,WAAc,EACxD5F,EAAM,iBAAoB6F,CAAS,EAAMjI,EAAO,MAAM,EAAGgI,CAAA,EAErDzF,EAAmB,MAAA0F,CAAA,IACrB1F,EAAE,MAAqB0F,GAAY1F,EAAE,MAAA0F,CAAA,EAAA,OAAAlO,GACtBqI,EAAA,kBAAmC,EAAA,SAAArI,EAAM,WAClE,GAGQqI,EAAwB,mBAAA,OAAA,OAAAG,EAAA,KAAA,SAErB,IAAK/I,GAACA,EAAA,YAAA,CACjB,CAEA,CACA,4mRCp0BA1C,GAAU,IAAM,CACdmH,EAAoB,CACtB,CAAC,EAED,MAAM2E,EAAUhM,EAAI,EAAK,EACnByI,EAAYzI,EAAI,EAAE,EAClBwG,EAAexG,EAAI,EAAE,EACrBuR,EAAYvR,EAAI,OAAO,EACvBoF,EAAcpF,EAAI,GAAG,EACrBwR,EAAgB/O,GAAS,IACzB8O,EAAU,QAAU,QACf,CACL,CAAE,MAAO,OAAQ,MAAO,KAAO,EAC/B,CAAE,MAAO,KAAM,MAAO,WAAa,EACnC,CAAE,MAAO,KAAM,MAAO,YAAc,EACpC,CAAE,MAAO,KAAM,MAAO,YAAc,EACpC,CAAE,MAAO,KAAM,MAAO,YAAY,CACxC,EACaA,EAAU,QAAU,QACtB,CACL,CAAE,MAAO,OAAQ,MAAO,KAAO,EAC/B,CAAE,MAAO,KAAM,MAAO,YAAc,EACpC,CAAE,MAAO,KAAM,MAAO,YAAY,CACxC,EAES,CAAA,CACR,EACK5I,EAAkB,MAAOnD,GAAS,CACtCJ,EAAY,MAAQI,EACpBE,EAAO,UAAYF,EAEnB,MAAM6B,EAAoB,CAC5B,EAEMoK,EAAkBC,GAAQ,CAG9BC,EAAW,YAAc,EACzBjM,EAAO,KAAO,EACd2B,EAAoB,CACtB,EAEMjD,EAAoB,MAAOC,GAAW,CAG1C,MAAM4C,EACJvB,EAAO,YAAc,IACjB,IAAMrB,EAAO,aACb,GAAGqB,EAAO,SAAS,IAAIrB,EAAO,YAAY,GAChDqB,EAAO,UAAYuB,EACnB7B,EAAY,MAAQ6B,EACpB,MAAMI,EAAoB,CAC5B,EAEM7E,EAAoBxC,EAAI,CAAE,CAAA,EAE1B2R,EAAahK,GAAS,CAC1B,SAAU,GACV,YAAa,EACb,MAAO,CACT,CAAC,EAEKa,EAAqB,MAAOjF,GAAU,CACtCA,EACFmC,EAAO,OAASnC,EAEhB,OAAOmC,EAAO,OAEhBA,EAAO,KAAO,EACd,MAAM2B,EAAoB,CAC5B,EAEMuK,EAAoBC,GAAS,CACjCF,EAAW,SAAWE,EACtBF,EAAW,YAAc,EACzBjM,EAAO,UAAYmM,EACnBnM,EAAO,KAAO,EAEd,WAAW,IAAM,CACf2B,EAAoB,CACxB,EAAK,EAAE,CACP,EAEMyK,EAAoBC,GAAS,CACjCrM,EAAO,KAAOqM,EACdJ,EAAW,YAAcI,EACzB1K,EAAoB,CACtB,EAEM3B,EAASiC,GAAS,CACtB,KAAM,EACN,UAAW,GACX,aAAc,QACd,UAAW,GACb,CAAC,EAEKN,EAAuB,SAAY,CACvC2E,EAAQ,MAAQ,GAEhB,GAAI,CAEF,MAAM3D,EAAY,MAAM5C,GAAe,CACrC,GAAGC,EACH,aAAc,QACf,CAAA,EAGK4C,EAAW,MAAM7C,GAAe,CACpC,GAAGC,EACH,aAAc6L,EAAU,KACzB,CAAA,EACD,GAAIlJ,EAAU,OAAS,GAAKC,EAAS,OAAS,EAAG,CAE/C,MAAML,GAAWI,EAAU,KAAK,UAAY,IAAI,IAAKzF,IAAU,CAC7D,GAAGA,EACH,SAAU,EAClB,EAAQ,EACIwF,EAASE,EAAS,KAAK,UAAY,CAAA,EAEzC9F,EAAkB,MAAQ,CAAC,GAAGyF,EAAS,GAAGG,CAAM,EAChDuJ,EAAW,MAAQrJ,EAAS,KAAK,UAAU,YACjD,KACM,OAAM,IAAI,MAAM,IAAI,OAAO,CAE9B,MAAe,CACdJ,GAAU,MAAM,UAAU,CAC9B,QAAY,CACR8D,EAAQ,MAAQ,EACpB,CACA,EAEMtD,EAAe,IAAM,CACrBD,EAAU,OAAS,GACjB,iBAAkB/C,IACpB,OAAOA,EAAO,aACd2B,EAAoB,IAGtB3B,EAAO,aAAe+C,EAAU,MAChCpB,EAAoB,EAExB,EACMrE,EAAsBhD,EAAI,IAAI,EAE9BiD,EAAcC,GAAU,CAC5B,MAAMC,EAAQD,EAAM,OAChBF,EAAoB,OAASA,EAAoB,QAAUG,GAC7DH,EAAoB,MAAM,MAAK,EAEjCA,EAAoB,MAAQG,CAC9B,4uFCtPA,MAAMoO,EAAYvR,EAAI,YAAY,EAG5ByR,EAAkBlO,GAAU,CAChCgO,EAAU,MAAQhO,CACpB,EAEA,OAAArD,GAAU,IAAM,CAEhB,CAAC","x_google_ignoreList":[0,1,2,3,4,5]}