{"version":3,"file":"TemplateLibrary-D3cp7Ay8.js","sources":["../../src/pages/ImageAIGenerator/components/TemplateLibrary.vue"],"sourcesContent":["<template>\r\n  <div class=\"template-library-container\">\r\n    <!-- 整体两栏布局 -->\r\n    <div class=\"resource-layout\">\r\n      <!-- 左侧标签列表 -->\r\n      <div class=\"left-panel\">\r\n        <div class=\"my-tags-header\">\r\n          <h3>模板分类</h3>\r\n          <!-- 添加新分类按钮 -->\r\n          <div class=\"add-category-btn\" @click=\"showAddTagDialog = true\">\r\n            <el-icon><Plus /></el-icon>\r\n            <span>新建</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"my-tags-list\">\r\n          <div\r\n            class=\"tag-item all-tag\"\r\n            :class=\"{ active: activeTag === 'all' }\"\r\n            @click=\"handleTagClick('all')\"\r\n          >\r\n            <span class=\"tag-icon\"></span>\r\n            <span class=\"tag-name\">全部模板</span>\r\n          </div>\r\n          <div\r\n            v-for=\"(item, index) in templateTags\"\r\n            :key=\"index\"\r\n            class=\"tag-item\"\r\n            :class=\"{ active: activeTag === item.value }\"\r\n            @click=\"handleTagClick(item.value)\"\r\n          >\r\n            <span class=\"tag-icon\"></span>\r\n            <span class=\"tag-name\">{{ item.label }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧主内容区 -->\r\n      <div class=\"right-panel\">\r\n        <!-- 顶部菜单和操作按钮 -->\r\n        <div class=\"top-controls\">\r\n          <div class=\"title-area\">\r\n            <h2 class=\"material-title\">\r\n              模板库\r\n            </h2>\r\n          </div>\r\n          <div class=\"action-buttons\">\r\n            <el-button class=\"add-material-btn\" @click=\"handleAdd\">\r\n              <el-icon><Plus /></el-icon> 添加模板\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 关键字搜索 -->\r\n        <div class=\"keyword-search\">\r\n          <el-input\r\n            v-model=\"searchKey\"\r\n            placeholder=\"搜索模板...\"\r\n            clearable\r\n            @clear=\"handleSearch\"\r\n            @keyup.enter=\"handleSearch\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Search /></el-icon>\r\n            </template>\r\n          </el-input>\r\n        </div>\r\n\r\n        <!-- 素材列表展示区 -->\r\n        <div class=\"materials-display\" v-loading=\"loading\">\r\n          <div class=\"template-grid\">\r\n            <div \r\n              v-for=\"(template, index) in filteredTemplates\" \r\n              :key=\"index\"\r\n              class=\"template-item\"\r\n            >\r\n              <div class=\"template-image-container\" @click=\"editTemplate(template)\">\r\n                <img :src=\"processImageUrl(template.previewImage)\" alt=\"模板预览\" class=\"template-image\" />\r\n                <div class=\"template-actions\">\r\n                  <el-button size=\"small\" type=\"primary\" circle @click.stop=\"editTemplate(template)\">\r\n                    <el-icon><Edit /></el-icon>\r\n                  </el-button>\r\n                  <el-button size=\"small\" type=\"danger\" circle @click.stop=\"confirmDeleteTemplate(template)\">\r\n                    <el-icon><Delete /></el-icon>\r\n                  </el-button>\r\n                </div>\r\n              </div>\r\n              <div class=\"template-info\">\r\n                <div class=\"template-name\">{{ template.name }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 空状态 -->\r\n          <div v-if=\"filteredTemplates.length === 0\" class=\"empty-state\">\r\n            <el-empty description=\"暂无模板\"></el-empty>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 确认删除对话框 -->\r\n    <el-dialog v-model=\"deleteConfirmVisible\" title=\"确认删除\" width=\"400px\" append-to-body>\r\n      <p>确定要删除模板 \"{{ currentTemplate?.name }}\" 吗？</p>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"deleteConfirmVisible = false\">取消</el-button>\r\n          <el-button type=\"danger\" @click=\"deleteTemplate\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n    \r\n    <!-- 添加新分类对话框 -->\r\n    <el-dialog v-model=\"showAddTagDialog\" title=\"创建新分类\" width=\"400px\">\r\n      <el-form :model=\"newTagForm\" label-position=\"top\">\r\n        <el-form-item label=\"分类名称\" :rules=\"[{ required: true, message: '请输入分类名称', trigger: 'blur' }]\">\r\n          <el-input v-model=\"newTagForm.name\" placeholder=\"请输入分类名称\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"showAddTagDialog = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"addNewTag\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 添加/编辑模板对话框 -->\r\n    <el-dialog\r\n      v-model=\"templateFormDialogVisible\"\r\n      :title=\"isEditMode ? '编辑模板' : '添加模板'\"\r\n      width=\"90%\"\r\n      destroy-on-close\r\n      top=\"4vh\"\r\n    >\r\n      <template-form\r\n        :template-tags=\"templateTags\"\r\n        :template-data=\"currentTemplateData\"\r\n        :is-edit-mode=\"isEditMode\"\r\n        @cancel=\"templateFormDialogVisible = false\"\r\n        @success=\"handleTemplateFormSuccess\"\r\n        @add-tag=\"handleAddTagFromForm\"\r\n      />\r\n    </el-dialog>\r\n\r\n    <!-- 字体命名对话框 -->\r\n    <el-dialog v-model=\"fontUploadDialogVisible\" title=\"上传字体\" width=\"400px\">\r\n      <el-form :model=\"newFontForm\" label-position=\"top\">\r\n        <el-form-item label=\"自定义字体名称\">\r\n          <el-input v-model=\"newFontForm.name\" placeholder=\"请输入自定义字体名称\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"字体文件\">\r\n          <div class=\"selected-font-file\" v-if=\"newFontForm.file\">\r\n            {{ newFontForm.file.name }}\r\n          </div>\r\n          <el-upload\r\n            :auto-upload=\"false\"\r\n            :show-file-list=\"false\"\r\n            :on-change=\"(file) => { newFontForm.file = file }\"\r\n            accept=\".ttf,.otf,.woff,.woff2\"\r\n            class=\"font-upload-in-dialog\"\r\n          >\r\n            <el-button type=\"primary\">重新选择字体文件</el-button>\r\n          </el-upload>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"fontUploadDialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"submitFontUpload\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, reactive, onUnmounted, watch } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport { Plus, Search, Picture, Upload, Edit, Delete } from '@element-plus/icons-vue' \r\nimport axios from 'axios'\r\nimport TemplateForm from './TemplateForm.vue' // 导入模板表单组件\r\n\r\n// 设置API基础URL - 始终使用相对路径确保代理生效\r\nconst API_BASE_URL = '/api/ai'\r\n\r\n// 状态变量\r\nconst loading = ref(false)\r\nconst activeTag = ref('all')\r\nconst searchKey = ref('')\r\nconst dialogVisible = ref(false)\r\nconst currentTemplate = ref(null)\r\nconst showAddTagDialog = ref(false)\r\nconst addTemplateDialogVisible = ref(false)\r\nconst deleteConfirmVisible = ref(false)\r\nconst detailCanvas = ref(null)\r\n\r\n// 统一的模板表单对话框\r\nconst templateFormDialogVisible = ref(false)\r\nconst isEditMode = ref(false)\r\nconst currentTemplateData = ref(null)\r\n\r\nconst newTagForm = ref({\r\n  name: ''\r\n})\r\n\r\n// 字体选项\r\nconst fontOptions = ref([\r\n  { label: '正在加载字体列表...', value: '' }\r\n])\r\n\r\n// 模板标签\r\nconst templateTags = ref([\r\n  { label: '京东模板', value: 'jd' },\r\n  { label: '百度模板', value: 'baidu' },\r\n  { label: '小说模板', value: 'novel' },\r\n  { label: '夸克模板', value: 'quark' }\r\n])\r\n\r\n// 尺寸选项\r\nconst imageSizeOptions = [\r\n  { label: '1:1', value: '512x512', orientation: '方形' },\r\n  { label: '4:3', value: '512x384', orientation: '横版' },\r\n  { label: '3:4', value: '384x512', orientation: '竖版' },\r\n  { label: '3:2', value: '512x341', orientation: '横版' },\r\n  { label: '2:3', value: '341x512', orientation: '竖版' },\r\n  { label: '16:9', value: '512x288', orientation: '横版' },\r\n  { label: '9:16', value: '288x512', orientation: '竖版' }\r\n]\r\n\r\n// 模板数据\r\nconst templates = ref([])\r\n\r\n// 过滤后的模板列表\r\nconst filteredTemplates = computed(() => {\r\n  // 如果模板列表为空，直接返回空数组\r\n  if (templates.value.length === 0) {\r\n    return [];\r\n  }\r\n  \r\n  return templates.value.filter(template => {\r\n    // 标签过滤 - 修改过滤逻辑以适应新的tag结构\r\n    let tagMatch = false;\r\n    \r\n    if (activeTag.value === 'all') {\r\n      // 全部模板\r\n      tagMatch = true;\r\n    } else {\r\n      // 根据当前activeTag找到对应的分类标签名称\r\n      const activeTagLabel = templateTags.value.find(tag => tag.value === activeTag.value)?.label;\r\n      // 用模板的tag(现在是分类名称)与当前选中的分类标签名称比较\r\n      tagMatch = template.tag === activeTagLabel;\r\n    }\r\n    \r\n    // 如果没有输入搜索关键词，只按标签过滤\r\n    if (!searchKey.value.trim()) {\r\n      return tagMatch;\r\n    }\r\n    \r\n    // 有搜索关键词时，按标签和关键词同时过滤\r\n    const keywordMatch = \r\n      template.name.toLowerCase().includes(searchKey.value.toLowerCase()) ||\r\n      (template.description && template.description.toLowerCase().includes(searchKey.value.toLowerCase()))\r\n    \r\n    return tagMatch && keywordMatch\r\n  })\r\n})\r\n\r\n// 处理标签点击\r\nconst handleTagClick = (tag) => {\r\n  activeTag.value = tag\r\n  console.log('点击标签:', tag, '对应的标签名称:', templateTags.value.find(t => t.value === tag)?.label)\r\n  fetchTemplatesByTag(tag)\r\n}\r\n\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  if (searchKey.value.trim() === '') {\r\n    // 如果搜索关键词为空，恢复显示全部模板\r\n    fetchTemplates()\r\n  } else {\r\n    // 有搜索关键词则执行搜索\r\n    searchTemplates()\r\n  }\r\n}\r\n\r\n// 用于编辑的模板副本\r\nconst editingTemplate = ref({})\r\n\r\n// 判断模板是否被修改\r\nconst isTemplateChanged = computed(() => {\r\n  if (!currentTemplate.value || !editingTemplate.value) return false\r\n  \r\n  // 比较名称\r\n  if (currentTemplate.value.name !== editingTemplate.value.name) return true\r\n  \r\n  // 比较分类\r\n  if (currentTemplate.value.tag !== editingTemplate.value.tag) return true\r\n  \r\n  // 比较文字1字体\r\n  if (currentTemplate.value.text1 && editingTemplate.value.text1 && \r\n      currentTemplate.value.text1.font !== editingTemplate.value.text1.font) return true\r\n  \r\n  // 比较文字2字体\r\n  if (currentTemplate.value.text2 && editingTemplate.value.text2 && \r\n      currentTemplate.value.text2.font !== editingTemplate.value.text2.font) return true\r\n  \r\n  return false\r\n})\r\n\r\n// 获取字体列表\r\nconst fetchFonts = async () => {\r\n  try {\r\n    console.log('开始请求字体列表，API地址:', `${API_BASE_URL}/fonts`);\r\n    const response = await axios.get(`${API_BASE_URL}/fonts`, {\r\n      headers: {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    })\r\n    if (response.data.success) {\r\n      // 转换后端返回的字体数据为前端需要的格式\r\n      fontOptions.value = response.data.data.map(font => ({\r\n        label: font.name,\r\n        value: font.value,\r\n        url: font.path ? `${API_BASE_URL}/${font.path}` : null,\r\n        cssFamily: font.css_family,\r\n        isDefault: font.is_default || false\r\n      }))\r\n      \r\n      // 初始化字体样式\r\n      loadFonts()\r\n    } else {\r\n      console.error('获取字体列表失败:', response.data.error)\r\n      ElMessage.warning('获取字体列表失败，将使用系统字体')\r\n      \r\n      // API请求成功但返回错误时，使用空数组\r\n      fontOptions.value = []\r\n    }\r\n  } catch (error) {\r\n    console.error('获取字体列表失败:', error)\r\n    ElMessage.warning('获取字体列表失败，将使用系统字体')\r\n    \r\n    // API请求失败时，使用空数组\r\n    fontOptions.value = []\r\n  }\r\n}\r\n\r\n// 获取默认字体值\r\nconst getDefaultFontValue = () => {\r\n  // 查找标记为默认的字体\r\n  const defaultFont = fontOptions.value.find(font => font.isDefault);\r\n  if (defaultFont) {\r\n    console.log('使用后端指定的默认字体:', defaultFont.value);\r\n    return defaultFont.value;\r\n  }\r\n  \r\n  // 如果没有标记为默认的字体，按以下顺序尝试\r\n  const preferredFonts = ['default', 'msyh', 'heiti', 'songti', 'kaiti'];\r\n  for (const fontValue of preferredFonts) {\r\n    if (fontOptions.value.some(font => font.value === fontValue)) {\r\n      console.log('使用首选字体:', fontValue);\r\n      return fontValue;\r\n    }\r\n  }\r\n  \r\n  // 如果都不存在，使用第一个字体\r\n  if (fontOptions.value.length > 0) {\r\n    console.log('使用第一个可用字体:', fontOptions.value[0].value);\r\n    return fontOptions.value[0].value;\r\n  }\r\n  \r\n  // 真的没有任何字体时，返回默认值\r\n  console.log('没有可用字体，使用固定默认值: default');\r\n  return 'default';\r\n}\r\n\r\n// 加载自定义字体\r\nconst loadFonts = async () => {\r\n  // 清除之前加载的字体\r\n  document.querySelectorAll('style[data-font-loader=\"true\"]').forEach(el => el.remove());\r\n\r\n  // 为每个自定义字体创建@font-face规则\r\n  const customFonts = fontOptions.value.filter(font => font.url);\r\n  \r\n  if (customFonts.length > 0) {\r\n    console.log(`开始加载 ${customFonts.length} 个自定义字体`);\r\n    \r\n    // 创建样式表\r\n    const style = document.createElement('style');\r\n    style.setAttribute('data-font-loader', 'true');\r\n    \r\n    let fontFaceRules = '';\r\n    const fontLoadPromises = [];\r\n    \r\n    // 为每个字体创建@font-face规则并尝试预加载\r\n    customFonts.forEach(font => {\r\n      // 添加@font-face规则\r\n      fontFaceRules += `\r\n        @font-face {\r\n          font-family: '${font.value}';\r\n          src: url('${font.url}') format('${getFontFormat(font.url)}');\r\n          font-weight: normal;\r\n          font-style: normal;\r\n        }\r\n      `;\r\n      \r\n      // 尝试使用FontFace API预加载字体\r\n      try {\r\n        const fontFace = new FontFace(font.value, `url(${font.url})`);\r\n        const fontLoadPromise = fontFace.load()\r\n          .then(loadedFont => {\r\n            // 将字体添加到document.fonts中\r\n            document.fonts.add(loadedFont);\r\n            console.log(`字体 ${font.value} 预加载成功`);\r\n          })\r\n          .catch(error => {\r\n            console.warn(`字体 ${font.value} 预加载失败:`, error);\r\n          });\r\n        \r\n        fontLoadPromises.push(fontLoadPromise);\r\n      } catch (error) {\r\n        console.warn(`字体 ${font.value} 初始化失败:`, error);\r\n      }\r\n    });\r\n    \r\n    // 添加样式表到文档\r\n    style.textContent = fontFaceRules;\r\n    document.head.appendChild(style);\r\n    \r\n    // 等待所有字体加载尝试完成\r\n    try {\r\n      await Promise.allSettled(fontLoadPromises);\r\n      console.log('所有字体加载尝试已完成');\r\n    } catch (error) {\r\n      console.warn('字体加载过程中出现错误:', error);\r\n    }\r\n  }\r\n  \r\n  console.log('字体加载和初始化完成');\r\n}\r\n\r\n// 根据字体URL确定格式\r\nconst getFontFormat = (url) => {\r\n  if (url.endsWith('.ttf')) return 'truetype'\r\n  if (url.endsWith('.otf')) return 'opentype'\r\n  if (url.endsWith('.woff')) return 'woff'\r\n  if (url.endsWith('.woff2')) return 'woff2'\r\n  return 'truetype' // 默认\r\n}\r\n\r\n// 获取字体样式\r\nconst getFontFamily = (fontType) => {\r\n  console.log('获取字体样式:', fontType);\r\n  \r\n  if (!fontType) {\r\n    console.log('未指定字体，使用默认字体');\r\n    return '\"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif';\r\n  }\r\n  \r\n  // 查找自定义字体\r\n  const customFont = fontOptions.value.find(font => font.value === fontType);\r\n  if (customFont) {\r\n    console.log('找到字体配置:', customFont);\r\n    if (customFont.url) {\r\n      console.log('使用自定义字体:', fontType);\r\n      return `'${fontType}', \"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif`;\r\n    }\r\n    if (customFont.cssFamily) {\r\n      return customFont.cssFamily;\r\n    }\r\n  }\r\n  \r\n  // 系统字体处理\r\n  console.log('使用系统或内置字体:', fontType);\r\n  switch (fontType) {\r\n    case 'heiti': return '\"黑体\", \"SimHei\", sans-serif';\r\n    case 'songti': return '\"宋体\", \"SimSun\", serif';\r\n    case 'msyh': return '\"微软雅黑\", \"Microsoft YaHei\", sans-serif';\r\n    case 'kaiti': return '\"楷体\", \"KaiTi\", serif';\r\n    default: return '\"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif';\r\n  }\r\n}\r\n\r\n// 监听详情对话框打开\r\nwatch(dialogVisible, (isOpen) => {\r\n  if (isOpen && currentTemplate.value) {\r\n    // 先预加载所有字体，然后渲染预览\r\n    const fontsToPreload = [];\r\n    \r\n    if (editingTemplate.value?.text1?.font) {\r\n      fontsToPreload.push(editingTemplate.value.text1.font);\r\n    }\r\n    \r\n    if (editingTemplate.value?.text2?.font) {\r\n      fontsToPreload.push(editingTemplate.value.text2.font);\r\n    }\r\n    \r\n    // 预加载所有字体\r\n    Promise.all(\r\n      fontsToPreload.map(font => {\r\n        try {\r\n          const fontFamily = getFontFamily(font);\r\n          return document.fonts.load(`16px ${fontFamily}`);\r\n        } catch (e) {\r\n          console.warn(`字体预加载错误: ${e.message}`);\r\n          return Promise.resolve(); // 继续执行即使出现错误\r\n        }\r\n      })\r\n    ).finally(() => {\r\n      // 不管字体加载成功与否，都执行渲染\r\n      setTimeout(() => {\r\n        renderDetailPreview();\r\n      }, 50);\r\n    });\r\n  }\r\n});\r\n\r\n// 渲染详情预览\r\nconst renderDetailPreview = () => {\r\n  if (!detailCanvas.value || !currentTemplate.value) return;\r\n  \r\n  console.log('开始渲染详情预览，编辑中的文字区域字体:', \r\n    editingTemplate.value.text1?.font, \r\n    editingTemplate.value.text2?.font);\r\n  \r\n  const canvas = detailCanvas.value;\r\n  const ctx = canvas.getContext('2d');\r\n  \r\n  // 预加载图片\r\n  const img = new Image();\r\n  img.onload = () => {\r\n    // 设置Canvas尺寸\r\n    const container = canvas.parentElement;\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = 400; // 最大高度\r\n    \r\n    // 计算图像适应容器的尺寸\r\n    const imgRatio = img.width / img.height;\r\n    const containerRatio = containerWidth / containerHeight;\r\n    \r\n    let canvasWidth, canvasHeight;\r\n    \r\n    if (imgRatio > containerRatio) {\r\n      // 图像更宽，以容器宽度为基准\r\n      canvasWidth = containerWidth;\r\n      canvasHeight = canvasWidth / imgRatio;\r\n    } else {\r\n      // 图像更高，以容器高度为基准\r\n      canvasHeight = Math.min(containerHeight, img.height);\r\n      canvasWidth = canvasHeight * imgRatio;\r\n    }\r\n    \r\n    // 设置Canvas尺寸\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n    \r\n    // 清除Canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // 绘制图像\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // 预加载所有可能使用的字体\r\n    const fontsToLoad = [];\r\n    \r\n    // 检查文字区域1和文字区域2是否有字体设置\r\n    if (editingTemplate.value.text1?.font) {\r\n      fontsToLoad.push(editingTemplate.value.text1.font);\r\n    }\r\n    \r\n    if (editingTemplate.value.text2?.font) {\r\n      fontsToLoad.push(editingTemplate.value.text2.font);\r\n    }\r\n    \r\n    // 如果需要加载字体，先确保字体加载完成后再渲染\r\n    if (fontsToLoad.length > 0) {\r\n      // 尝试加载所有字体\r\n      Promise.all(fontsToLoad.map(fontName => {\r\n        return new Promise((resolve) => {\r\n          // 尝试使用document.fonts.load加载字体\r\n          // 超时处理以防止某些字体无法正常加载\r\n          const timeoutId = setTimeout(() => {\r\n            console.log(`字体 ${fontName} 加载超时，使用默认字体`);\r\n            resolve();\r\n          }, 2000);\r\n          \r\n          // 尝试加载字体\r\n          try {\r\n            const fontFamily = getFontFamily(fontName);\r\n            document.fonts.load(`12px ${fontFamily}`).then(() => {\r\n              clearTimeout(timeoutId);\r\n              console.log(`字体 ${fontName} 加载成功`);\r\n              resolve();\r\n            }).catch(() => {\r\n              clearTimeout(timeoutId);\r\n              console.log(`字体 ${fontName} 加载失败，使用默认字体`);\r\n              resolve();\r\n            });\r\n          } catch (e) {\r\n            clearTimeout(timeoutId);\r\n            console.log(`字体 ${fontName} 加载出错:`, e);\r\n            resolve();\r\n          }\r\n        });\r\n      })).finally(() => {\r\n        // 所有字体加载尝试完成后渲染文字区域\r\n        renderTextAreas(ctx);\r\n      });\r\n    } else {\r\n      // 没有需要预加载的字体，直接渲染文字区域\r\n      renderTextAreas(ctx);\r\n    }\r\n  };\r\n  \r\n  // 设置图片源\r\n  img.src = currentTemplate.value.previewImage;\r\n};\r\n\r\n// 渲染文字区域的辅助函数\r\nconst renderTextAreas = (ctx) => {\r\n  // 绘制文字区域1（红色）\r\n  if (editingTemplate.value.text1) {\r\n    console.log('绘制文字1区域，字体:', editingTemplate.value.text1.font);\r\n    drawDetailTextRect(ctx, editingTemplate.value.text1, '#f56c6c');\r\n  }\r\n  \r\n  // 绘制文字区域2（蓝色）\r\n  if (editingTemplate.value.text2) {\r\n    console.log('绘制文字2区域，字体:', editingTemplate.value.text2.font);\r\n    drawDetailTextRect(ctx, editingTemplate.value.text2, '#409eff');\r\n  }\r\n};\r\n\r\n// 绘制文字区域\r\nconst drawDetailTextRect = (ctx, textData, color) => {\r\n  const canvas = detailCanvas.value;\r\n  \r\n  // 计算实际像素位置\r\n  const x = (textData.x * canvas.width) / 100;\r\n  const y = (textData.y * canvas.height) / 100;\r\n  const width = (textData.width * canvas.width) / 100;\r\n  const height = (textData.height * canvas.height) / 100;\r\n  \r\n  // 绘制矩形边框\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = 2;\r\n  ctx.strokeRect(x, y, width, height);\r\n  \r\n  // 绘制半透明背景\r\n  ctx.fillStyle = `${color}20`; // 添加透明度\r\n  ctx.fillRect(x, y, width, height);\r\n  \r\n  // 获取字体样式并设置字体\r\n  const fontFamily = getFontFamily(textData.font);\r\n  \r\n  // 保存当前上下文状态\r\n  ctx.save();\r\n  \r\n  // 设置居中对齐\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  \r\n  // 根据颜色确定是文字1还是文字2\r\n  const labelText = color === '#f56c6c' ? '预览文字1' : '预览文字2';\r\n  \r\n  // 计算适合区域的字体大小（取宽度和高度中较小值的30%）\r\n  const minDimension = Math.min(width, height);\r\n  const fontSize = Math.max(14, Math.min(24, Math.floor(minDimension * 0.3)));\r\n  \r\n  // 设置文字样式\r\n  ctx.font = `bold ${fontSize}px ${fontFamily}`;\r\n  ctx.fillStyle = color;\r\n  \r\n  // 计算中心点并绘制\r\n  const centerX = x + width / 2;\r\n  const centerY = y + height / 2;\r\n  ctx.fillText(labelText, centerX, centerY);\r\n  \r\n  // 恢复上下文状态\r\n  ctx.restore();\r\n};\r\n\r\n// 字体变化处理函数\r\nconst onFontChange = (textArea) => {\r\n  console.log(`${textArea}字体变化:`, editingTemplate.value[textArea].font);\r\n  \r\n  // 获取选择的字体\r\n  const selectedFont = editingTemplate.value[textArea].font;\r\n  if (!selectedFont) return;\r\n  \r\n  // 先尝试加载字体，确保字体可用再进行渲染\r\n  const fontFamily = getFontFamily(selectedFont);\r\n  \r\n  console.log(`尝试加载字体: ${selectedFont}, 使用字体族: ${fontFamily}`);\r\n  \r\n  // 先立即渲染一次，即使字体还没加载完成\r\n  renderDetailPreview();\r\n  \r\n  // 然后异步加载字体并再次渲染\r\n  try {\r\n    document.fonts.load(`16px ${fontFamily}`)\r\n      .then(() => {\r\n        console.log(`字体 ${selectedFont} 加载成功，更新预览`);\r\n        // 字体加载成功后，再次刷新预览以确保字体正确显示\r\n        renderDetailPreview();\r\n      })\r\n      .catch(error => {\r\n        console.warn(`字体加载问题: ${error.message}`);\r\n      });\r\n  } catch (e) {\r\n    console.error(`字体 ${selectedFont} 加载出错:`, e);\r\n  }\r\n}\r\n\r\n// 监听编辑模板变化，更新预览\r\nwatch([\r\n  () => editingTemplate.value?.text1?.font,\r\n  () => editingTemplate.value?.text2?.font,\r\n  () => editingTemplate.value?.name,\r\n  () => editingTemplate.value?.tag\r\n], () => {\r\n  if (dialogVisible.value && detailCanvas.value) {\r\n    console.log('字体或其他属性已更改，更新预览');\r\n    // 使用requestAnimationFrame确保在下一帧渲染更新，提高响应性\r\n    requestAnimationFrame(() => {\r\n      renderDetailPreview();\r\n    });\r\n  }\r\n}, { deep: true, immediate: true });\r\n\r\n// 初始化数据\r\nonMounted(() => {\r\n  // 获取模板列表\r\n  fetchTemplates()\r\n  \r\n  // 获取模板标签\r\n  fetchTemplateTags()\r\n  \r\n  // 获取字体列表\r\n  fetchFonts()\r\n})\r\n\r\n// 组件卸载时清理\r\nonUnmounted(() => {\r\n  // 释放字体URL\r\n  fontOptions.value.forEach(font => {\r\n    if (font.url) {\r\n      URL.revokeObjectURL(font.url);\r\n    }\r\n  });\r\n});\r\n\r\n// 确认删除模板\r\nconst confirmDeleteTemplate = (template) => {\r\n  currentTemplate.value = template\r\n  deleteConfirmVisible.value = true\r\n}\r\n\r\n// 删除模板\r\nconst deleteTemplate = async () => {\r\n  if (currentTemplate.value) {\r\n    try {\r\n      const response = await axios.delete(`${API_BASE_URL}/templates/${currentTemplate.value.id}`)\r\n      if (response.data.success) {\r\n        // 从列表中移除\r\n        const index = templates.value.findIndex(item => item.id === currentTemplate.value.id)\r\n        if (index !== -1) {\r\n          templates.value.splice(index, 1)\r\n        }\r\n        \r\n        ElMessage.success(`已删除模板: ${currentTemplate.value.name}`)\r\n      } else {\r\n        ElMessage.error(response.data.error || '删除模板失败')\r\n      }\r\n    } catch (error) {\r\n      console.error('删除模板失败:', error)\r\n      ElMessage.error('删除模板失败: ' + (error.response?.data?.error || error.message))\r\n    }\r\n  }\r\n  \r\n  deleteConfirmVisible.value = false\r\n}\r\n\r\n// 保存模板修改\r\nconst saveTemplate = async () => {\r\n  if (!currentTemplate.value || !editingTemplate.value) return\r\n  \r\n  try {\r\n    // 构造更新数据\r\n    const updateData = {\r\n      name: editingTemplate.value.name,\r\n      tag: editingTemplate.value.tag,\r\n      style: templateTags.value.find(tag => tag.value === editingTemplate.value.tag)?.label || '自定义模板',\r\n      imageSize: editingTemplate.value.imageSize,\r\n      previewImage: editingTemplate.value.previewImage, // 添加必需字段\r\n      description: editingTemplate.value.description || `${editingTemplate.value.name}模板`\r\n    }\r\n    \r\n    // 添加配置字段\r\n    if (editingTemplate.value.config) {\r\n      // 确保使用服务器URL作为水印图片\r\n      const watermarkUrl = editingTemplate.value.previewImage;\r\n      updateData.config = {\r\n        watermark: watermarkUrl, // 添加水印图片放在最前面\r\n        ...editingTemplate.value.config,\r\n      }\r\n      \r\n      // 打印日志便于调试\r\n      console.log('更新模板水印URL:', watermarkUrl);\r\n    } else {\r\n      // 提供默认配置\r\n      const watermarkUrl = editingTemplate.value.previewImage;\r\n      updateData.config = {\r\n        watermark: watermarkUrl, // 添加水印图片放在最前面\r\n        position: 'bottom-right',\r\n        showLogo: true,\r\n        fontSize: 24,\r\n        color: '#000000',\r\n        fontFamily: getDefaultFontValue(), // 使用默认字体\r\n        bold: true,\r\n        enableStroke: true,\r\n        strokeColor: '#ffffff',\r\n        opacity: 0.5\r\n      }\r\n      \r\n      // 打印日志便于调试\r\n      console.log('新建模板水印URL:', watermarkUrl);\r\n    }\r\n    \r\n    // 添加文字区域1\r\n    if (editingTemplate.value.text1) {\r\n      updateData.text1 = {\r\n        enabled: editingTemplate.value.text1.enabled === true,\r\n        font: editingTemplate.value.text1.font,\r\n        x: editingTemplate.value.text1.x,\r\n        y: editingTemplate.value.text1.y,\r\n        width: editingTemplate.value.text1.width,\r\n        height: editingTemplate.value.text1.height\r\n      }\r\n    } else {\r\n      updateData.text1 = null\r\n    }\r\n    \r\n    // 添加文字区域2\r\n    if (editingTemplate.value.text2) {\r\n      updateData.text2 = {\r\n        enabled: editingTemplate.value.text2.enabled === true,\r\n        font: editingTemplate.value.text2.font,\r\n        x: editingTemplate.value.text2.x,\r\n        y: editingTemplate.value.text2.y,\r\n        width: editingTemplate.value.text2.width,\r\n        height: editingTemplate.value.text2.height\r\n      }\r\n    } else {\r\n      updateData.text2 = null\r\n    }\r\n    \r\n    console.log('更新模板数据:', updateData);\r\n    \r\n    // 发送请求更新模板\r\n    const response = await axios.put(`${API_BASE_URL}/templates/${currentTemplate.value.id}`, updateData)\r\n    if (response.data.success) {\r\n      ElMessage.success('模板修改已保存')\r\n      \r\n      // 更新当前模板\r\n      currentTemplate.value = response.data.template\r\n      \r\n      // 更新本地模板列表\r\n      const index = templates.value.findIndex(item => item.id === currentTemplate.value.id)\r\n      if (index !== -1) {\r\n        templates.value[index] = response.data.template\r\n      }\r\n      \r\n      // 关闭模板详情对话框\r\n      dialogVisible.value = false\r\n    } else {\r\n      ElMessage.error(response.data.error || '更新模板失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('更新模板失败:', error)\r\n    ElMessage.error('更新模板失败: ' + (error.response?.data?.error || error.message))\r\n  }\r\n}\r\n\r\n// 获取所有模板\r\nconst fetchTemplates = async () => {\r\n  loading.value = true\r\n  try {\r\n    // 添加时间戳防止缓存\r\n    const timestamp = new Date().getTime();\r\n    const response = await axios.get(`${API_BASE_URL}/templates?_t=${timestamp}`)\r\n    if (response.data.success) {\r\n      templates.value = response.data.templates\r\n      console.log('获取模板列表成功，共', templates.value.length, '个模板')\r\n    } else {\r\n      console.error('获取模板列表失败:', response.data.error)\r\n      ElMessage.error(response.data.error || '获取模板列表失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取模板失败:', error)\r\n    ElMessage.error('获取模板列表失败: ' + (error.response?.data?.error || error.message))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 获取模板标签\r\nconst fetchTemplateTags = async () => {\r\n  try {\r\n    // 添加时间戳防止缓存\r\n    const timestamp = new Date().getTime();\r\n    const response = await axios.get(`${API_BASE_URL}/template-tags?_t=${timestamp}`, {\r\n      headers: {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    });\r\n    \r\n    if (response.data.success && response.data.tags && response.data.tags.length > 0) {\r\n      console.log('获取模板标签成功，共', response.data.tags.length, '个标签');\r\n      templateTags.value = response.data.tags;\r\n    } else if (response.data.success && (!response.data.tags || response.data.tags.length === 0)) {\r\n      console.warn('服务器返回的标签列表为空，使用默认标签');\r\n      // 如果服务器返回空列表，保留默认标签\r\n      if (templateTags.value.length === 0) {\r\n        templateTags.value = [\r\n          { label: '京东模板', value: 'jd' },\r\n          { label: '百度模板', value: 'baidu' },\r\n          { label: '小说模板', value: 'novel' },\r\n          { label: '夸克模板', value: 'quark' }\r\n        ];\r\n      }\r\n    } else {\r\n      console.error('获取模板标签失败:', response.data.error || '未知错误');\r\n      ElMessage.warning('获取模板分类失败，将使用默认分类');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取模板标签失败:', error);\r\n    ElMessage.warning('获取模板分类失败，将使用默认分类');\r\n    \r\n    // 确保在错误情况下有默认标签\r\n    if (templateTags.value.length === 0) {\r\n      templateTags.value = [\r\n        { label: '京东模板', value: 'jd' },\r\n        { label: '百度模板', value: 'baidu' },\r\n        { label: '小说模板', value: 'novel' },\r\n        { label: '夸克模板', value: 'quark' }\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// 根据标签获取模板\r\nconst fetchTemplatesByTag = async (tag) => {\r\n  if (tag === 'all') {\r\n    await fetchTemplates()\r\n    return\r\n  }\r\n  \r\n  // 获取对应的标签名称\r\n  const tagLabel = templateTags.value.find(t => t.value === tag)?.label\r\n  if (!tagLabel) {\r\n    console.error('未找到对应的标签名称:', tag)\r\n    return\r\n  }\r\n  \r\n  console.log('按标签名称获取模板:', tagLabel)\r\n  \r\n  loading.value = true\r\n  try {\r\n    // 添加时间戳防止缓存，使用标签名称作为tag参数\r\n    const timestamp = new Date().getTime();\r\n    const response = await axios.get(`${API_BASE_URL}/templates?tag=${encodeURIComponent(tagLabel)}&_t=${timestamp}`)\r\n    if (response.data.success) {\r\n      templates.value = response.data.templates\r\n      console.log(`获取标签\"${tagLabel}\"的模板成功，共`, templates.value.length, '个模板')\r\n    } else {\r\n      console.error('获取模板列表失败:', response.data.error)\r\n      ElMessage.error(response.data.error || '获取模板列表失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取模板失败:', error)\r\n    ElMessage.error('获取模板列表失败: ' + (error.response?.data?.error || error.message))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 搜索模板\r\nconst searchTemplates = async () => {\r\n  if (!searchKey.value.trim()) {\r\n    await fetchTemplates() // 如果关键词为空，加载所有模板\r\n    return\r\n  }\r\n  \r\n  loading.value = true\r\n  try {\r\n    // 添加时间戳防止缓存\r\n    const timestamp = new Date().getTime();\r\n    const response = await axios.get(`${API_BASE_URL}/templates?keyword=${searchKey.value}&_t=${timestamp}`)\r\n    if (response.data.success) {\r\n      templates.value = response.data.templates\r\n      console.log('搜索成功，找到', templates.value.length, '个模板')\r\n      // 仅在模板数量为0时显示提示，不要显示错误消息\r\n      if (templates.value.length === 0) {\r\n        ElMessage.info(`未找到包含\"${searchKey.value}\"的模板`)\r\n      } else {\r\n        // 搜索成功且有结果时，显示成功提示\r\n        ElMessage.success(`搜索到${templates.value.length}个包含\"${searchKey.value}\"的模板`)\r\n      }\r\n    } else {\r\n      ElMessage.error(response.data.error || '搜索模板失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('搜索模板失败:', error)\r\n    ElMessage.error('搜索模板失败: ' + (error.response?.data?.error || error.message))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 处理添加模板\r\nconst handleAdd = () => {\r\n  // 进入添加模式\r\n  isEditMode.value = false\r\n  currentTemplateData.value = null\r\n  // 显示模板表单对话框\r\n  templateFormDialogVisible.value = true\r\n}\r\n\r\n// 编辑模板（替代之前的viewTemplate方法）\r\nconst editTemplate = (template) => {\r\n  console.log('编辑模板:', template);\r\n  \r\n  // 设置为编辑模式\r\n  isEditMode.value = true\r\n  \r\n  // 根据tag值(标签名称)查找对应的分类value\r\n  let tagValue = '';\r\n  if (template.tag) {\r\n    // 查找匹配的标签\r\n    const matchedTag = templateTags.value.find(tag => tag.label === template.tag);\r\n    if (matchedTag) {\r\n      tagValue = matchedTag.value;\r\n      console.log('找到匹配的标签:', template.tag, '-> value:', tagValue);\r\n    } else {\r\n      console.warn('未找到匹配标签:', template.tag, '使用原始值');\r\n      tagValue = template.tag; // 使用原始值作为备选\r\n    }\r\n  }\r\n  \r\n  // 深拷贝模板数据，确保不会意外修改原始数据\r\n  currentTemplateData.value = JSON.parse(JSON.stringify({\r\n    ...template,\r\n    // 将标签名称映射回标签值\r\n    tag: tagValue,\r\n    // 确保这些属性存在，即使是空值\r\n    imageSize: template.imageSize || '',\r\n    previewImage: template.previewImage || '',\r\n    description: template.description || `${template.name}模板`,\r\n    text1: template.text1 ? {\r\n      ...template.text1,\r\n      font: validateFontExists(template.text1.font), // 确保使用有效字体\r\n      enabled: template.text1.enabled || false // 明确设置启用状态，默认为false\r\n    } : null,\r\n    // 只有当text2存在且有内容时才保留此属性，否则设为null\r\n    text2: template.text2 && Object.keys(template.text2).length > 0 ? {\r\n      ...template.text2,\r\n      font: validateFontExists(template.text2.font), // 确保使用有效字体\r\n      enabled: template.text2.enabled || false // 明确设置启用状态，默认为false\r\n    } : null,\r\n    config: template.config || {\r\n      position: 'bottom-right',\r\n      showLogo: true,\r\n      fontSize: 24,\r\n      color: '#000000',\r\n      fontFamily: getDefaultFontValue(), // 使用默认字体\r\n      bold: true,\r\n      enableStroke: true,\r\n      strokeColor: '#ffffff',\r\n      opacity: 0.5\r\n    }\r\n  }))\r\n  \r\n  // 打开模板表单对话框\r\n  templateFormDialogVisible.value = true\r\n}\r\n\r\n// 处理模板表单提交成功\r\nconst handleTemplateFormSuccess = async (template) => {\r\n  // 不再显示成功消息，因为TemplateForm组件已经显示了成功消息\r\n  templateFormDialogVisible.value = false;\r\n  \r\n  // 刷新标签列表，确保新增的标签能够显示\r\n  await fetchTemplateTags();\r\n  \r\n  if (template) {\r\n    // 如果返回了模板数据，直接更新本地列表中的对应项\r\n    const index = templates.value.findIndex(item => item.id === template.id);\r\n    if (index >= 0) {\r\n      // 替换原有模板\r\n      templates.value.splice(index, 1, template);\r\n      console.log('已更新本地模板列表中的模板:', template.id);\r\n    } else {\r\n      // 如果是新增的模板，添加到列表开头\r\n      templates.value.unshift(template);\r\n      console.log('已添加新模板到本地列表:', template.id);\r\n      \r\n      // 如果模板有分类，则切换到该分类\r\n      if (template.tag) {\r\n        // 查找匹配的标签对象\r\n        const matchedTag = templateTags.value.find(tag => tag.label === template.tag);\r\n        if (matchedTag) {\r\n          // 切换到该分类\r\n          activeTag.value = matchedTag.value;\r\n          console.log('切换到模板所属分类:', matchedTag.label);\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    // 如果没有返回模板数据，刷新整个列表\r\n    console.log('刷新模板列表');\r\n    fetchTemplates();\r\n  }\r\n}\r\n\r\n// 验证字体是否存在，返回有效的字体值\r\nconst validateFontExists = (fontValue) => {\r\n  // 如果字体列表为空或还在加载中，使用默认字体\r\n  if (fontOptions.value.length <= 1) {\r\n    console.log('字体列表为空或加载中，使用默认字体');\r\n    return getDefaultFontValue();\r\n  }\r\n  \r\n  // 查找字体是否存在于列表中\r\n  const fontExists = fontOptions.value.some(font => font.value === fontValue);\r\n  \r\n  if (fontExists) {\r\n    console.log(`字体 ${fontValue} 存在，可以使用`);\r\n    return fontValue;\r\n  } else {\r\n    console.log(`字体 ${fontValue} 不存在，使用默认字体代替`);\r\n    return getDefaultFontValue();\r\n  }\r\n}\r\n\r\n// 添加新分类\r\nconst addNewTag = async () => {\r\n  if (!newTagForm.value.name.trim()) {\r\n    ElMessage.warning('请输入分类名称')\r\n    return\r\n  }\r\n  \r\n  // 生成一个唯一的value值\r\n  const newValue = 'tag_' + Date.now()\r\n  \r\n  // 创建新分类对象\r\n  const newTag = {\r\n    label: newTagForm.value.name,\r\n    value: newValue\r\n  }\r\n  \r\n  try {\r\n    // 添加新标签到后端服务器\r\n    const response = await axios.post(`${API_BASE_URL}/template-tags`, {\r\n      label: newTag.label,\r\n      value: newTag.value\r\n    });\r\n    \r\n    if (response.data.success) {\r\n      // 添加新分类到本地列表\r\n      templateTags.value.push(newTag)\r\n      \r\n      // 自动选择新添加的分类\r\n      activeTag.value = newValue;\r\n      \r\n      ElMessage.success(`已添加新分类: ${newTag.label}`)\r\n    } else {\r\n      console.error('添加分类到服务器失败:', response.data.error);\r\n      ElMessage.error('添加分类失败: ' + (response.data.error || '未知错误'));\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    console.error('添加分类到服务器失败:', error);\r\n    \r\n    // 如果服务器接口不支持添加标签，仍然在本地添加\r\n    templateTags.value.push(newTag);\r\n    \r\n    // 自动选择新添加的分类\r\n    activeTag.value = newValue;\r\n    \r\n    // 显示警告提示\r\n    ElMessage.warning(`已添加新分类: ${newTag.label} (仅本地有效)`);\r\n  }\r\n  \r\n  // 清空表单并关闭对话框\r\n  newTagForm.value.name = ''\r\n  showAddTagDialog.value = false\r\n}\r\n\r\n// 添加一个字体命名对话框变量\r\nconst fontUploadDialogVisible = ref(false)\r\nconst newFontForm = ref({\r\n  name: '',\r\n  file: null,\r\n  textArea: null\r\n})\r\n\r\n// 打开字体命名对话框\r\nconst openFontUploadDialog = (file, textArea) => {\r\n  console.log('处理上传的字体文件:', file);\r\n  \r\n  if (file && file.raw) {\r\n    // 检查文件格式\r\n    const fileName = file.raw.name || '';\r\n    const fileType = file.raw.type || '';\r\n    const fileExt = fileName.split('.').pop().toLowerCase();\r\n    \r\n    console.log('字体文件详情:', {\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileExtension: fileExt,\r\n      fileSize: file.raw.size\r\n    });\r\n    \r\n    const supportedExtensions = ['ttf', 'otf', 'woff', 'woff2'];\r\n    const supportedMimeTypes = [\r\n      'font/ttf', 'font/otf', 'font/woff', 'font/woff2',\r\n      'application/x-font-ttf', 'application/x-font-otf', \r\n      'application/font-woff', 'application/font-woff2',\r\n      'application/octet-stream' // 有些浏览器可能将字体文件识别为二进制流\r\n    ];\r\n    \r\n    const isValidExt = supportedExtensions.includes(fileExt);\r\n    const isValidMime = supportedMimeTypes.includes(fileType);\r\n    \r\n    if (!isValidExt && !isValidMime) {\r\n      console.error('无效的字体文件格式:', { ext: fileExt, type: fileType });\r\n      ElMessage.error('请上传有效的字体文件（.ttf、.otf、.woff、.woff2格式）');\r\n      return;\r\n    }\r\n    \r\n    // 检查文件大小\r\n    const fileSizeMB = file.raw.size / (1024 * 1024);\r\n    if (fileSizeMB > 10) {\r\n      ElMessage.error(`字体文件过大（${fileSizeMB.toFixed(2)}MB），请上传小于10MB的文件`);\r\n      return;\r\n    }\r\n    \r\n    // 设置表单数据 - 从文件名中提取更有意义的字体名称\r\n    let suggestedName = fileName.split('.')[0]\r\n      // 删除版本号和常见后缀\r\n      .replace(/[-_]?v\\d+(\\.\\d+)*/, '')  \r\n      .replace(/[-_]regular$|[-_]normal$/, '')\r\n      // 将连字符和下划线替换为空格\r\n      .replace(/[-_]/g, ' ')\r\n      // 首字母大写\r\n      .split(' ')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n    \r\n    // 如果名称太长，截断它\r\n    if (suggestedName.length > 30) {\r\n      suggestedName = suggestedName.substring(0, 30);\r\n    }\r\n    \r\n    newFontForm.value.name = suggestedName;\r\n    newFontForm.value.file = file;\r\n    newFontForm.value.textArea = textArea;\r\n    fontUploadDialogVisible.value = true;\r\n  } else {\r\n    console.error('无效的文件对象:', file);\r\n    ElMessage.error('请选择有效的字体文件');\r\n  }\r\n}\r\n\r\n// 处理字体上传\r\nconst handleFontUpload = (file, targetTextArea = null) => {\r\n  openFontUploadDialog(file, targetTextArea);\r\n  return false; // 阻止默认上传行为\r\n}\r\n\r\n// 提交字体到后端API\r\nconst submitFontUpload = async () => {\r\n  if (!newFontForm.value.name.trim()) {\r\n    ElMessage.warning('请输入自定义字体名称');\r\n    return;\r\n  }\r\n  \r\n  if (!newFontForm.value.file) {\r\n    ElMessage.warning('请选择字体文件');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 创建表单数据\r\n    const formData = new FormData();\r\n    const fileRaw = newFontForm.value.file.raw;\r\n    \r\n    console.log('上传字体文件信息:', {\r\n      fileName: fileRaw.name,\r\n      fileType: fileRaw.type,\r\n      fileSize: fileRaw.size\r\n    });\r\n    \r\n    // 添加文件\r\n    formData.append('file', fileRaw);\r\n    \r\n    // 添加必需参数 - 中文显示名称\r\n    const fontDisplayName = newFontForm.value.name.trim();\r\n    formData.append('name', fontDisplayName);\r\n    \r\n    // 生成唯一标识符，使用拼音/英文+时间戳\r\n    const fontValue = `font_${Date.now()}`;\r\n    formData.append('value', fontValue);\r\n    \r\n    // 添加可选参数\r\n    formData.append('description', `${fontDisplayName} 字体`);\r\n    formData.append('is_default', \"false\");\r\n    \r\n    console.log('字体上传请求参数:', {\r\n      endpoint: `${API_BASE_URL}/fonts/upload`,\r\n      fontName: fontDisplayName,\r\n      fontValue: fontValue\r\n    });\r\n    \r\n    // 显示上传中提示\r\n    const loadingMessage = ElMessage({\r\n      message: '正在上传字体，请稍候...',\r\n      type: 'info',\r\n      duration: 0\r\n    });\r\n    \r\n    // 添加正确的Content-Type头并设置超时时间\r\n    const response = await axios.post(`${API_BASE_URL}/fonts/upload`, formData, {\r\n      headers: { \r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      timeout: 60000 // 60秒超时\r\n    });\r\n    \r\n    // 关闭上传中提示\r\n    loadingMessage.close();\r\n    \r\n    console.log('字体上传响应:', response.data);\r\n    \r\n    if (response.data.success) {\r\n      ElMessage.success('字体上传成功');\r\n      \r\n      // 更新字体列表\r\n      await fetchFonts();\r\n      \r\n      // 应用新字体到文本区域\r\n      const targetTextArea = newFontForm.value.textArea;\r\n      if (dialogVisible.value) {\r\n        if (targetTextArea) {\r\n          console.log(`指定将字体应用到${targetTextArea}`);\r\n          editingTemplate.value[targetTextArea].font = fontValue;\r\n        } else if (editingTemplate.value.text1) {\r\n          console.log('默认应用字体到文字1');\r\n          editingTemplate.value.text1.font = fontValue;\r\n        } else if (editingTemplate.value.text2) {\r\n          console.log('默认应用字体到文字2');\r\n          editingTemplate.value.text2.font = fontValue;\r\n        }\r\n        \r\n        // 立即重新渲染预览 - 使用短延迟确保字体已加载\r\n        setTimeout(() => {\r\n          renderDetailPreview();\r\n        }, 200);\r\n      }\r\n      \r\n      // 关闭对话框并重置表单\r\n      fontUploadDialogVisible.value = false;\r\n      newFontForm.value = { name: '', file: null, textArea: null };\r\n    } else {\r\n      ElMessage.error(response.data.error || '字体上传失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('字体上传失败:', error);\r\n    \r\n    let errorMessage = '字体上传失败';\r\n    if (error.response) {\r\n      console.error('响应状态:', error.response.status);\r\n      console.error('响应数据:', error.response.data);\r\n      \r\n      if (error.response.data && error.response.data.detail) {\r\n        errorMessage += `: ${error.response.data.detail}`;\r\n      } else if (error.response.data && error.response.data.error) {\r\n        errorMessage += `: ${error.response.data.error}`;\r\n      } else if (typeof error.response.data === 'string') {\r\n        errorMessage += `: ${error.response.data}`;\r\n      } \r\n    } else if (error.request) {\r\n      console.error('请求发送但没有收到响应');\r\n      errorMessage += '：网络请求超时或服务器无响应';\r\n    } else {\r\n      console.error('请求设置错误:', error.message);\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    ElMessage.error(errorMessage);\r\n    \r\n    // 关闭上传中的提示（如果存在）\r\n    const loadingEl = document.querySelector('.el-message--info');\r\n    if (loadingEl) {\r\n      loadingEl.remove();\r\n    }\r\n  }\r\n}\r\n\r\n// 定义不含'/ai'前缀的baseURL - 使用相对路径\r\nconst baseURL = import.meta.env.VITE_API_BASE_URL\r\nconsole.log('使用baseURL:', baseURL)\r\n// 在显示图片前处理URL路径 - 新的处理方法\r\nconst processImageUrl = (url) => {\r\n  // 如果URL以'/file/'开头，确保使用正确的完整路径\r\n  if (url && url.startsWith('/file/')) {\r\n    // 直接使用不带'/ai'前缀的baseURL\r\n    return `${baseURL}${url}`;\r\n  }\r\n  return getImageUrl(url);\r\n}\r\n\r\n// 处理从表单添加的标签\r\nconst handleAddTagFromForm = async (newTag) => {\r\n  console.log('从模板表单接收到新标签:', newTag);\r\n  \r\n  // 检查标签是否已存在\r\n  const tagExists = templateTags.value.some(tag => tag.value === newTag.value);\r\n  \r\n  if (!tagExists) {\r\n    try {\r\n      // 添加新标签到后端服务器\r\n      const response = await axios.post(`${API_BASE_URL}/template-tags`, {\r\n        label: newTag.label,\r\n        value: newTag.value\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        // 添加新标签到列表\r\n        templateTags.value.push(newTag);\r\n        console.log('已添加新标签到模板库分类列表');\r\n        \r\n        // 显示成功提示\r\n        ElMessage.success(`已添加新分类: ${newTag.label}`);\r\n        \r\n        // 可选：立即选择新添加的标签\r\n        activeTag.value = newTag.value;\r\n      } else {\r\n        console.error('添加分类到服务器失败:', response.data.error);\r\n        ElMessage.error('添加分类失败: ' + (response.data.error || '未知错误'));\r\n      }\r\n    } catch (error) {\r\n      console.error('添加分类到服务器失败:', error);\r\n      \r\n      // 如果服务器接口不支持添加标签，仍然在本地添加\r\n      templateTags.value.push(newTag);\r\n      console.log('已添加新标签到本地模板库分类列表（未保存到服务器）');\r\n      \r\n      // 显示警告提示\r\n      ElMessage.warning(`已添加新分类: ${newTag.label} (仅本地有效)`);\r\n      \r\n      // 可选：立即选择新添加的标签\r\n      activeTag.value = newTag.value;\r\n    }\r\n  } else {\r\n    console.log('标签已存在，无需重复添加');\r\n    \r\n    // 如果标签已存在，显示提示并选择该标签\r\n    ElMessage.info(`分类 \"${newTag.label}\" 已存在`);\r\n    activeTag.value = newTag.value;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.template-library-container {\r\n  height: 100%;\r\n}\r\n\r\n.resource-layout {\r\n  display: flex;\r\n  height: 100%;\r\n  gap: 20px;\r\n}\r\n\r\n.left-panel {\r\n  width: 240px;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.my-tags-header {\r\n  padding: 16px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.my-tags-header h3 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.my-tags-list {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px 0;\r\n}\r\n\r\n.tag-item {\r\n  padding: 10px 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.tag-item:hover {\r\n  background-color: rgba(128, 135, 255, 0.08);\r\n}\r\n\r\n.tag-item.active {\r\n  background-color: rgba(128, 135, 255, 0.12);\r\n}\r\n\r\n.tag-item.active .tag-name {\r\n  color: #8087ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.tag-icon {\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 6px;\r\n  display: inline-block;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n}\r\n\r\n.tag-name {\r\n  font-size: 14px;\r\n  color: #606266;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  flex: 1;\r\n}\r\n\r\n/* 添加新分类按钮 */\r\n.add-category-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  padding: 5px 10px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 13px;\r\n  color: white;\r\n  background: linear-gradient(135deg, rgba(128, 135, 255, 0.9), rgba(116, 189, 255, 0.9));\r\n  transition: all 0.2s;\r\n  box-shadow: 0 2px 5px rgba(116, 189, 255, 0.3);\r\n}\r\n\r\n.add-category-btn:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 3px 8px rgba(116, 189, 255, 0.4);\r\n}\r\n\r\n.right-panel {\r\n  flex: 1;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.top-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.title-area h2 {\r\n  font-size: 18px;\r\n  margin: 0;\r\n}\r\n\r\n/* 添加模板按钮样式 */\r\n.add-material-btn {\r\n  padding: 8px 15px;\r\n  background: linear-gradient(135deg, rgba(128, 135, 255, 0.9), rgba(116, 189, 255, 0.9));\r\n  border: none;\r\n  color: white;\r\n  box-shadow: 0 2px 5px rgba(116, 189, 255, 0.3);\r\n  transition: all 0.2s;\r\n}\r\n\r\n.add-material-btn:hover,\r\n.add-material-btn:focus {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 3px 8px rgba(116, 189, 255, 0.4);\r\n  background: linear-gradient(135deg, rgba(128, 135, 255, 1), rgba(116, 189, 255, 1));\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.action-buttons :deep(.add-material-btn) {\r\n  background: linear-gradient(135deg, rgba(128, 135, 255, 0.9), rgba(116, 189, 255, 0.9));\r\n  border: none;\r\n  color: white;\r\n}\r\n\r\n.action-buttons :deep(.add-material-btn:hover),\r\n.action-buttons :deep(.add-material-btn:focus) {\r\n  background: linear-gradient(135deg, rgba(128, 135, 255, 1), rgba(116, 189, 255, 1));\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.keyword-search {\r\n  margin-bottom: 20px;\r\n  max-width: 200px;\r\n}\r\n\r\n.materials-display {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n/* 模板网格 */\r\n.template-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.template-item {\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n  cursor: pointer;\r\n  position: relative; /* 保留相对定位 */\r\n}\r\n\r\n.template-item:hover {\r\n  transform: translateY(-4px);\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.template-image-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 160px;\r\n  overflow: hidden;\r\n  background-color: #f5f7fa;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  /* 添加点状背景 */\r\n  background-image: \r\n    radial-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px), \r\n    radial-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px);\r\n  background-size: 10px 10px;\r\n  background-position: 0 0, 5px 5px;\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.template-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  transition: transform 0.3s;\r\n  /* 添加图片边框阴影 */\r\n  filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.1));\r\n  padding: 4px;\r\n}\r\n\r\n.template-item:hover .template-image {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.template-actions {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  opacity: 0;\r\n  transition: opacity 0.3s;\r\n}\r\n\r\n.template-item:hover .template-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.template-info {\r\n  padding: 12px;\r\n}\r\n\r\n.template-name {\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.template-tags {\r\n  display: flex;\r\n  gap: 6px;\r\n}\r\n\r\n.empty-state {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 300px;\r\n}\r\n\r\n/* 详情对话框样式 */\r\n.template-detail-dialog {\r\n  --detail-dialog-radius: 28px;\r\n}\r\n\r\n.template-detail-dialog :deep(.el-overlay) {\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  backdrop-filter: blur(5px);\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog) {\r\n  --el-dialog-border-radius: var(--detail-dialog-radius);\r\n  --el-dialog-padding-primary: 0;\r\n  border-radius: var(--detail-dialog-radius);\r\n  overflow: hidden;\r\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15), 0 5px 20px rgba(0, 0, 0, 0.1);\r\n  background-color: #f5f7fa;\r\n  border: 2px solid rgba(115, 213, 140, 0.9);\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__header) {\r\n  padding: 20px 28px;\r\n  margin: 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background-color: white;\r\n  border-radius: var(--detail-dialog-radius) var(--detail-dialog-radius) 0 0;\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__title) {\r\n  font-weight: 600;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__headerbtn) {\r\n  top: 20px;\r\n  right: 28px;\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__close) {\r\n  color: #666;\r\n  font-size: 20px;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__close:hover) {\r\n  color: #409eff;\r\n  transform: rotate(90deg);\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__body) {\r\n  padding: 28px;\r\n  overflow-y: auto;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.template-detail-dialog :deep(.el-dialog__footer) {\r\n  padding: 18px 28px;\r\n  border-top: 1px solid #f0f0f0;\r\n  background-color: white;\r\n  border-radius: 0 0 var(--detail-dialog-radius) var(--detail-dialog-radius);\r\n}\r\n\r\n.template-detail {\r\n  width: 100%;\r\n}\r\n\r\n.detail-sections {\r\n  display: flex;\r\n  gap: 24px;\r\n}\r\n\r\n.detail-section {\r\n  flex: 1;\r\n}\r\n\r\n.preview-section {\r\n  flex: 1.1;\r\n}\r\n\r\n.info-section {\r\n  flex: 0.9;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.detail-image-container {\r\n  width: 100%;\r\n  height: auto;\r\n  min-height: 200px;\r\n  max-height: 500px;\r\n  overflow: hidden;\r\n  border-radius: 20px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1), inset 0 0 8px rgba(0, 0, 0, 0.05);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 2px solid rgba(190, 190, 190, 0.3);\r\n  padding: 10px;\r\n  background-image: \r\n    radial-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px), \r\n    radial-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px);\r\n  background-size: 10px 10px;\r\n  background-position: 0 0, 5px 5px;\r\n  background-color: rgba(240, 240, 240, 0.7);\r\n  backdrop-filter: blur(5px);\r\n  -webkit-backdrop-filter: blur(5px);\r\n}\r\n\r\n.detail-label {\r\n  font-weight: 500;\r\n  color: #606266;\r\n  width: 90px;\r\n  margin-right: 8px;\r\n}\r\n\r\n.template-detail-actions {\r\n  margin-top: auto;\r\n  display: flex;\r\n  gap: 16px;\r\n}\r\n\r\n.detail-action-btn {\r\n  flex: 1;\r\n  height: 40px;\r\n  font-size: 15px;\r\n}\r\n\r\n/* 详情Canvas样式 */\r\n.detail-canvas {\r\n  max-width: 100%;\r\n  max-height: 500px;\r\n  display: block;\r\n  border: 2px solid rgba(255, 255, 255, 0.8);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n/* 修改字体选择和上传按钮样式 */\r\n.font-select-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  width: 100%;\r\n}\r\n\r\n.font-select {\r\n  flex: 1;\r\n  width: 100%;\r\n}\r\n\r\n.upload-font-btn {\r\n  flex-shrink: 0;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  font-size: 14px;\r\n  background: linear-gradient(135deg, rgba(128, 135, 255, 0.9), rgba(116, 189, 255, 0.9));\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.upload-font-btn:hover {\r\n  background: linear-gradient(135deg, rgba(108, 115, 235, 0.95), rgba(96, 169, 235, 0.95));\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 2px 8px rgba(116, 189, 255, 0.3);\r\n}\r\n\r\n/* 表单项样式增强 */\r\n.rounded-input :deep(.el-input__wrapper) {\r\n  border-radius: 12px;\r\n  box-shadow: 0 0 0 1px #dcdfe6 inset;\r\n  transition: all 0.2s;\r\n  padding: 0 12px;\r\n}\r\n\r\n.rounded-input :deep(.el-input__wrapper:hover) {\r\n  box-shadow: 0 0 0 1px #8087ff inset;\r\n}\r\n\r\n.rounded-select :deep(.el-input__wrapper) {\r\n  border-radius: 12px;\r\n  box-shadow: 0 0 0 1px #dcdfe6 inset;\r\n  transition: all 0.2s;\r\n  padding: 0 12px;\r\n}\r\n\r\n.rounded-select :deep(.el-input__wrapper:hover) {\r\n  box-shadow: 0 0 0 1px #8087ff inset;\r\n}\r\n\r\n.rounded-button {\r\n  border-radius: 12px;\r\n  padding: 10px 24px;\r\n  font-weight: 500;\r\n  transition: all 0.3s;\r\n}\r\n\r\n/* 详情时间戳样式 */\r\n.detail-timestamp {\r\n  margin-top: 16px;\r\n  padding: 12px;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);\r\n}\r\n\r\n.detail-timestamp .detail-label {\r\n  width: auto;\r\n  margin-right: 8px;\r\n}\r\n\r\n/* 工具类 */\r\n.w-100 {\r\n  width: 100%;\r\n}\r\n\r\n.uploader-list img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.selected-font-file {\r\n  margin-bottom: 10px;\r\n  padding: 8px 12px;\r\n  background-color: #f0f8ff;\r\n  border-radius: 4px;\r\n  border: 1px solid #e0e8f0;\r\n  font-size: 14px;\r\n  color: #333;\r\n}\r\n\r\n.template-checkbox {\r\n  position: absolute;\r\n  top: 8px;\r\n  left: 8px;\r\n  z-index: 2;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  border-radius: 4px;\r\n  padding: 2px;\r\n}\r\n\r\n.template-checkbox .el-checkbox {\r\n  margin-right: 0;\r\n}\r\n\r\n.delete-material-btn {\r\n  background-color: #f56c6c;\r\n  border-color: #f56c6c;\r\n  color: white;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.delete-material-btn:hover,\r\n.delete-material-btn:focus {\r\n  background-color: #f78989;\r\n  border-color: #f78989;\r\n  color: white;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.delete-material-btn:disabled {\r\n  background-color: #fab6b6;\r\n  border-color: #fab6b6;\r\n  color: white;\r\n  cursor: not-allowed;\r\n}\r\n</style> "],"names":["API_BASE_URL","loading","ref","activeTag","searchKey","dialogVisible","currentTemplate","showAddTagDialog","deleteConfirmVisible","detailCanvas","templateFormDialogVisible","isEditMode","currentTemplateData","newTagForm","fontOptions","templateTags","templates","filteredTemplates","computed","template","tagMatch","activeTagLabel","_a","tag","keywordMatch","handleTagClick","fetchTemplatesByTag","handleSearch","fetchTemplates","searchTemplates","editingTemplate","fetchFonts","response","axios","font","loadFonts","ElMessage","error","getDefaultFontValue","defaultFont","preferredFonts","fontValue","el","customFonts","style","fontLoadPromises","fontFaceRules","fontLoadPromise","loadedFont","getFontFormat","url","getFontFamily","fontType","customFont","watch","isOpen","fontsToPreload","_b","_d","_c","fontFamily","e","renderDetailPreview","canvas","ctx","img","containerWidth","containerHeight","imgRatio","containerRatio","canvasHeight","canvasWidth","fontsToLoad","fontName","resolve","timeoutId","renderTextAreas","drawDetailTextRect","textData","color","x","y","width","height","labelText","minDimension","fontSize","centerX","centerY","onMounted","fetchTemplateTags","onUnmounted","confirmDeleteTemplate","deleteTemplate","index","item","timestamp","tagLabel","t","handleAdd","editTemplate","matchedTag","tagValue","validateFontExists","handleTemplateFormSuccess","addNewTag","newValue","newTag","fontUploadDialogVisible","newFontForm","submitFontUpload","fileRaw","formData","fontDisplayName","loadingMessage","targetTextArea","errorMessage","loadingEl","baseURL","processImageUrl","handleAddTagFromForm","_ctx","_cache","_component_el_icon","__unplugin_components_0","__unplugin_components_1","__unplugin_components_2","_component_el_empty","__unplugin_components_3","_component_el_dialog","__unplugin_components_4","_component_el_form_item","__unplugin_components_5","__unplugin_components_6","_component_el_upload","__unplugin_components_7","_directive_loading","__unplugin_directives_0","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","$event","_createVNode","_withCtx","_unref","Plus","_hoisted_5","_normalizeClass","_Fragment","_renderList","_hoisted_7","_toDisplayString","_hoisted_6","_hoisted_8","_hoisted_9","_hoisted_10","_component_el_button","_createTextVNode","_hoisted_11"],"mappings":"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"}