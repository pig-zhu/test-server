{"version":3,"file":"CreateTask-bqmjrfej.js","sources":["../../src/pages/ImageAIGenerator/components/FeedbackDialog.vue","../../src/pages/ImageAIGenerator/components/ImageSearchDialog.vue","../../src/assets/default-preview.jpg","../../src/pages/ImageAIGenerator/components/CreateTask.vue"],"sourcesContent":["<template>\r\n  <el-dialog\r\n    v-model=\"dialogVisible\"\r\n    title=\"效果反馈\"\r\n    width=\"550px\"\r\n    :close-on-click-modal=\"false\"\r\n    :destroy-on-close=\"true\"\r\n  >\r\n    <div class=\"feedback-dialog-content\">\r\n      <el-form ref=\"feedbackFormRef\" :model=\"feedbackForm\" :rules=\"formRules\" label-position=\"top\">\r\n        <el-form-item label=\"任务ID\" prop=\"taskId\">\r\n          <el-input v-model=\"feedbackForm.taskId\" disabled placeholder=\"自动填充任务ID\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"任务名称\" prop=\"taskName\">\r\n          <el-input v-model=\"feedbackForm.taskName\" disabled placeholder=\"自动填充任务名称\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"使用的模板\" prop=\"templateInfo\">\r\n          <el-input v-model=\"feedbackForm.templateInfo\" disabled placeholder=\"自动填充模板信息\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"问题描述\" prop=\"description\">\r\n          <el-input\r\n            v-model=\"feedbackForm.description\"\r\n            type=\"textarea\"\r\n            :rows=\"4\"\r\n            placeholder=\"请详细描述您遇到的问题\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"closeDialog\">取消</el-button>\r\n        <el-button type=\"primary\" :loading=\"submitting\" @click=\"submitFeedback\">提交反馈</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, watch } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  taskId: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  taskName: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  templateInfo: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['update:visible', 'success'])\r\n\r\n// API基础URL\r\nconst API_BASE_URL = 'api/ai'\r\n\r\n// 对话框可见性\r\nconst dialogVisible = ref(props.visible)\r\n\r\n// 表单引用\r\nconst feedbackFormRef = ref(null)\r\n\r\n// 表单数据\r\nconst feedbackForm = reactive({\r\n  taskId: props.taskId,\r\n  taskName: props.taskName,\r\n  templateInfo: props.templateInfo,\r\n  description: ''\r\n})\r\n\r\n// 提交状态\r\nconst submitting = ref(false)\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  description: [\r\n    { required: true, message: '请填写问题描述', trigger: 'blur' },\r\n    { min: 5, message: '问题描述至少5个字符', trigger: 'blur' }\r\n  ]\r\n}\r\n\r\n// 使用watch监听props变化\r\nwatch(() => props.visible, (newValue) => {\r\n  dialogVisible.value = newValue\r\n  if (newValue) {\r\n    // 当对话框打开时，自动填充表单\r\n    feedbackForm.taskId = props.taskId\r\n    feedbackForm.taskName = props.taskName\r\n    feedbackForm.templateInfo = props.templateInfo\r\n  }\r\n})\r\n\r\n// 同样监听dialogVisible的变化，保持与props.visible同步\r\nwatch(() => dialogVisible.value, (newValue) => {\r\n  if (!newValue) {\r\n    emit('update:visible', false)\r\n  }\r\n})\r\n\r\n// 监听各个属性变化\r\nwatch(() => props.taskId, (newValue) => {\r\n  feedbackForm.taskId = newValue\r\n})\r\n\r\nwatch(() => props.taskName, (newValue) => {\r\n  feedbackForm.taskName = newValue\r\n})\r\n\r\nwatch(() => props.templateInfo, (newValue) => {\r\n  feedbackForm.templateInfo = newValue\r\n})\r\n\r\n// 初始化时设置表单数据\r\nonMounted(() => {\r\n  feedbackForm.taskId = props.taskId\r\n  feedbackForm.taskName = props.taskName\r\n  feedbackForm.templateInfo = props.templateInfo\r\n})\r\n\r\n// 关闭对话框\r\nconst closeDialog = () => {\r\n  emit('update:visible', false)\r\n  dialogVisible.value = false\r\n  // 重置表单\r\n  if (feedbackFormRef.value) {\r\n    feedbackFormRef.value.resetFields()\r\n  }\r\n}\r\n\r\n// 提交反馈\r\nconst submitFeedback = async () => {\r\n  // 表单验证\r\n  if (!feedbackFormRef.value) return\r\n  \r\n  await feedbackFormRef.value.validate(async (valid) => {\r\n    if (!valid) {\r\n      return false\r\n    }\r\n    \r\n    submitting.value = true\r\n    \r\n    try {\r\n      // 创建一个新的Axios实例，避免与全局配置冲突\r\n      const axiosInstance = axios.create({\r\n        baseURL: API_BASE_URL,\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      \r\n      const response = await axiosInstance.post('/feedback', {\r\n        taskId: feedbackForm.taskId,\r\n        taskName: feedbackForm.taskName,\r\n        templateInfo: feedbackForm.templateInfo,\r\n        description: feedbackForm.description\r\n      })\r\n      \r\n      if (response.data.success) {\r\n        ElMessage.success('感谢您的反馈，我们会尽快处理')\r\n        emit('success')\r\n        closeDialog()\r\n      } else {\r\n        ElMessage.error(response.data.error || '提交反馈失败')\r\n      }\r\n    } catch (error) {\r\n      console.error('提交反馈失败:', error)\r\n      ElMessage.error('提交反馈失败: ' + (error.response?.data?.error || error.message))\r\n    } finally {\r\n      submitting.value = false\r\n    }\r\n  })\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.feedback-dialog-content {\r\n  padding: 10px 0;\r\n}\r\n</style> ","<template>\r\n  <el-dialog\r\n    v-model=\"dialogVisible\"\r\n    title=\"搜索底图\"\r\n    width=\"85%\"\r\n    top=\"5vh\"\r\n    class=\"image-search-dialog\"\r\n    @close=\"handleClose\"\r\n  >\r\n    <div class=\"search-dialog-content\">\r\n      <!-- 搜索表单区域 -->\r\n      <div class=\"search-form\">\r\n        <el-form :model=\"searchForm\" inline>\r\n          <el-form-item label=\"搜索关键词\">\r\n            <el-input\r\n              v-model=\"searchForm.keyword\"\r\n              placeholder=\"请输入搜索关键词\"\r\n              clearable\r\n              @keyup.enter=\"searchImages\"\r\n            >\r\n              <template #prefix>\r\n                <el-icon><Search /></el-icon>\r\n              </template>\r\n            </el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"搜索数量\">\r\n            <el-input-number\r\n              v-model=\"searchForm.amount\"\r\n              :min=\"1\"\r\n              :max=\"50\"\r\n              :step=\"5\"\r\n              controls-position=\"right\"\r\n            />\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button\r\n              type=\"primary\"\r\n              @click=\"searchImages\"\r\n              :loading=\"searching\"\r\n              :disabled=\"!searchForm.keyword || cancelingSearch\"\r\n              v-if=\"!searching\"\r\n            >\r\n              <el-icon><Search /></el-icon> 搜索\r\n            </el-button>\r\n            <el-button\r\n              type=\"danger\"\r\n              @click=\"cancelSearch\"\r\n              :disabled=\"cancelingSearch\"\r\n              v-else\r\n            >\r\n              <el-icon><Close /></el-icon> 取消搜索\r\n            </el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n\r\n      <!-- 搜索结果网格区域 -->\r\n      <div class=\"search-results-container\" v-loading=\"searching\">\r\n        <template v-if=\"searchResults.length > 0\">\r\n          <div class=\"search-results-header\">\r\n            <div class=\"result-count\">共找到 {{ searchResults.length }} 张图片</div>\r\n            <div class=\"selection-info\">\r\n              <el-tag v-if=\"selectedImages.length > 0\" type=\"info\" effect=\"plain\">\r\n                已选择: {{ selectedImages.length }}张\r\n              </el-tag>\r\n              <el-button\r\n                type=\"primary\"\r\n                size=\"small\"\r\n                @click=\"toggleSelectAll\"\r\n                :disabled=\"searchResults.length === 0\"\r\n              >\r\n                {{ isAllSelected ? '取消全选' : '全选' }}\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"search-results-grid\">\r\n            <div\r\n              v-for=\"(image, index) in searchResults\"\r\n              :key=\"index\"\r\n              class=\"search-result-item\"\r\n              :class=\"{ 'selected': isImageSelected(image) }\"\r\n              @click=\"toggleImageSelection(image)\"\r\n            >\r\n              <div class=\"image-container\">\r\n                <!-- 添加左上角可爱复选框 -->\r\n                <div class=\"cute-checkbox\" @click.stop=\"toggleImageSelection(image)\">\r\n                  <div class=\"checkbox-inner\" :class=\"{ 'checked': isImageSelected(image) }\">\r\n                    <el-icon v-if=\"isImageSelected(image)\"><Check /></el-icon>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"image-wrapper\" @click.stop=\"previewImage(image, index)\">\r\n                  <img \r\n                    :src=\"image.url\" \r\n                    alt=\"搜索结果\" \r\n                    class=\"result-image\" \r\n                    @error=\"handleImageError($event, image)\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                  <div v-if=\"image.loadError\" class=\"image-error-overlay\">\r\n                    <el-icon><Warning /></el-icon>\r\n                    <span>图片加载失败</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- 删除选中角标，改用左上角复选框 -->\r\n              </div>\r\n              <!-- 删除图片来源信息区域 -->\r\n            </div>\r\n          </div>\r\n        </template>\r\n        \r\n        <div v-else-if=\"!searching\" class=\"empty-search-results\">\r\n          <el-empty description=\"暂无搜索结果\">\r\n            <template #description>\r\n              <p>{{ hasSearched ? '未找到匹配的图片，请尝试其他关键词' : '请输入关键词搜索底图' }}</p>\r\n            </template>\r\n          </el-empty>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"handleCancel\">取消</el-button>\r\n        <el-button\r\n          type=\"primary\"\r\n          @click=\"handleConfirm\"\r\n          :disabled=\"selectedImages.length === 0\"\r\n        >\r\n          确定 (已选择 {{ selectedImages.length }} 张)\r\n        </el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n\r\n  <!-- 全屏图片预览 -->\r\n  <div v-if=\"previewVisible\" class=\"full-image-preview\" @click=\"closePreview\">\r\n    <div class=\"full-image-container\">\r\n      <img :src=\"previewImageUrl\" alt=\"全屏预览\" class=\"full-preview-image\" />\r\n      \r\n      <!-- 页码信息显示 -->\r\n      <div class=\"full-preview-number\">{{ currentPreviewIndex + 1 }}/{{ searchResults.length }}</div>\r\n      \r\n      <!-- 关闭按钮 -->\r\n      <button class=\"full-preview-close\" @click.stop=\"closePreview\">\r\n        <el-icon><Close /></el-icon>\r\n      </button>\r\n      \r\n      <!-- 控制按钮 -->\r\n      <div class=\"full-preview-controls\">\r\n        <el-button circle @click.stop=\"prevImage\" :disabled=\"currentPreviewIndex === 0\">\r\n          <el-icon><ArrowLeft /></el-icon>\r\n        </el-button>\r\n        <el-button circle @click.stop=\"nextImage\" :disabled=\"currentPreviewIndex >= (searchResults.length - 1)\">\r\n          <el-icon><ArrowRight /></el-icon>\r\n        </el-button>\r\n      </div>\r\n      \r\n      <!-- 选择按钮 -->\r\n      <el-button \r\n        class=\"full-preview-select\" \r\n        :type=\"isImageSelected(searchResults[currentPreviewIndex]) ? 'danger' : 'primary'\"\r\n        @click.stop=\"toggleImageSelection(searchResults[currentPreviewIndex])\"\r\n      >\r\n        {{ isImageSelected(searchResults[currentPreviewIndex]) ? '取消选择' : '选择此图片' }}\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, defineProps, defineEmits, onUnmounted } from 'vue'\r\nimport { Search, Check, Warning, Close, ArrowLeft, ArrowRight } from '@element-plus/icons-vue'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n// 定义属性\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  selectedImages: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n})\r\n\r\n// 定义事件\r\nconst emit = defineEmits(['update:visible', 'select'])\r\n\r\n// 搜索表单\r\nconst searchForm = ref({\r\n  keyword: '',\r\n  amount: 20 // 默认搜索20张\r\n})\r\n\r\n// 对话框可见性，通过计算属性双向绑定\r\nconst dialogVisible = computed({\r\n  get: () => props.visible,\r\n  set: (val) => emit('update:visible', val)\r\n})\r\n\r\n// 搜索状态和结果\r\nconst searching = ref(false)\r\nconst searchResults = ref([])\r\nconst hasSearched = ref(false)\r\nconst abortController = ref(null)\r\nconst cancelingSearch = ref(false)\r\n\r\n// 选中的图片\r\nconst selectedImages = ref([])\r\n\r\n// 图片预览相关状态\r\nconst previewVisible = ref(false)\r\nconst previewImageUrl = ref('')\r\nconst currentPreviewIndex = ref(0)\r\n\r\n// 在对话框打开时，初始化已选择的图片\r\nwatch(() => props.visible, (val) => {\r\n  if (val) {\r\n    // 先清空内部选中状态\r\n    selectedImages.value = []\r\n    \r\n    // 然后复制父组件传入的已选图片数组\r\n    if (props.selectedImages && props.selectedImages.length > 0) {\r\n      // 使用深拷贝避免引用问题\r\n      selectedImages.value = props.selectedImages.map(img => ({...img}))\r\n    }\r\n    \r\n    // 如果有搜索结果，重新匹配选中状态\r\n    if (searchResults.value.length > 0) {\r\n      // 更新搜索结果中的图片选中状态\r\n      updateSelectionState()\r\n    }\r\n  }\r\n})\r\n\r\n// 添加新函数来更新搜索结果中的选中状态\r\nconst updateSelectionState = () => {\r\n  // 创建一个集合存储所有已选图片的URL和originalUrl\r\n  const selectedUrls = new Set();\r\n  \r\n  // 收集所有已选图片的URL和originalUrl\r\n  selectedImages.value.forEach(image => {\r\n    if (image.url) selectedUrls.add(image.url);\r\n    if (image.originalUrl) selectedUrls.add(image.originalUrl);\r\n    if (image.displayUrl) selectedUrls.add(image.displayUrl);\r\n  });\r\n  \r\n  // 在控制台输出日志，帮助调试\r\n  console.log('更新选中状态，已选图片URL:', Array.from(selectedUrls));\r\n  \r\n  // 检查搜索结果中的每张图片是否在已选集合中\r\n  searchResults.value.forEach(image => {\r\n    // 将图片标记为已检查过选中状态\r\n    image.selectionChecked = true;\r\n    \r\n    // 检查当前图片的各种URL形式是否匹配已选图片\r\n    const isSelected = selectedUrls.has(image.url) || \r\n                       selectedUrls.has(image.originalUrl) ||\r\n                       (image.url && selectedUrls.has(decodeURIComponent(image.url)));\r\n    \r\n    // 如果是已选图片但未在选中列表中，添加到选中列表\r\n    if (isSelected && !isImageSelected(image)) {\r\n      selectedImages.value.push({...image});\r\n      console.log('添加到选中列表:', image.url);\r\n    }\r\n  });\r\n}\r\n\r\n// 修改判断图片是否被选中的函数，使其更强大\r\nconst isImageSelected = (image) => {\r\n  if (!image) return false;\r\n  \r\n  return selectedImages.value.some(selected => {\r\n    // 检查多种可能的URL匹配\r\n    return (\r\n      selected.url === image.url || \r\n      selected.originalUrl === image.originalUrl ||\r\n      selected.url === image.originalUrl ||\r\n      selected.originalUrl === image.url ||\r\n      // 处理可能的URL编码差异\r\n      (selected.url && image.url && decodeURIComponent(selected.url) === decodeURIComponent(image.url))\r\n    );\r\n  });\r\n}\r\n\r\n// 计算是否全选\r\nconst isAllSelected = computed(() => {\r\n  return searchResults.value.length > 0 && \r\n         searchResults.value.every(image => isImageSelected(image))\r\n})\r\n\r\n// 取消搜索\r\nconst cancelSearch = () => {\r\n  if (!abortController.value) return\r\n  \r\n  cancelingSearch.value = true\r\n  ElMessage.info('正在取消搜索...')\r\n  \r\n  try {\r\n    // 中止请求\r\n    abortController.value.abort()\r\n    abortController.value = null\r\n    \r\n    // 重置搜索状态\r\n    setTimeout(() => {\r\n      searching.value = false\r\n      cancelingSearch.value = false\r\n      ElMessage.success('已取消搜索')\r\n    }, 300)\r\n  } catch (error) {\r\n    console.error('取消搜索失败:', error)\r\n    searching.value = false\r\n    cancelingSearch.value = false\r\n  }\r\n}\r\n\r\n// 搜索图片\r\nconst searchImages = async () => {\r\n  if (!searchForm.value.keyword) {\r\n    ElMessage.warning('请输入搜索关键词')\r\n    return\r\n  }\r\n  \r\n  const keyword = searchForm.value.keyword.trim()\r\n  const amount = searchForm.value.amount\r\n  \r\n  // 清空之前选择的图片\r\n  selectedImages.value = []\r\n  \r\n  // 如果有正在进行的搜索，先取消\r\n  if (abortController.value) {\r\n    abortController.value.abort()\r\n  }\r\n  \r\n  // 创建新的 AbortController\r\n  abortController.value = new AbortController()\r\n  const signal = abortController.value.signal\r\n  \r\n  searching.value = true\r\n  hasSearched.value = true\r\n  \r\n  try {\r\n    const response = await fetch(`/api/baidu-image/search?keyword=${encodeURIComponent(keyword)}&amount=${amount}`, {\r\n      signal\r\n    })\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`搜索请求失败: ${response.status} ${response.statusText}`)\r\n    }\r\n    \r\n    const data = await response.json()\r\n    console.log('搜索返回数据:', data)\r\n    \r\n    if (data.code === 0 && data.data) {\r\n      // 处理返回的图片数据\r\n      const images = Array.isArray(data.data) ? data.data : []\r\n      \r\n      searchResults.value = images.map((url, index) => {\r\n        // 提取可能包含的宽高信息\r\n        let width = null\r\n        let height = null\r\n        \r\n        // 尝试从URL中提取宽高信息\r\n        try {\r\n          const widthMatch = url.match(/w=(\\d+)/i)\r\n          const heightMatch = url.match(/h=(\\d+)/i)\r\n          \r\n          if (widthMatch && widthMatch[1]) width = parseInt(widthMatch[1])\r\n          if (heightMatch && heightMatch[1]) height = parseInt(heightMatch[1])\r\n        } catch(e) {\r\n          console.error('提取图片尺寸信息失败:', e)\r\n        }\r\n        \r\n        // 检查URL格式，如果是代理URL则直接使用，否则使用原始URL\r\n        // 代理URL通常格式为 /api/baidu-image/proxy?url=...\r\n        const isProxyUrl = typeof url === 'string' && url.startsWith('/api/baidu-image/proxy')\r\n        \r\n        return {\r\n          originalUrl: url, // 保存原始URL，用于提交到后端\r\n          url: url, // 直接使用返回的URL，后端已经处理为代理URL\r\n          width: width || '未知',\r\n          height: height || '未知',\r\n          source: '百度图片',\r\n          title: keyword,\r\n          index: index\r\n        }\r\n      })\r\n      \r\n      if (searchResults.value.length === 0) {\r\n        ElMessage.info('未找到符合条件的图片，请尝试其他关键词')\r\n      } else {\r\n        ElMessage.success(`找到 ${searchResults.value.length} 张符合条件的图片`)\r\n        \r\n        // 搜索完成后更新图片选中状态\r\n        updateSelectionState();\r\n      }\r\n    } else {\r\n      ElMessage.error(data.message || '搜索失败，请重试')\r\n      searchResults.value = []\r\n    }\r\n  } catch (error) {\r\n    // 检查是否是因为中止请求导致的错误\r\n    if (error.name === 'AbortError') {\r\n      console.log('搜索请求已被取消')\r\n      return\r\n    }\r\n    \r\n    console.error('搜索图片失败:', error)\r\n    ElMessage.error(`搜索失败: ${error.message}`)\r\n    searchResults.value = []\r\n  } finally {\r\n    // 请求完成或出错，清理AbortController\r\n    abortController.value = null\r\n    searching.value = false\r\n  }\r\n}\r\n\r\n// 切换选择/取消选择图片\r\nconst toggleImageSelection = (image) => {\r\n  if (isImageSelected(image)) {\r\n    // 取消选择 - 优化筛选条件以处理不同的URL格式\r\n    selectedImages.value = selectedImages.value.filter(selected => {\r\n      // 排除所有可能匹配当前图片的条目\r\n      return !(\r\n        selected.url === image.url || \r\n        selected.originalUrl === image.originalUrl ||\r\n        selected.url === image.originalUrl ||\r\n        selected.originalUrl === image.url ||\r\n        (selected.url && image.url && decodeURIComponent(selected.url) === decodeURIComponent(image.url))\r\n      );\r\n    });\r\n  } else {\r\n    // 选择\r\n    selectedImages.value.push({...image}); // 使用解构复制避免引用问题\r\n  }\r\n}\r\n\r\n// 全选/取消全选\r\nconst toggleSelectAll = () => {\r\n  if (isAllSelected.value) {\r\n    // 取消全选\r\n    selectedImages.value = []\r\n  } else {\r\n    // 全选\r\n    // 使用map创建新对象数组，避免引用问题\r\n    selectedImages.value = searchResults.value.map(img => ({...img}))\r\n  }\r\n}\r\n\r\n// 确认选择\r\nconst handleConfirm = () => {\r\n  // 触发选择事件，将选中的图片传递给父组件\r\n  // 从URL中提取原始百度图片链接给后端使用\r\n  const selectedOriginalImages = selectedImages.value.map(image => {\r\n    let originalBaiduUrl = image.originalUrl;\r\n    \r\n    // 如果是代理URL，则尝试提取出原始百度URL\r\n    if (typeof originalBaiduUrl === 'string' && originalBaiduUrl.startsWith('/api/baidu-image/proxy')) {\r\n      try {\r\n        // 从代理URL中提取出原始URL参数\r\n        const urlParamMatch = originalBaiduUrl.match(/url=([^&]+)/);\r\n        if (urlParamMatch && urlParamMatch[1]) {\r\n          originalBaiduUrl = decodeURIComponent(urlParamMatch[1]);\r\n        }\r\n      } catch (e) {\r\n        console.error('从代理URL提取原始URL失败:', e);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      ...image,\r\n      // 展示用代理URL，提交用原始URL\r\n      displayUrl: image.url,\r\n      url: originalBaiduUrl\r\n    };\r\n  });\r\n  \r\n  emit('select', selectedOriginalImages);\r\n}\r\n\r\n// 取消选择\r\nconst handleCancel = () => {\r\n  // 如果正在搜索，取消搜索\r\n  if (searching.value) {\r\n    cancelSearch()\r\n  }\r\n  \r\n  // 不保存选择，直接关闭\r\n  dialogVisible.value = false\r\n}\r\n\r\n// 关闭对话框前的处理\r\nconst handleClose = () => {\r\n  // 如果正在搜索，取消搜索\r\n  if (searching.value) {\r\n    cancelSearch()\r\n  }\r\n  \r\n  // 对话框关闭时重置内部状态\r\n  // 注意：不清空searchResults，以便用户下次打开时继续浏览\r\n  // 但要重置选中状态，避免下次打开时无法取消选择的问题\r\n  selectedImages.value = []\r\n}\r\n\r\n// 处理图片加载错误\r\nconst handleImageError = (event, image) => {\r\n  console.error(`图片加载失败: ${image.url}`, event);\r\n  image.loadError = true;\r\n  \r\n  // 尝试添加时间戳刷新图片缓存\r\n  if (!image.retried) {\r\n    image.retried = true;\r\n    image.url = `${image.url}${image.url.includes('?') ? '&' : '?'}_t=${Date.now()}`;\r\n    \r\n    // 重置错误状态，给图片一次重试机会\r\n    setTimeout(() => {\r\n      image.loadError = false;\r\n    }, 100);\r\n  }\r\n}\r\n\r\n// 预览图片\r\nconst previewImage = (image, index) => {\r\n  if (image.loadError) return; // 加载失败的图片不预览\r\n  \r\n  previewImageUrl.value = image.url\r\n  currentPreviewIndex.value = index\r\n  previewVisible.value = true\r\n  \r\n  // 阻止页面滚动\r\n  document.body.style.overflow = 'hidden'\r\n  \r\n  // 添加键盘事件监听\r\n  document.addEventListener('keydown', handleKeyDown)\r\n}\r\n\r\n// 关闭预览\r\nconst closePreview = () => {\r\n  previewVisible.value = false\r\n  \r\n  // 恢复页面滚动\r\n  document.body.style.overflow = ''\r\n  \r\n  // 移除键盘事件监听\r\n  document.removeEventListener('keydown', handleKeyDown)\r\n}\r\n\r\n// 处理键盘事件\r\nconst handleKeyDown = (event) => {\r\n  if (event.key === 'Escape') {\r\n    closePreview()\r\n  } else if (event.key === 'ArrowLeft') {\r\n    prevImage()\r\n  } else if (event.key === 'ArrowRight') {\r\n    nextImage()\r\n  }\r\n}\r\n\r\n// 上一张图片\r\nconst prevImage = () => {\r\n  if (currentPreviewIndex.value > 0) {\r\n    currentPreviewIndex.value--\r\n    previewImageUrl.value = searchResults.value[currentPreviewIndex.value].url\r\n  }\r\n}\r\n\r\n// 下一张图片\r\nconst nextImage = () => {\r\n  if (currentPreviewIndex.value < searchResults.value.length - 1) {\r\n    currentPreviewIndex.value++\r\n    previewImageUrl.value = searchResults.value[currentPreviewIndex.value].url\r\n  }\r\n}\r\n\r\n// 确保组件卸载时清理副作用\r\nonUnmounted(() => {\r\n  document.body.style.overflow = ''\r\n  document.removeEventListener('keydown', handleKeyDown)\r\n  \r\n  // 如果有未完成的搜索请求，取消它\r\n  if (abortController.value) {\r\n    abortController.value.abort()\r\n    abortController.value = null\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.image-search-dialog {\r\n  :deep(.el-dialog) {\r\n    border-radius: 16px;\r\n    overflow: hidden;\r\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\r\n    border: 1px solid rgba(144, 150, 255, 0.3);\r\n    \r\n    .el-dialog__header {\r\n      background: linear-gradient(135deg, rgba(144, 150, 255, 1), rgba(133, 200, 255, 1));\r\n      color: white;\r\n      padding: 16px 20px;\r\n      \r\n      .el-dialog__title {\r\n        color: white;\r\n        font-weight: 600;\r\n      }\r\n      \r\n      .el-dialog__headerbtn .el-dialog__close {\r\n        color: rgba(255, 255, 255, 0.9);\r\n        \r\n        &:hover {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  :deep(.el-dialog__body) {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .search-dialog-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 70vh;\r\n    min-height: 400px;\r\n  }\r\n  \r\n  .search-form {\r\n    margin-bottom: 15px;\r\n    padding: 5px;\r\n    \r\n    :deep(.el-form-item__label) {\r\n      font-weight: 500;\r\n    }\r\n    \r\n    :deep(.el-button--primary) {\r\n      background: linear-gradient(135deg, rgba(144, 150, 255, 1), rgba(133, 200, 255, 1));\r\n      border: none;\r\n      \r\n      &:hover {\r\n        opacity: 0.9;\r\n      }\r\n    }\r\n    \r\n    :deep(.el-button--danger) {\r\n      background: linear-gradient(135deg, #f56c6c, #ff9b9b);\r\n      border: none;\r\n      \r\n      &:hover {\r\n        opacity: 0.9;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .search-results-container {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding: 10px;\r\n    background-color: #f5f7fa;\r\n    border-radius: 12px;\r\n    \r\n    .search-results-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 10px;\r\n      padding: 10px;\r\n      background: rgba(255, 255, 255, 0.8);\r\n      border-radius: 8px;\r\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n      \r\n      .result-count {\r\n        font-size: 14px;\r\n        color: #606266;\r\n        font-weight: 500;\r\n      }\r\n      \r\n      .selection-info {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 10px;\r\n      }\r\n    }\r\n    \r\n    .search-results-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n      gap: 15px;\r\n      padding: 10px;\r\n    }\r\n    \r\n    .search-result-item {\r\n      border-radius: 12px;\r\n      overflow: hidden;\r\n      box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.1);\r\n      transition: all 0.3s;\r\n      cursor: pointer;\r\n      background-color: #fff;\r\n      position: relative;\r\n      \r\n      &:hover {\r\n        transform: translateY(-5px);\r\n        box-shadow: 0 8px 18px rgba(0, 0, 0, 0.15);\r\n      }\r\n      \r\n      &.selected {\r\n        border: 2px solid var(--el-color-primary);\r\n        box-shadow: 0 0 0 3px rgba(144, 150, 255, 0.3);\r\n      }\r\n      \r\n      .image-container {\r\n        position: relative;\r\n        width: 100%;\r\n        height: 160px;\r\n        overflow: hidden;\r\n        \r\n        /* 添加可爱的复选框样式 */\r\n        .cute-checkbox {\r\n          position: absolute;\r\n          top: 10px;\r\n          left: 10px;\r\n          z-index: 3;\r\n          cursor: pointer;\r\n          \r\n          .checkbox-inner {\r\n            width: 24px;\r\n            height: 24px;\r\n            border-radius: 8px;\r\n            background: rgba(255, 255, 255, 0.8);\r\n            border: 2px solid rgba(144, 150, 255, 0.5);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            transition: all 0.2s ease;\r\n            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n            \r\n            &:hover {\r\n              transform: scale(1.1);\r\n              border-color: rgba(144, 150, 255, 0.8);\r\n            }\r\n            \r\n            &.checked {\r\n              background: linear-gradient(135deg, rgba(144, 150, 255, 1), rgba(133, 200, 255, 1));\r\n              border-color: transparent;\r\n              \r\n              .el-icon {\r\n                color: white;\r\n                font-size: 16px;\r\n                font-weight: bold;\r\n                animation: checkbox-pop 0.3s ease-out;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        .image-wrapper {\r\n          position: relative;\r\n          width: 100%;\r\n          height: 100%;\r\n          overflow: hidden;\r\n          cursor: zoom-in;\r\n          \r\n          .result-image {\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: cover;\r\n            transition: transform 0.3s;\r\n          }\r\n          \r\n          .image-error-overlay {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            background-color: rgba(0, 0, 0, 0.6);\r\n            color: #fff;\r\n            z-index: 1;\r\n            \r\n            .el-icon {\r\n              font-size: 24px;\r\n              margin-bottom: 8px;\r\n              color: #F56C6C;\r\n            }\r\n            \r\n            span {\r\n              font-size: 12px;\r\n            }\r\n          }\r\n          \r\n          &:hover .result-image {\r\n            transform: scale(1.05);\r\n          }\r\n        }\r\n        \r\n        /* 删除图片选中角标和操作区域 */\r\n        .image-selected-badge,\r\n        .image-actions {\r\n          display: none;\r\n        }\r\n      }\r\n      \r\n      /* 删除图片信息区域 */\r\n      .image-info {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .empty-search-results {\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  :deep(.el-dialog__footer) {\r\n    border-top: 1px solid #eee;\r\n    padding: 15px 20px;\r\n    \r\n    .el-button--primary {\r\n      background: linear-gradient(135deg, rgba(144, 150, 255, 1), rgba(133, 200, 255, 1));\r\n      border: none;\r\n      \r\n      &:hover {\r\n        opacity: 0.9;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* 添加复选框动画 */\r\n@keyframes checkbox-pop {\r\n  0% {\r\n    transform: scale(0);\r\n    opacity: 0;\r\n  }\r\n  70% {\r\n    transform: scale(1.2);\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n// 添加图片代理支持，在URL路径前添加\r\n.result-image[src^=\"http\"] {\r\n  object-fit: contain;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n// 全屏图片预览样式\r\n.full-image-preview {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.9);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 9999;\r\n  \r\n  .full-image-container {\r\n    position: relative;\r\n    max-width: 85%;\r\n    max-height: 85%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    \r\n    .full-preview-image {\r\n      max-width: 100%;\r\n      max-height: 85vh;\r\n      object-fit: contain;\r\n      border-radius: 8px;\r\n      border: 2px solid rgba(255, 255, 255, 0.2);\r\n      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n    }\r\n    \r\n    .full-preview-number {\r\n      position: absolute;\r\n      top: 20px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      color: white;\r\n      padding: 5px 15px;\r\n      border-radius: 20px;\r\n      font-size: 14px;\r\n      font-weight: 500;\r\n      z-index: 10001;\r\n    }\r\n    \r\n    .full-preview-close {\r\n      position: absolute;\r\n      top: 20px;\r\n      right: 20px;\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      color: white;\r\n      border: none;\r\n      border-radius: 50%;\r\n      width: 40px;\r\n      height: 40px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      cursor: pointer;\r\n      z-index: 10001;\r\n      transition: all 0.3s;\r\n      \r\n      &:hover {\r\n        background-color: rgba(0, 0, 0, 0.8);\r\n        transform: scale(1.1);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /* 将控制按钮从容器内移到外部，固定位置 */\r\n  .full-preview-controls {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    pointer-events: none;\r\n    z-index: 10000;\r\n    \r\n    .el-button {\r\n      position: absolute;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      pointer-events: auto;\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      border: 1px solid rgba(255, 255, 255, 0.2);\r\n      color: white;\r\n      width: 44px;\r\n      height: 44px;\r\n      transition: all 0.3s;\r\n      \r\n      &:first-child {\r\n        left: 400px;\r\n      }\r\n      \r\n      &:last-child {\r\n        right: 400px;\r\n      }\r\n      \r\n      &:hover {\r\n        background-color: rgba(255, 255, 255, 0.1);\r\n        transform: translateY(-50%) scale(1.1);\r\n      }\r\n      \r\n      &[disabled] {\r\n        background-color: rgba(0, 0, 0, 0.2);\r\n        color: rgba(255, 255, 255, 0.3);\r\n        transform: translateY(-50%);\r\n      }\r\n    }\r\n  }\r\n  \r\n  .full-preview-select {\r\n    position: absolute;\r\n    bottom: 30px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    z-index: 10001;\r\n    background: linear-gradient(135deg, rgba(144, 150, 255, 1), rgba(133, 200, 255, 1));\r\n    border: none;\r\n    color: white;\r\n    border-radius: 24px;\r\n    padding: 10px 24px;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n    \r\n    &:hover {\r\n      opacity: 0.9;\r\n      transform: translateX(-50%) translateY(-2px);\r\n    }\r\n    \r\n    &.el-button--danger {\r\n      background: linear-gradient(135deg, #f56c6c, #e74c3c);\r\n    }\r\n  }\r\n}\r\n</style> ","export default \"__VITE_ASSET__Dlr6kXOc__\"","<template>\r\n  <div class=\"create-task-container\">\r\n    <div class=\"task-header\">\r\n      <h2></h2>\r\n    </div>\r\n    \r\n    <div class=\"two-column-layout\">\r\n      <!-- 左侧配置区域 -->\r\n      <div class=\"left-config-area\">\r\n        <div class=\"left-content-wrapper\">\r\n          <div class=\"cards-container\">\r\n            \r\n            <!-- 参数配置卡片 -->\r\n            <div class=\"config-card\">\r\n              <div class=\"card-header\">\r\n                <span class=\"card-title\">参数配置</span>\r\n                <!-- 添加面板切换按钮 -->\r\n                <div class=\"panel-switch-wrapper\">\r\n                  <el-radio-group v-model=\"formData.panelMode\" size=\"small\" class=\"panel-switch-group\">\r\n                    <el-radio-button label=\"single\">单图模式</el-radio-button>\r\n                    <el-radio-button label=\"mosaic\" :disabled=\"true\">拼图模式</el-radio-button>\r\n                  </el-radio-group>\r\n                </div>\r\n              </div>\r\n              <div class=\"card-content\">\r\n                <!-- 任务名称输入 -->\r\n                <div class=\"section\">\r\n                  <div class=\"section-header\">\r\n                    <span>任务名称<span class=\"required-mark\">*</span></span>\r\n                  </div>\r\n                  <div class=\"input-wrapper\">\r\n                    <el-input \r\n                      v-model=\"formData.taskName\" \r\n                      placeholder=\"请输入任务名称\"\r\n                      clearable\r\n                    >\r\n                      <template #prefix>\r\n                        <el-icon><Document /></el-icon>\r\n                      </template>\r\n                    </el-input>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- 模板 -->\r\n                <div class=\"section\">\r\n                  <div class=\"section-header\">    \r\n                    <span>模板</span>\r\n                    <span v-if=\"formData.selectedTemplateNames.length > 0\" class=\"template-count\">\r\n                      已选择 {{ formData.selectedTemplateNames.length }} 个模板\r\n                    </span>\r\n                  </div>\r\n                  <div class=\"image-upload-wrapper\">\r\n                    <div class=\"watermark-uploader\" @click=\"selectTemplate\">\r\n                      <div class=\"upload-box\">\r\n                        <template v-if=\"formData.selectedTemplateNames.length\">\r\n                          <span class=\"selected-name\">{{ formData.selectedTemplateNames.join(', ') }}</span>\r\n                        </template>\r\n                        <div v-else class=\"upload-placeholder\">\r\n                          <el-icon class=\"upload-icon\"><Plus /></el-icon>\r\n                          <span>选择模板</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <el-button class=\"upload-action-btn\" @click=\"addTemplateDialogVisible = true\">\r\n                      <el-icon><Upload /></el-icon>\r\n                    </el-button>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- AI底图尺寸选择 -->\r\n                <div class=\"section\" v-if=\"formData.imageSourceType === 'ai' && formData.templateIds.length === 0\">\r\n                  <div class=\"section-header\">\r\n                    <span>底图尺寸<span class=\"required-mark\">*</span></span>\r\n                  </div>\r\n                  <div class=\"size-selector\">\r\n                    <el-select v-model=\"formData.imageSize\" placeholder=\"请选择AI底图尺寸\" class=\"w-100\">\r\n                      <!-- 方形 -->\r\n                      <el-option\r\n                        v-for=\"item in imageSizeOptions.filter(item => item.orientation === '方形')\"\r\n                        :key=\"item.value\"\r\n                        :label=\"`${item.label} (${item.orientation})`\"\r\n                        :value=\"item.value\">\r\n                      </el-option>\r\n                      \r\n                      <el-divider content-position=\"center\">横版</el-divider>\r\n                      \r\n                      <!-- 横版 -->\r\n                      <el-option\r\n                        v-for=\"item in imageSizeOptions.filter(item => item.orientation === '横版')\"\r\n                        :key=\"item.value\"\r\n                        :label=\"`${item.label} (${item.orientation})`\"\r\n                        :value=\"item.value\">\r\n                      </el-option>\r\n                      \r\n                      <el-divider content-position=\"center\">竖版</el-divider>\r\n                      \r\n                      <!-- 竖版 -->\r\n                      <el-option\r\n                        v-for=\"item in imageSizeOptions.filter(item => item.orientation === '竖版')\"\r\n                        :key=\"item.value\"\r\n                        :label=\"`${item.label} (${item.orientation})`\"\r\n                        :value=\"item.value\">\r\n                      </el-option>\r\n                    </el-select>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- 底图配置区域 -->\r\n                <div class=\"section\">\r\n                  <div class=\"section-header\">\r\n                    <span>底图配置<span class=\"required-mark\">*</span></span>\r\n                  </div>\r\n                  \r\n                  <!-- 底图类型选择器 - 胶囊式 -->\r\n                  <div class=\"image-source-selector\">\r\n                    <div class=\"image-source-capsule\">\r\n                      <div \r\n                        class=\"option-indicator\" \r\n                        :class=\"{ \r\n                          'at-custom': formData.imageSourceType === 'custom',\r\n                          'at-search': formData.imageSourceType === 'search'\r\n                        }\"\r\n                      ></div>\r\n                      <div \r\n                        class=\"option-item\" \r\n                        :class=\"{ 'active': formData.imageSourceType === 'ai' }\"\r\n                        @click=\"formData.imageSourceType = 'ai'\"\r\n                      >\r\n                        AI底图\r\n                      </div>\r\n                      <div \r\n                        class=\"option-item\" \r\n                        :class=\"{ 'active': formData.imageSourceType === 'custom' }\"\r\n                        @click=\"formData.imageSourceType = 'custom'\"\r\n                      >\r\n                        自定义底图\r\n                      </div>\r\n                      <div \r\n                        class=\"option-item\" \r\n                        :class=\"{ 'active': formData.imageSourceType === 'search' }\"\r\n                        @click=\"formData.imageSourceType = 'search'\"\r\n                      >\r\n                        搜索底图\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <!-- AI底图配置 -->\r\n                  <div v-if=\"formData.imageSourceType === 'ai'\" class=\"ai-image-config\">\r\n                    <!-- Excel上传区域 -->\r\n                    <div class=\"upload-area\">\r\n                      <el-upload\r\n                        ref=\"excelUploadRef\"\r\n                        action=\"#\"\r\n                        :auto-upload=\"false\"\r\n                        :on-change=\"handleExcelChange\"\r\n                        :on-remove=\"handleExcelRemove\"\r\n                        accept=\".xlsx,.xls\"\r\n                        drag\r\n                        class=\"upload-drag-area\"\r\n                        :file-list=\"excelFileList\"\r\n                        :show-file-list=\"false\"\r\n                      >\r\n                        <template v-if=\"rowCount === 0\">\r\n                          <el-icon class=\"upload-icon\"><Upload /></el-icon>\r\n                          <div class=\"upload-text\">上传/拖动Excel文件到此处</div> \r\n                        </template>\r\n                        <template v-else>\r\n                          <div class=\"excel-info-inner\">\r\n                            <el-icon class=\"success-icon\"><Check /></el-icon>\r\n                            <div class=\"excel-info-text\">已解析 {{ rowCount }} 条数据，将生成 {{ rowCount }} 张图片</div>\r\n                            <el-button type=\"text\" size=\"small\" class=\"remove-file-btn\" @click.stop=\"handleExcelRemove\">\r\n                              <el-icon><Close /></el-icon>\r\n                            </el-button>\r\n                          </div>\r\n                        </template>\r\n                      </el-upload>\r\n                      <div class=\"upload-actions\">\r\n                        <el-button \r\n                          type=\"primary\" \r\n                          size=\"small\" \r\n                          class=\"download-template-btn\"\r\n                          link\r\n                          @click=\"downloadExcelTemplate\"\r\n                        >\r\n                          <el-icon><Download /></el-icon> 下载模板\r\n                        </el-button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <!-- 自定义底图配置 -->\r\n                  <div v-else-if=\"formData.imageSourceType === 'custom'\" class=\"custom-image-config\">\r\n                    <div class=\"upload-area\">\r\n                      <el-upload\r\n                        ref=\"imageUploadRef\"\r\n                        action=\"#\"\r\n                        :auto-upload=\"false\"\r\n                        :on-change=\"handleImageChange\"\r\n                        :on-remove=\"handleImageRemove\"\r\n                        :on-exceed=\"handleExceed\"\r\n                        accept=\"image/*\"\r\n                        :multiple=\"true\"\r\n                        :limit=\"50\"\r\n                        drag\r\n                        class=\"upload-drag-area\"\r\n                        :file-list=\"imageFileList\"\r\n                        :show-file-list=\"false\"\r\n                      >\r\n                        <template v-if=\"imageCount === 0\">\r\n                          <el-icon class=\"upload-icon\"><Upload /></el-icon>\r\n                          <div class=\"upload-text\">上传/拖动图片到此处</div>\r\n                        </template>\r\n                        <template v-else>\r\n                          <div class=\"image-info-inner\">\r\n                            <el-icon class=\"success-icon\"><Check /></el-icon>\r\n                            <div class=\"image-info-text\">已上传 {{ imageCount }} 张图片</div>\r\n                            <el-button type=\"text\" size=\"small\" class=\"remove-file-btn\" @click.stop=\"handleClearAll\">\r\n                              <el-icon><Close /></el-icon>\r\n                            </el-button>\r\n                          </div>\r\n                        </template>\r\n                      </el-upload>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <!-- 搜索底图配置 -->\r\n                  <div v-else-if=\"formData.imageSourceType === 'search'\" class=\"search-image-config\">\r\n                    <div class=\"search-area\" @click=\"openImageSearchDialog\" style=\"height: 100px;\">\r\n                      <div class=\"search-image-placeholder\">\r\n                        <el-icon class=\"search-icon\"><Search /></el-icon>\r\n                        <div class=\"search-text\">点击此处搜索互联网底图</div>\r\n                        <div v-if=\"selectedSearchImages.length > 0\" class=\"selected-images-info\">\r\n                          已选择 {{ selectedSearchImages.length }} 张底图\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <!-- 添加文案输入框 -->\r\n                    <div v-if=\"selectedSearchImages.length > 0\" class=\"search-text-input\">\r\n                      <div class=\"section-header\" style=\"margin-top: 15px;\">\r\n                        <span>文案<span class=\"required-mark\">*</span></span>\r\n                      </div>\r\n                      <el-input\r\n                        v-model=\"searchImagesText\"\r\n                        type=\"textarea\"\r\n                        :rows=\"1\"\r\n                        placeholder=\"请输入文案（所有搜索底图将使用相同文案）\"\r\n                        style=\"margin-bottom: 5px;\"\r\n                      ></el-input>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- 图片命名规则 -->\r\n                <div class=\"section\">\r\n                  <div class=\"section-header\">\r\n                    <span>图片命名规则</span>\r\n                  </div>\r\n                  <div class=\"naming-rule-selector\">\r\n                    <div class=\"naming-input-container\">\r\n                      <el-input \r\n                        v-model=\"formData.customImageName\" \r\n                        placeholder=\"请输入自定义命名规则\"\r\n                        clearable\r\n                      >\r\n                        <template #prefix>\r\n                          <el-icon><Document /></el-icon>\r\n                        </template>\r\n                      </el-input>\r\n                      <div class=\"naming-variables\">\r\n                        <span class=\"variables-title\">可用变量：</span>\r\n                        <div class=\"variables-container\">\r\n                          <el-tag \r\n                            v-for=\"variable in namingVariables\" \r\n                            :key=\"variable.value\"\r\n                            size=\"small\" \r\n                            class=\"variable-tag\"\r\n                            @click=\"insertNamingVariable(variable.value)\"\r\n                          >\r\n                            {{ variable.label }}\r\n                          </el-tag>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"naming-rule-hint\">\r\n                        <el-tag size=\"small\" type=\"info\">预览: {{ getCustomNamingExample() }}</el-tag>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- 操作按钮区域 -->\r\n                <div class=\"card-actions\">\r\n                  <button class=\"create-task-btn\" @click=\"handleSubmit\" :disabled=\"submitting\">\r\n                    <span class=\"btn-icon\">\r\n                      <el-icon><Plus /></el-icon>\r\n                    </span>\r\n                    <span class=\"btn-text\">{{ submitting ? '创建中...' : '创建任务' }}</span>\r\n                  </button>\r\n                  <button class=\"reset-btn\" @click=\"resetForm\">\r\n                    <span class=\"btn-text\">重置</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 右侧预览区域 -->\r\n      <div class=\"right-preview-area\">\r\n        <div class=\"preview-header\">\r\n          <span class=\"preview-title\">结果区域</span>\r\n          <!-- 添加操作按钮 -->\r\n          <div class=\"actions-container\">\r\n            <el-button \r\n              v-if=\"generatedResults.length > 0\"\r\n              type=\"warning\" \r\n              size=\"default\" \r\n              class=\"feedback-btn\"\r\n              @click=\"openFeedbackDialog()\"\r\n            >\r\n              <el-icon><Warning /></el-icon> 效果不理想？点此反馈\r\n            </el-button>\r\n            <el-button \r\n              v-if=\"generatedResults.length > 0\" \r\n              type=\"primary\" \r\n              size=\"default\" \r\n              class=\"download-all-btn\"\r\n              :loading=\"isDownloading\"\r\n              :disabled=\"isDownloading\"\r\n              @click=\"batchDownloadAllImages\"\r\n            >\r\n              <el-icon><Download /></el-icon> {{ downloadButtonText }}\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n        <div class=\"preview-content\">\r\n          <div class=\"result-container\">\r\n            <div v-if=\"generatedResults.length > 0\" class=\"result-grid\">\r\n              <div v-for=\"(result, index) in generatedResults\" :key=\"index\" class=\"result-item\">\r\n                <div class=\"result-image-wrapper\">\r\n                  <div class=\"preview-image-wrapper\" :class=\"{'tall-image': isTallImage(result)}\">\r\n                    <img :src=\"getImageUrl(result.imageUrl)\" alt=\"生成结果\" class=\"preview-image\" @click=\"previewImage(result, index)\" />\r\n                    <!-- 添加重新生成按钮 -->\r\n                    <div v-if=\"formData.imageSourceType === 'ai'\" class=\"regenerate-btn\" @click.stop=\"regenerateImage(result, index)\" :class=\"{'loading': result.regenerating}\" title=\"重新生成此图片\">\r\n                      <el-icon v-if=\"!result.regenerating\"><Refresh /></el-icon>\r\n                      <div v-else class=\"loading-spinner\"></div>\r\n                      <!-- 添加提示文本 -->\r\n                      <span class=\"regenerate-tooltip\">重新生成</span>\r\n                    </div>\r\n                    <!-- 添加全图加载遮罩 -->\r\n                    <div v-if=\"result.regenerating\" class=\"regenerating-overlay\">\r\n                      <div class=\"regenerating-spinner\"></div>\r\n                      <div class=\"regenerating-text\">重新生成中...</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"result-info\">\r\n                  <span class=\"result-name\">{{ result.name }}</span>\r\n                  <span class=\"result-time\">{{ formatTime(result.time) }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- 加载结果区域 -->\r\n            <div v-if=\"isProcessing\" class=\"loading-result\" :class=\"{'with-results': generatedResults.length > 0}\">\r\n              <div class=\"loading-content-wrapper\">\r\n                <div class=\"lottie-container\">\r\n                  <lottie-player\r\n                    src=\"/lottie-animation.json\"\r\n                    background=\"transparent\"\r\n                    speed=\"1\"\r\n                    style=\"width: 400px !important; height: 400px !important; max-width: 100% !important;\"\r\n                    loop\r\n                    autoplay\r\n                  ></lottie-player>\r\n                </div>\r\n                \r\n                <div class=\"loading-text\">\r\n                  {{ isQueued ? '排队中，请稍候...' : processingProgress > 0 ? '正在生成图片...' : '正在处理你的请求...' }}\r\n                </div>\r\n                \r\n                <div v-if=\"processingProgress > 0\" class=\"progress-bar-container\">\r\n                  <div class=\"progress-bar\" :style=\"{width: processingProgress ? `${processingProgress}%` : '0%'}\"></div>\r\n                  <div v-if=\"processingProgress > 0\" class=\"progress-text\">{{ processingProgress }}%</div>\r\n                </div>\r\n                \r\n                <div v-if=\"generatedResults.length > 0\" class=\"generation-status\">\r\n                  已生成 {{ generatedResults.length }} 张图片\r\n                </div>\r\n                \r\n                <div v-if=\"isQueued\" class=\"queue-status\">\r\n                  当前队列位置: {{ queuePosition }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div v-else-if=\"!generatedResults.length\" class=\"empty-result\">\r\n              <el-icon><Picture /></el-icon>\r\n              <span>任务完成后，生成的图片将在此处显示</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 模板库选择对话框 -->\r\n    <el-dialog \r\n      v-model=\"watermarkLibraryVisible\" \r\n      title=\"选择模板\" \r\n      width=\"85%\" \r\n      class=\"template-library-dialog\"\r\n      top=\"5vh\"\r\n    >\r\n      <!-- 对话框内容 -->\r\n      <div class=\"template-dialog-content\">\r\n        <!-- 整体两栏布局 -->\r\n        <div class=\"resource-layout\">\r\n          <!-- 左侧标签列表 -->\r\n          <div class=\"left-panel\">\r\n            <div class=\"my-tags-header\">\r\n              <h3>模板分类</h3>\r\n            </div>\r\n            <div class=\"my-tags-list\">\r\n              <div\r\n                class=\"tag-item all-tag\"\r\n                :class=\"{ active: activeTemplateTag === 'all' }\"\r\n                @click=\"handleTemplateTagClick('all')\"\r\n              >\r\n                <span class=\"tag-icon\"></span>\r\n                <span class=\"tag-name\">全部模板</span>\r\n              </div>\r\n              <div\r\n                v-for=\"(item, index) in templateTags\"\r\n                :key=\"index\"\r\n                class=\"tag-item\"\r\n                :class=\"{ active: activeTemplateTag === item.value }\"\r\n                @click=\"handleTemplateTagClick(item.value)\"\r\n              >\r\n                <span class=\"tag-icon\"></span>\r\n                <span class=\"tag-name\">{{ item.label }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 右侧模板列表 -->\r\n          <div class=\"right-panel\">\r\n            <div class=\"template-list-header\">\r\n              <div class=\"header-search\">\r\n                <el-input\r\n                  v-model=\"templateSearchKey\"\r\n                  placeholder=\"搜索模板...\"\r\n                  clearable\r\n                  @clear=\"searchTemplates\"\r\n                  @input=\"searchTemplates\"\r\n                >\r\n                  <template #prefix>\r\n                    <el-icon><Search /></el-icon>\r\n                  </template>\r\n                </el-input>\r\n              </div>\r\n              <div class=\"header-actions\">\r\n                <el-button \r\n                  type=\"primary\" \r\n                  size=\"small\" \r\n                  @click=\"toggleSelectAll\"\r\n                  :disabled=\"filteredTemplates.length === 0\"\r\n                >\r\n                  {{ isAllSelected ? '取消全选' : '全选' }}\r\n                </el-button>\r\n                <el-tag v-if=\"formData.templateIds.length > 0\" type=\"info\" effect=\"plain\">\r\n                  已选择: {{ formData.templateIds.length }}个\r\n                </el-tag>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"template-list-container\" v-loading=\"templateLoading\">\r\n              <div class=\"template-grid\">\r\n                <div \r\n                  v-for=\"(template, index) in filteredTemplates\" \r\n                  :key=\"index\"\r\n                  class=\"template-item\"\r\n                  :class=\"{ active: formData.templateIds.includes(template.id) }\"\r\n                  @click=\"toggleTemplateSelection(template)\"\r\n                >\r\n                  <div class=\"template-image-container\">\r\n                    <img :src=\"getImageUrl(template.previewImage)\" alt=\"模板预览\" class=\"template-image\" />\r\n                    <div v-if=\"formData.templateIds.includes(template.id)\" class=\"template-selected-badge\">\r\n                      <el-icon><Check /></el-icon>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"template-info\">\r\n                    <div class=\"template-name\">{{ template.name }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- 空状态 -->\r\n              <div v-if=\"filteredTemplates.length === 0\" class=\"empty-state\">\r\n                <el-empty description=\"暂无模板\"></el-empty>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"watermarkLibraryVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"confirmSelectWatermark\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 添加模板对话框 -->\r\n    <el-dialog\r\n      v-model=\"addTemplateDialogVisible\"\r\n      title=\"添加模板\"\r\n      width=\"80%\"\r\n      :before-close=\"() => addTemplateDialogVisible = false\"\r\n      class=\"template-form-dialog\"\r\n      top=\"1vh\"\r\n    >\r\n      <AddTemplateDialog \r\n        :template-tags=\"templateTags\" \r\n        @success=\"handleTemplateAdded\" \r\n        @cancel=\"addTemplateDialogVisible = false\" \r\n      />\r\n    </el-dialog>\r\n\r\n    <!-- 反馈对话框 -->\r\n    <FeedbackDialog\r\n      v-model:visible=\"feedbackDialogVisible\"\r\n      :task-id=\"feedbackTaskId\"\r\n      :task-name=\"feedbackTaskName\"\r\n      :template-info=\"feedbackTemplateInfo\"\r\n      @success=\"handleFeedbackSuccess\"\r\n    />\r\n\r\n    <!-- 添加全屏图片预览 -->\r\n    <div v-if=\"fullPreviewVisible\" class=\"full-image-preview\" @click=\"closeFullPreview\">\r\n      <div class=\"full-image-container\" :class=\"{'tall-image': isTallImage(currentPreviewResult)}\">\r\n        <img :src=\"getImageUrl(currentPreviewResult?.imageUrl)\" alt=\"全屏预览\" class=\"full-preview-image\" />\r\n        \r\n        <!-- 页码信息独立显示 -->\r\n        <div class=\"full-preview-number\">{{ fullPreviewIndex + 1 }}/{{ generatedResults.length }}</div>\r\n        \r\n        <!-- 关闭按钮重新定位 -->\r\n        <button class=\"full-preview-close\" @click.stop=\"closeFullPreview\">\r\n          <el-icon><Close /></el-icon>\r\n        </button>\r\n        \r\n        <!-- 分离的控制按钮 -->\r\n        <div class=\"full-preview-controls\">\r\n          <el-button circle @click.stop=\"prevImage\" :disabled=\"fullPreviewIndex === 0\">\r\n            <el-icon><ArrowLeft /></el-icon>\r\n          </el-button>\r\n          <el-button circle @click.stop=\"nextImage\" :disabled=\"fullPreviewIndex >= (generatedResults.length - 1)\">\r\n            <el-icon><ArrowRight /></el-icon>\r\n          </el-button>\r\n        </div>\r\n        \r\n        <!-- 下载按钮移到右下角，单独定位 -->\r\n        <el-button \r\n          class=\"full-preview-download\" \r\n          circle \r\n          @click.stop=\"downloadImage(currentPreviewResult)\" \r\n          icon=\"Download\"\r\n        >\r\n          <el-icon><Download /></el-icon>\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 搜索底图对话框 -->\r\n    <ImageSearchDialog\r\n      v-model:visible=\"imageSearchDialogVisible\"\r\n      :selected-images=\"selectedSearchImages\"\r\n      @select=\"handleSearchImagesSelected\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { Plus, Upload, Download, Picture, Close, Search, Check, Document, Warning, ArrowLeft, ArrowRight, Refresh } from '@element-plus/icons-vue'\r\nimport AddTemplateDialog from './TemplateForm.vue'  // 导入模板表单组件\r\nimport FeedbackDialog from './FeedbackDialog.vue'  // 导入反馈对话框组件\r\nimport ImageSearchDialog from './ImageSearchDialog.vue' // 导入搜索底图对话框组件\r\nimport { ref, reactive, onMounted, computed, onUnmounted, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport defaultPreviewImg from '@/assets/default-preview.jpg'\r\nimport axios from 'axios'\r\n\r\n// 设置API基础URL前缀\r\nconst API_BASE_URL = '/api/ai'\r\nconsole.log('创建任务使用API基础URL:', API_BASE_URL)\r\n\r\n// 定义不含'/ai'前缀的baseURL - 使用完整URL\r\nconst baseURL = import.meta.env.VITE_API_BASE_URL || ''\r\nconsole.log('创建任务使用baseURL:', baseURL)\r\n\r\n// 默认预览图对象\r\nconst defaultPreviewImage = ref({\r\n  src: defaultPreviewImg,\r\n  width: 512,\r\n  height: 512\r\n})\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n  // 底图配置相关\r\n  imageSourceType: 'ai', // 底图类型：'ai'、'custom' 或 'search'\r\n  excelFile: null, // AI底图时的Excel文件\r\n  imageFiles: [], // 自定义底图时的图片文件\r\n  searchImageUrls: [], // 搜索底图时的图片URL列表\r\n  \r\n  // 公共参数\r\n  imageFormat: 'single',\r\n  panelMode: 'single', // 默认为单图模式\r\n  imageSize: '1:1', // 添加默认图片尺寸\r\n  \r\n  // 模板相关\r\n  templateIds: [], // 数组，支持多选模板\r\n  selectedTemplateNames: [], // 保存已选模板名称数组\r\n  \r\n  // 任务相关\r\n  taskName: '',\r\n  customImageName: '{taskName}_{index}', // 添加自定义命名规则字段\r\n  taskId: '' // 保存任务ID用于下载\r\n})\r\n\r\n// 上传状态和计数\r\nconst submitting = ref(false)\r\nconst isProcessing = ref(false) // 控制加载动画显示\r\nconst watermarkLibraryVisible = ref(false)\r\nconst addTemplateDialogVisible = ref(false)\r\n\r\n// AI底图相关\r\nconst rowCount = ref(0)\r\nconst excelData = ref([]) // 存储Excel解析后的数据\r\nconst excelFileList = ref([]) // 存储上传的Excel文件列表\r\n\r\n// 自定义底图相关\r\nconst imageCount = ref(0)\r\nconst imageFileList = ref([])\r\n\r\n// 加载Lottie动画脚本\r\nconst lottieLoaded = ref(false)\r\n\r\n// 添加命名变量选项\r\nconst namingVariables = computed(() => {\r\n  if (formData.imageSourceType === 'ai') {\r\n    return [\r\n      { label: '{任务名}', value: '{taskName}' },\r\n      { label: '{序号}', value: '{index}' },\r\n      { label: '{日期}', value: '{date}' },\r\n      { label: '{文本1}', value: '{text1}' },\r\n\r\n    ]\r\n  } else if (formData.imageSourceType === 'search') {\r\n    return [\r\n      { label: '{任务名}', value: '{taskName}' },\r\n      { label: '{序号}', value: '{index}' },\r\n      { label: '{日期}', value: '{date}' },\r\n      { label: '{文案}', value: '{text}' }\r\n    ]\r\n  } else {\r\n    return [\r\n      { label: '{任务名}', value: '{taskName}' },\r\n      { label: '{序号}', value: '{index}' },\r\n      { label: '{日期}', value: '{date}' },       \r\n      { label: '{底图文件名}', value: '{original_filename}' }\r\n    ]\r\n  }\r\n})\r\n\r\n// 模板标签和搜索相关状态\r\nconst templateTags = ref([])\r\nconst activeTemplateTag = ref('all')\r\nconst templateSearchKey = ref('')\r\nconst templateLoading = ref(false)\r\nconst templates = ref([])\r\nconst filteredTemplates = ref([])\r\n\r\n// 生成结果数组\r\nconst generatedResults = ref([])\r\n\r\n// 创建一个干净的文件名函数，移除不安全的字符\r\nconst sanitizeForFileName = (str) => {\r\n  if (!str) return '';\r\n  // 移除文件名中不允许的字符\r\n  return str.replace(/[\\\\/:*?\"<>|]/g, '_')\r\n            .replace(/\\s+/g, '_')\r\n            .substring(0, 50); // 限制长度\r\n};\r\n\r\n// 处理模板标签点击\r\nconst handleTemplateTagClick = (tag) => {\r\n  activeTemplateTag.value = tag\r\n  if (tag === 'all') {\r\n    fetchTemplates()\r\n  } else {\r\n    fetchTemplatesByTag(tag)\r\n  }\r\n}\r\n\r\n// 搜索模板\r\nconst searchTemplates = () => {\r\n  if (!templateSearchKey.value.trim()) {\r\n    // 如果搜索框为空，则根据当前选中的标签显示模板\r\n    if (activeTemplateTag.value === 'all') {\r\n      filteredTemplates.value = templates.value\r\n    } else {\r\n      filteredTemplates.value = templates.value.filter(template => \r\n        template.tag === activeTemplateTag.value\r\n      )\r\n    }\r\n    return\r\n  }\r\n  \r\n  // 有搜索关键词则按名称和描述搜索\r\n  const keyword = templateSearchKey.value.toLowerCase()\r\n  filteredTemplates.value = templates.value.filter(template => {\r\n    return template.name.toLowerCase().includes(keyword) || \r\n           (template.description && template.description.toLowerCase().includes(keyword))\r\n  })\r\n}\r\n\r\n// 获取所有模板\r\nconst fetchTemplates = async () => {\r\n  templateLoading.value = true;\r\n  try {\r\n    // 添加时间戳参数避免缓存\r\n    const timestamp = new Date().getTime();\r\n    const response = await axios.get(`${API_BASE_URL}/templates?_t=${timestamp}`);\r\n    if (response.data.success) {\r\n      templates.value = response.data.templates;\r\n      filteredTemplates.value = response.data.templates;\r\n      console.log('模板列表已刷新，共获取到', templates.value.length, '个模板');\r\n    } else {\r\n      ElMessage.error('获取模板列表失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取模板失败:', error);\r\n    ElMessage.error('获取模板列表失败: ' + (error.response?.data?.error || error.message));\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\n// 获取模板标签\r\nconst fetchTemplateTags = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/template-tags`)\r\n    if (response.data.success && response.data.tags.length > 0) {\r\n      templateTags.value = response.data.tags\r\n    }\r\n  } catch (error) {\r\n    console.error('获取模板标签失败:', error)\r\n  }\r\n}\r\n\r\n// 根据标签获取模板\r\nconst fetchTemplatesByTag = async (tag) => {\r\n  templateLoading.value = true\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/templates?tag=${tag}`)\r\n    if (response.data.success) {\r\n      filteredTemplates.value = response.data.templates\r\n    } else {\r\n      ElMessage.error('获取模板列表失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取模板失败:', error)\r\n    ElMessage.error('获取模板列表失败')\r\n  } finally {\r\n    templateLoading.value = false\r\n  }\r\n}\r\n\r\n// 模板添加成功回调\r\nconst handleTemplateAdded = async (newTemplate) => {\r\n  // 关闭添加模板对话框\r\n  addTemplateDialogVisible.value = false;\r\n  // 刷新模板列表\r\n  await fetchTemplates();\r\n  \r\n  // 确保在刷新后能找到新添加的模板\r\n  const refreshedTemplate = templates.value.find(t => t.id === newTemplate.id);\r\n  \r\n  if (refreshedTemplate) {\r\n    // 选择新添加的模板\r\n    formData.templateIds.push(refreshedTemplate.id);\r\n    formData.selectedTemplateNames.push(refreshedTemplate.name);\r\n    \r\n    // 使用模板的AI底图尺寸\r\n    if (refreshedTemplate.imageSize) {\r\n      formData.imageSize = refreshedTemplate.imageSize;\r\n    }\r\n    \r\n    ElMessage.success(`已自动选择新模板: ${refreshedTemplate.name}`);\r\n  } else {\r\n    ElMessage.warning('模板已添加但未能自动选择，请手动选择模板');\r\n  }\r\n};\r\n\r\n// 确认选择模板\r\nconst confirmSelectWatermark = () => {\r\n  // 可以不选择模板，如果没有选择就直接关闭对话框\r\n  if (formData.templateIds.length === 0) {\r\n    watermarkLibraryVisible.value = false;\r\n    return;\r\n  }\r\n  \r\n  // 检查是否有Excel数据\r\n  if (rowCount.value > 0 && formData.templateIds.length > rowCount.value) {\r\n    ElMessage.warning(`选择的模板数量(${formData.templateIds.length})不能超过Excel行数(${rowCount.value})`);\r\n    return;\r\n  }\r\n  \r\n  // 如果已上传Excel，但数量不足，给出提示\r\n  if (rowCount.value > 0 && formData.templateIds.length < rowCount.value) {\r\n    ElMessage.info(`已选择${formData.templateIds.length}个模板，将循环使用这些模板生成${rowCount.value}张图片`);\r\n  }\r\n  \r\n  // 找到一个选中的模板用于设置尺寸（使用第一个）\r\n  if (formData.templateIds.length > 0) {\r\n    const firstSelectedTemplate = templates.value.find(t => t.id === formData.templateIds[0]);\r\n    \r\n    if (firstSelectedTemplate) {\r\n      // 使用第一个模板的尺寸作为参考\r\n      if (firstSelectedTemplate.imageSize) {\r\n        formData.imageSize = firstSelectedTemplate.imageSize;\r\n      }\r\n      \r\n      // 清除之前上传的自定义模板片\r\n      if (formData.watermarkImage) {\r\n        formData.watermarkImage = null;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ElMessage.success(`已选择 ${formData.templateIds.length} 个模板`);\r\n  watermarkLibraryVisible.value = false;\r\n}\r\n\r\n// 格式化时间\r\nconst formatTime = (timestamp) => {\r\n  if (!timestamp) return '';\r\n  const date = new Date(timestamp);\r\n  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\r\n}\r\n\r\n// 修改处理结果的方法\r\nconst processGeneratedResults = async (results) => {\r\n  console.log(`处理生成结果: ${results?.length}项`);\r\n  const processedResults = [];\r\n  \r\n  if (!results || !Array.isArray(results)) {\r\n    console.error('传入的结果不是数组');\r\n    return [];\r\n  }\r\n  \r\n  for (let index = 0; index < results.length; index++) {\r\n    const item = results[index];\r\n    try {\r\n      // 首先检查item是否存在\r\n      if (!item) {\r\n        console.warn(`第${index+1}项结果为空`);\r\n        continue;\r\n      }\r\n      \r\n      // 使用外部指定的索引（如果有），否则使用当前数组索引\r\n      // 这对于确保搜索底图等模式下的正确序号非常重要\r\n      const effectiveIndex = item.generated_index !== undefined ? item.generated_index : index;\r\n      \r\n      // 检查并设置成功状态\r\n      const isSuccess = item.success !== false; // 默认为成功除非明确设置为false\r\n      \r\n      // 生成文件名\r\n      const fileName = generateFileName(item, effectiveIndex);\r\n      \r\n      if (isSuccess) {\r\n        // 检查可能的图片URL字段，按优先级处理\r\n        let finalImageUrl = null;\r\n        \r\n        // 检查各种可能的URL字段\r\n        if (item.imageUrl) {\r\n          finalImageUrl = item.imageUrl;\r\n        } else if (item.image_path) {\r\n          finalImageUrl = item.image_path;\r\n        } else if (item.image && typeof item.image === 'string') {\r\n          finalImageUrl = item.image;\r\n        }\r\n        \r\n        if (finalImageUrl) {\r\n          // 将结果添加到处理后的数组\r\n          processedResults.push({\r\n            ...item,\r\n            index: effectiveIndex, // 使用有效索引\r\n            name: fileName,\r\n            imageUrl: finalImageUrl,\r\n            time: new Date().getTime()\r\n          });\r\n          continue;\r\n        }\r\n        \r\n        // 如果没有找到任何有效的图片URL，使用fallback方案\r\n        if (item.task_id || formData.taskId) {\r\n          const taskId = item.task_id || formData.taskId;\r\n          // 构建fallback URL - 使用effectiveIndex+1确保URL是从1开始的\r\n          const fallbackUrl = `/ai/static/images/text_added_${taskId}_${effectiveIndex+1}.png`;\r\n          \r\n          processedResults.push({\r\n            ...item,\r\n            index: effectiveIndex, // 使用有效索引\r\n            name: fileName,\r\n            imageUrl: fallbackUrl,\r\n            time: new Date().getTime()\r\n          });\r\n        } else {\r\n          console.error('图片数据缺失且无法构建fallback URL:', item);\r\n          // 添加错误状态的结果\r\n          const defaultName = `图片_${(effectiveIndex + 1).toString().padStart(3, '0')}.png`;\r\n          processedResults.push({\r\n            ...item,\r\n            index: effectiveIndex, // 使用有效索引\r\n            name: defaultName,\r\n            imageUrl: null,\r\n            error: '图片数据格式不正确',\r\n            time: new Date().getTime()\r\n          });\r\n        }\r\n      } else {\r\n        // 失败的项目使用默认命名\r\n        console.warn(`第${effectiveIndex+1}项处理失败:`, item.error || '未知错误');\r\n        const defaultName = `图片_${(effectiveIndex + 1).toString().padStart(3, '0')}.png`;\r\n        processedResults.push({\r\n          ...item,\r\n          index: effectiveIndex, // 使用有效索引\r\n          name: defaultName,\r\n          imageUrl: null,\r\n          error: item.error || '图片生成失败',\r\n          time: new Date().getTime()\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(`处理第${index+1}项时出错:`, error);\r\n      // 失败时使用默认命名\r\n      const defaultName = `图片_${(index + 1).toString().padStart(3, '0')}.png`;\r\n      processedResults.push({\r\n        ...item,\r\n        index: index, // 添加索引字段\r\n        name: defaultName,\r\n        imageUrl: null,\r\n        error: error.message || '图片处理失败',\r\n        time: new Date().getTime()\r\n      });\r\n    }\r\n  }\r\n  \r\n  console.log(`处理完成，共${processedResults.length}个结果`);\r\n  return processedResults;\r\n};\r\n\r\n// 根据命名规则生成文件名\r\nconst generateFileName = (item, index) => {\r\n  // 如果没有自定义命名规则，使用默认命名\r\n  if (!formData.customImageName) {\r\n    return `${formData.taskName || '图片'}_${(index + 1).toString().padStart(3, '0')}.png`;\r\n  }\r\n  \r\n  let fileName = formData.customImageName;\r\n  \r\n  // 替换变量\r\n  const taskName = formData.taskName || '未命名任务';\r\n  const indexNum = (index + 1).toString().padStart(3, '0');\r\n  const today = new Date();\r\n  const dateStr = `${today.getFullYear()}${(today.getMonth()+1).toString().padStart(2, '0')}${today.getDate().toString().padStart(2, '0')}`;\r\n  const timeStr = `${today.getHours().toString().padStart(2, '0')}${today.getMinutes().toString().padStart(2, '0')}`;\r\n  \r\n  // 新增过滤@及其后内容的函数\r\n  const filterAt = (str) => {\r\n    if (!str) return '';\r\n    const idx = str.indexOf('@');\r\n    return idx === -1 ? str : str.substring(0, idx);\r\n  };\r\n  \r\n  if (formData.imageSourceType === 'ai') {\r\n    // 获取提示词和文本内容\r\n    const promptValue = extractTextFromHtml(item.prompt || '');\r\n    const text1Value = extractTextFromHtml(item.text1 || '');\r\n    const text2Value = extractTextFromHtml(item.text2 || '');\r\n    \r\n    // 替换变量\r\n    fileName = fileName\r\n      .replace(/{taskName}/g, sanitizeForFileName(taskName))\r\n      .replace(/{index}/g, indexNum)\r\n      .replace(/{date}/g, dateStr)\r\n      .replace(/{time}/g, timeStr)\r\n      .replace(/{text1}/g, sanitizeForFileName(text1Value))\r\n      .replace(/{text2}/g, sanitizeForFileName(text2Value))\r\n      .replace(/{prompt}/g, sanitizeForFileName(promptValue));\r\n  } else if (formData.imageSourceType === 'search') {\r\n    // 搜索底图模式 - 使用用户输入的文案\r\n    const textContent = searchImagesText.value.trim() || `search_image_${index+1}`;\r\n    \r\n    // 替换变量\r\n    fileName = fileName\r\n      .replace(/{taskName}/g, sanitizeForFileName(taskName))\r\n      .replace(/{index}/g, indexNum) // indexNum 已经是正确的序号格式，如 001, 002, 003...\r\n      .replace(/{date}/g, dateStr)\r\n      .replace(/{time}/g, timeStr)\r\n      .replace(/{text}/g, sanitizeForFileName(textContent));\r\n  } else {\r\n    // 自定义底图模式\r\n    let originalFilename = item.original_filename || \r\n      (formData.imageFiles[index] ? \r\n        formData.imageFiles[index].name.substring(0, formData.imageFiles[index].name.lastIndexOf('.')) || `image_${index+1}` : \r\n        `image_${index+1}`);\r\n    \r\n    // 过滤@及其后的内容\r\n    originalFilename = filterAt(originalFilename);\r\n    \r\n    // 替换变量\r\n    fileName = fileName\r\n      .replace(/{taskName}/g, sanitizeForFileName(taskName))\r\n      .replace(/{index}/g, indexNum)\r\n      .replace(/{date}/g, dateStr)\r\n      .replace(/{time}/g, timeStr)\r\n      .replace(/{original_filename}/g, sanitizeForFileName(originalFilename));\r\n  }\r\n  \r\n  // 确保有文件扩展名\r\n  if (!fileName.endsWith('.png') && !fileName.endsWith('.jpg')) {\r\n    fileName += '.png';\r\n  }\r\n  \r\n  return fileName;\r\n};\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  // 收集所有验证错误\r\n  const errors = [];\r\n  \r\n  // 验证任务名称\r\n  if (!formData.taskName) {\r\n    errors.push('任务名称');\r\n  }\r\n\r\n  // 根据底图类型进行验证\r\n  if (formData.imageSourceType === 'ai') {\r\n    // 验证Excel文件上传\r\n    if (!formData.excelFile) {\r\n      errors.push('提示词Excel');\r\n    }\r\n    \r\n    // 如果没有选择模板，验证是否选择了尺寸\r\n    if (formData.templateIds.length === 0 && !formData.imageSize) {\r\n      errors.push('底图尺寸');\r\n    }\r\n    \r\n    // 检查Excel数据条数是否超过限制\r\n    if (rowCount.value > 50) {\r\n      ElMessage.error('提示词数量超过限制，最多支持单次生成50张图片');\r\n      return;\r\n    }\r\n    \r\n    // 检查Excel数据行数是否大于等于模板数量\r\n    if (formData.excelFile && rowCount.value < formData.templateIds.length) {\r\n      ElMessage.warning(`Excel数据行数(${rowCount.value}行)不能少于模板数量(${formData.templateIds.length}个)，请增加数据行数或减少模板数量`);\r\n      return;\r\n    }\r\n  } else if (formData.imageSourceType === 'custom') {\r\n    // 验证自定义底图上传\r\n    if (formData.imageFiles.length === 0) {\r\n      errors.push('底图上传');\r\n    }\r\n\r\n    // 验证图片数量必须大于等于模板数量\r\n    if (formData.imageFiles.length > 0 && formData.imageFiles.length < formData.templateIds.length) {\r\n      ElMessage.warning(`图片数量(${formData.imageFiles.length}张)不能少于模板数量(${formData.templateIds.length}个)，请上传更多图片或减少模板数量`);\r\n      return;\r\n    }\r\n  } else if (formData.imageSourceType === 'search') {\r\n    // 验证搜索底图选择\r\n    if (formData.searchImageUrls.length === 0) {\r\n      errors.push('底图选择');\r\n    }\r\n    \r\n    // 验证是否输入文案\r\n    if (formData.searchImageUrls.length > 0 && !searchImagesText.value.trim()) {\r\n      errors.push('底图文案');\r\n    }\r\n    \r\n    // 验证选择的图片数量必须大于等于模板数量\r\n    if (formData.searchImageUrls.length > 0 && formData.searchImageUrls.length < formData.templateIds.length) {\r\n      ElMessage.warning(`图片数量(${formData.searchImageUrls.length}张)不能少于模板数量(${formData.templateIds.length}个)，请选择更多图片或减少模板数量`);\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // 如果有错误，显示汇总提示并返回\r\n  if (errors.length > 0) {\r\n    ElMessage.error(`请完成必填项: ${errors.join('、')}`);\r\n    return;\r\n  }\r\n\r\n  // 设置提交状态\r\n  processingProgress.value = 0; // 这里重置进度\r\n  submitting.value = true;\r\n  isProcessing.value = true;\r\n  generatedResults.value = [];\r\n  \r\n  try {\r\n    if (formData.imageSourceType === 'ai') {\r\n      // AI底图模式\r\n      await submitAIImageTask();\r\n    } else if (formData.imageSourceType === 'custom') {\r\n      // 自定义底图模式\r\n      await submitCustomImageTask();\r\n    } else if (formData.imageSourceType === 'search') {\r\n      // 搜索底图模式\r\n      await submitSearchImageTask();\r\n    }\r\n  } catch (error) {\r\n    console.error('提交失败:', error);\r\n    console.log('错误详情:', {\r\n      message: error.message,\r\n      response: error.response?.data,\r\n      status: error.response?.status,\r\n      headers: error.response?.headers\r\n    });\r\n    ElMessage.error('任务创建失败，请重试');\r\n    submitting.value = false;\r\n    isProcessing.value = false;\r\n  }\r\n}\r\n\r\n// 提交AI底图任务\r\nconst submitAIImageTask = async () => {\r\n  try {\r\n    // 读取Excel文件\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = async (e) => {\r\n      try {\r\n        // 解析Excel数据\r\n        const data = new Uint8Array(e.target.result);\r\n        // eslint-disable-next-line no-undef\r\n        const workbook = XLSX.read(data, { type: 'array' });\r\n        const firstSheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[firstSheetName];\r\n        // eslint-disable-next-line no-undef\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n        \r\n        if (jsonData.length === 0) {\r\n          ElMessage.error('Excel文件为空或格式不正确');\r\n          submitting.value = false;\r\n          isProcessing.value = false;\r\n          return;\r\n        }\r\n        \r\n        // 检查是否有所需的列\r\n        const firstRow = jsonData[0];\r\n        const hasPromptColumn = 'prompt' in firstRow || '提示词' in firstRow;\r\n        \r\n        if (!hasPromptColumn) {\r\n          ElMessage.error('Excel文件中缺少\"prompt\"或\"提示词\"列');\r\n          submitting.value = false;\r\n          isProcessing.value = false;\r\n          return;\r\n        }\r\n        \r\n        // 提取提示词和文案数据\r\n        const excelData = jsonData.map((row, index) => {\r\n          // 获取提示词\r\n          const prompt = row.prompt || row['提示词'] || '';\r\n          \r\n          // 获取文本内容\r\n          const text1 = row.text1 || row['文本1'] || '';\r\n          const text2 = row.text2 || row['文本2'] || '';\r\n          \r\n          return { \r\n            prompt, \r\n            text1, \r\n            text2 \r\n          };\r\n        });\r\n        \r\n        // 准备提交数据\r\n        const requestData = {\r\n          task_name: formData.taskName,\r\n          excel_data: excelData,\r\n          template_ids: formData.templateIds,\r\n          image_format: formData.imageFormat,\r\n          image_size: formData.imageSize, // 添加图片尺寸\r\n          text_settings: {\r\n            has_text1: true,\r\n            has_text2: true\r\n          },\r\n          filename_pattern: formData.customImageName || '{taskName}_{index}',\r\n          image_source_type: 'ai' // 标识为AI底图\r\n        };\r\n        \r\n        // 日志输出请求数据，便于调试\r\n        console.log(`准备提交AI底图任务: ${formData.taskName}, 共${excelData.length}条数据`);\r\n        \r\n        // 使用SSE接口获取实时结果\r\n        const response = await fetch(`${API_BASE_URL}/excel_batch_process_stream`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(requestData)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          // 处理非200响应\r\n          const errorText = await response.text();\r\n          throw new Error(`请求失败: ${response.status} ${errorText}`);\r\n        }\r\n        \r\n        // 获取流读取器\r\n        const reader = response.body.getReader();\r\n        const decoder = new TextDecoder();\r\n        \r\n        // 处理SSE数据流\r\n        const processStream = async ({ done, value }) => {\r\n          if (done) {\r\n            console.log('SSE流结束');\r\n            // 确保所有状态都重置为完成状态\r\n            submitting.value = false;\r\n            isProcessing.value = false;\r\n            isQueued.value = false;\r\n            return;\r\n          }\r\n          \r\n          // 解析接收到的数据块\r\n          const chunk = decoder.decode(value, { stream: true });\r\n          const lines = chunk.split('\\n\\n');\r\n          \r\n          for (const line of lines) {\r\n            if (!line.startsWith('data:')) continue;\r\n            \r\n            try {\r\n              const jsonData = JSON.parse(line.substring(5).trim());\r\n              console.log('收到SSE数据:', jsonData);\r\n              \r\n              // 保存任务ID - 用于后续操作\r\n              if (jsonData.task_id) {\r\n                formData.taskId = jsonData.task_id;\r\n              }\r\n              \r\n              // 处理不同类型的消息\r\n              switch (jsonData.status) {\r\n                case 'started':\r\n                  console.log('批量处理开始，总数:', jsonData.total);\r\n                  ElMessage.info(`开始处理 ${jsonData.total} 张图片`);\r\n                  \r\n                  // 如果是排队状态\r\n                  if (jsonData.queued) {\r\n                    isQueued.value = true;\r\n                    queuePosition.value = jsonData.queue_position || 1;\r\n                    console.log(`任务已加入队列，位置: ${queuePosition.value}`);\r\n                  } else {\r\n                    isQueued.value = false;\r\n                  }\r\n                  break;\r\n                  \r\n                case 'progress':\r\n                  console.log(`进度: ${jsonData.current}/${jsonData.total} (${jsonData.progress.toFixed(2)}%)`);\r\n                  // 更新进度\r\n                  processingProgress.value = Math.round(jsonData.progress);\r\n                  isQueued.value = false;\r\n                  \r\n                  // 如果有当前生成的图片结果\r\n                  if (jsonData.current_results && jsonData.current_results.length > 0) {\r\n                    const newImage = jsonData.current_results[0];\r\n                    console.log('新生成的图片:', newImage.imageUrl || newImage.image_path);\r\n                    \r\n                    const globalIndex = generatedResults.value.length;\r\n                    const fileName = generateFileName(newImage, globalIndex);\r\n                    generatedResults.value.push({\r\n                      ...newImage,\r\n                      index: globalIndex,\r\n                      name: fileName,\r\n                      imageUrl: newImage.imageUrl || newImage.image_path,\r\n                      time: new Date().getTime()\r\n                    });   \r\n                  }\r\n                  break;\r\n                  \r\n                case 'error':\r\n                  console.error('生成过程中出现错误:', jsonData.error);\r\n                  ElMessage.warning(`处理过程中出现错误: ${jsonData.error || '未知错误'}`);\r\n                  // 继续处理其他图片\r\n                  break;\r\n                  \r\n                case 'completed':\r\n                  console.log('收到完成状态，等待end状态处理最终结果');\r\n                  // 不在这里处理结果，等待end状态\r\n                  break;\r\n                  \r\n                case 'end':\r\n                  console.log('SSE流结束，处理最终结果');\r\n                  \r\n                  // 在end状态处理所有结果，确保完整显示\r\n                  if (jsonData.results && jsonData.results.length > 0) {\r\n                    console.log('处理最终结果，共', jsonData.results.length, '项');\r\n                    // 处理所有结果以确保完整显示\r\n                    const processedResults = await processGeneratedResults(jsonData.results);\r\n                    generatedResults.value = processedResults;\r\n                    ElMessage.success('所有图片生成完成！');\r\n                  }\r\n                  \r\n                  // 设置处理完成状态\r\n                  submitting.value = false;\r\n                  isProcessing.value = false;\r\n                  isQueued.value = false;\r\n                  break;\r\n                  \r\n                default:\r\n                  console.log('未知状态:', jsonData);\r\n                  break;\r\n              }\r\n            } catch (e) {\r\n              console.error('解析SSE数据错误:', e, line);\r\n            }\r\n          }\r\n          \r\n          // 继续读取流\r\n          reader.read().then(processStream);\r\n        };\r\n        \r\n        // 开始读取SSE流\r\n        reader.read().then(processStream);\r\n        \r\n      } catch (error) {\r\n        console.error('读取Excel文件失败:', error);\r\n        ElMessage.error('读取Excel文件失败，请检查文件格式');\r\n        submitting.value = false;\r\n        isProcessing.value = false;\r\n      }\r\n    };\r\n    \r\n    reader.readAsArrayBuffer(formData.excelFile);\r\n  } catch (error) {\r\n    console.error('读取Excel文件失败:', error);\r\n    ElMessage.error('读取Excel文件失败，请检查文件格式');\r\n    submitting.value = false;\r\n    isProcessing.value = false;\r\n  }\r\n};\r\n\r\n// 提交自定义底图任务\r\nconst submitCustomImageTask = async () => {\r\n  try {\r\n    // 创建FormData对象\r\n    const submitData = new FormData()\r\n    submitData.append('taskName', formData.taskName)\r\n    submitData.append('customImageName', formData.customImageName)\r\n    submitData.append('image_source_type', 'custom') // 标识为自定义底图\r\n    \r\n    // 添加模板IDs\r\n    formData.templateIds.forEach(id => {\r\n      submitData.append('templateIds[]', id)\r\n    })\r\n    \r\n    // 添加图片文件\r\n    formData.imageFiles.forEach((file, index) => {\r\n      submitData.append(`images[${index}]`, file)\r\n      \r\n      // 提取原始文件名（不含扩展名）\r\n      const originalFileName = file.name.substring(0, file.name.lastIndexOf('.')) || `image_${index + 1}`;\r\n      submitData.append(`original_filenames[${index}]`, originalFileName);\r\n      \r\n      // 使用原始文件名作为文案\r\n      submitData.append(`texts[${index}]`, originalFileName)\r\n    })\r\n    \r\n    // 记录文本列信息\r\n    console.group('自定义底图任务提交数据');\r\n    console.log('任务名称:', formData.taskName);\r\n    console.log('自定义图片命名规则:', formData.customImageName);\r\n    console.log('使用的模板IDs:', formData.templateIds);\r\n    console.log('选择的模板名称:', formData.selectedTemplateNames);\r\n    console.log('上传的图片数量:', formData.imageFiles.length);\r\n    console.groupEnd();\r\n    \r\n    // 第一步：上传表单，获取任务ID\r\n    const uploadResp = await fetch(`${API_BASE_URL}/custom-image-watermark`, {\r\n      method: 'POST',\r\n      body: submitData\r\n    });\r\n    const uploadData = await uploadResp.json();\r\n    if (!uploadData.success || !uploadData.task_id) {\r\n      ElMessage.error(`任务创建失败: ${uploadData.error || '未知错误'}`);\r\n      isProcessing.value = false;\r\n      submitting.value = false;\r\n      return;\r\n    }\r\n    formData.taskId = uploadData.task_id;\r\n    \r\n    // 第二步：用SSE监听进度\r\n    const sseUrl = `${API_BASE_URL}/custom-image-watermark/stream?task_id=${formData.taskId}`;\r\n    const eventSource = new EventSource(sseUrl);\r\n    window.imageWatermarkEventSource = eventSource;\r\n    \r\n    eventSource.onmessage = async (event) => {\r\n      try {\r\n        const jsonData = JSON.parse(event.data);\r\n        console.log('SSE收到数据:', jsonData);\r\n        switch (jsonData.status) {\r\n          case 'started':\r\n            ElMessage.info(`开始处理 ${jsonData.total} 张图片`);\r\n            if (jsonData.queued) {\r\n              isQueued.value = true;\r\n              queuePosition.value = jsonData.queue_position || 1;\r\n            } else {\r\n              isQueued.value = false;\r\n            }\r\n            break;\r\n          case 'progress':\r\n            processingProgress.value = Math.round(jsonData.progress);\r\n            isQueued.value = false;\r\n            if (jsonData.current_results && jsonData.current_results.length > 0) {\r\n              const newImage = jsonData.current_results[0];\r\n              const processedResults = await processGeneratedResults([newImage]);\r\n              if (processedResults.length > 0) {\r\n                generatedResults.value.push(processedResults[0]);\r\n                // 添加图片生成提示\r\n                ElMessage.info(`已生成 ${generatedResults.value.length} 张图片`);\r\n              }\r\n            }\r\n            break;\r\n          case 'item_completed': // 添加处理单张图片完成的事件\r\n            if (jsonData.result) {\r\n              // 确保使用当前已生成图片的数量作为索引\r\n              const currentIndex = generatedResults.value.length;\r\n              \r\n              // 为结果添加索引信息\r\n              const resultWithIndex = {\r\n                ...jsonData.result,\r\n                generated_index: currentIndex // 添加索引信息\r\n              };\r\n              \r\n              const processedResults = await processGeneratedResults([resultWithIndex]);\r\n              if (processedResults.length > 0) {\r\n                generatedResults.value.push(processedResults[0]);\r\n                // 添加图片生成提示\r\n                ElMessage.info(`已生成 ${generatedResults.value.length} 张图片`);\r\n              }\r\n            }\r\n            break;\r\n          case 'error':\r\n            ElMessage.warning(`处理过程中出现错误: ${jsonData.error || '未知错误'}`);\r\n            break;\r\n          case 'completed':\r\n            ElMessage.success('所有图片生成完成！');\r\n            // 修改后的completed消息不再包含完整的results数组，只显示成功信息\r\n            submitting.value = false;\r\n            isProcessing.value = false;\r\n            isQueued.value = false;\r\n            eventSource.close();\r\n            window.imageWatermarkEventSource = null;\r\n            break;\r\n          case 'end':\r\n            submitting.value = false;\r\n            isProcessing.value = false;\r\n            isQueued.value = false;\r\n            eventSource.close();\r\n            window.imageWatermarkEventSource = null;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } catch (e) {\r\n        console.error('解析SSE数据错误:', e, event.data);\r\n      }\r\n    };\r\n    eventSource.onerror = (error) => {\r\n      console.error('SSE连接错误:', error);\r\n      ElMessage.error('SSE连接错误，请刷新页面重试');\r\n      submitting.value = false;\r\n      isProcessing.value = false;\r\n      isQueued.value = false;\r\n      eventSource.close();\r\n      window.imageWatermarkEventSource = null;\r\n    };\r\n  } catch (error) {\r\n    console.error('提交失败', error);\r\n    console.log('错误详情:', {\r\n      message: error.message,\r\n      response: error.response?.data,\r\n      status: error.response?.status,\r\n      headers: error.response?.headers\r\n    });\r\n    ElMessage.error('任务创建失败，请重试');\r\n    isProcessing.value = false;\r\n    submitting.value = false;\r\n  }\r\n};\r\n\r\n// 提交搜索底图任务\r\nconst submitSearchImageTask = async () => {\r\n  try {\r\n    // 创建FormData对象\r\n    const submitData = new FormData()\r\n    submitData.append('taskName', formData.taskName)\r\n    submitData.append('customImageName', formData.customImageName)\r\n    submitData.append('image_source_type', 'search') // 标识为搜索底图\r\n    \r\n    // 添加模板IDs\r\n    formData.templateIds.forEach(id => {\r\n      submitData.append('templateIds[]', id)\r\n    })\r\n    \r\n    // 添加搜索图片URLs\r\n    formData.searchImageUrls.forEach((url, index) => {\r\n      submitData.append(`image_urls[${index}]`, url)\r\n      \r\n      // 使用用户输入的文案，如果没有则使用默认文案\r\n      const text = searchImagesText.value.trim() || `搜索图片_${index + 1}`\r\n      submitData.append(`texts[${index}]`, text)\r\n    })\r\n    \r\n    // 记录提交数据\r\n    console.group('搜索底图任务提交数据');\r\n    console.log('任务名称:', formData.taskName);\r\n    console.log('自定义图片命名规则:', formData.customImageName);\r\n    console.log('使用的模板IDs:', formData.templateIds);\r\n    console.log('选择的模板名称:', formData.selectedTemplateNames);\r\n    console.log('搜索的图片URLs数量:', formData.searchImageUrls.length);\r\n    console.groupEnd();\r\n    \r\n    // 第一步：上传表单，获取任务ID\r\n    const uploadResp = await fetch(`${API_BASE_URL}/search-image-watermark`, {\r\n      method: 'POST',\r\n      body: submitData\r\n    });\r\n    const uploadData = await uploadResp.json();\r\n    if (!uploadData.success || !uploadData.task_id) {\r\n      ElMessage.error(`任务创建失败: ${uploadData.error || '未知错误'}`);\r\n      isProcessing.value = false;\r\n      submitting.value = false;\r\n      return;\r\n    }\r\n    formData.taskId = uploadData.task_id;\r\n    \r\n    // 第二步：用SSE监听进度\r\n    const sseUrl = `${API_BASE_URL}/search-image-watermark/stream?task_id=${formData.taskId}`;\r\n    const eventSource = new EventSource(sseUrl);\r\n    window.imageWatermarkEventSource = eventSource;\r\n    \r\n    eventSource.onmessage = async (event) => {\r\n      try {\r\n        // 修复SSE数据格式解析问题\r\n        let jsonData;\r\n        const data = event.data;\r\n        \r\n        // 处理可能的格式问题\r\n        if (typeof data === 'string') {\r\n          // 如果数据以data:开头，则提取JSON部分\r\n          if (data.startsWith('data:')) {\r\n            const jsonStr = data.substring(5).trim();\r\n            jsonData = JSON.parse(jsonStr);\r\n          } else {\r\n            // 直接尝试解析\r\n            jsonData = JSON.parse(data);\r\n          }\r\n        } else {\r\n          jsonData = data;\r\n        }\r\n        \r\n        console.log('SSE收到数据:', jsonData);\r\n        switch (jsonData.status) {\r\n          case 'started':\r\n            ElMessage.info(`开始处理 ${jsonData.total} 张图片`);\r\n            if (jsonData.queued) {\r\n              isQueued.value = true;\r\n              queuePosition.value = jsonData.queue_position || 1;\r\n            } else {\r\n              isQueued.value = false;\r\n            }\r\n            break;\r\n          case 'progress':\r\n            processingProgress.value = Math.round(jsonData.progress);\r\n            isQueued.value = false;\r\n            if (jsonData.current_results && jsonData.current_results.length > 0) {\r\n              const newImage = jsonData.current_results[0];\r\n              const processedResults = await processGeneratedResults([newImage]);\r\n              if (processedResults.length > 0) {\r\n                generatedResults.value.push(processedResults[0]);\r\n                // 添加图片生成提示\r\n                ElMessage.info(`已生成 ${generatedResults.value.length} 张图片`);\r\n              }\r\n            }\r\n            break;\r\n          case 'item_completed': // 添加处理单张图片完成的事件\r\n            if (jsonData.result) {\r\n              // 确保使用当前已生成图片的数量作为索引\r\n              const currentIndex = generatedResults.value.length;\r\n              \r\n              // 为结果添加索引信息\r\n              const resultWithIndex = {\r\n                ...jsonData.result,\r\n                generated_index: currentIndex // 添加索引信息\r\n              };\r\n              \r\n              const processedResults = await processGeneratedResults([resultWithIndex]);\r\n              if (processedResults.length > 0) {\r\n                generatedResults.value.push(processedResults[0]);\r\n                // 添加图片生成提示\r\n                ElMessage.info(`已生成 ${generatedResults.value.length} 张图片`);\r\n              }\r\n            }\r\n            break;\r\n          case 'error':\r\n            ElMessage.warning(`处理过程中出现错误: ${jsonData.error || '未知错误'}`);\r\n            break;\r\n          case 'completed':\r\n            ElMessage.success('所有图片生成完成！');\r\n            // 修改后的completed消息不再包含完整的results数组，只显示成功信息\r\n            submitting.value = false;\r\n            isProcessing.value = false;\r\n            isQueued.value = false;\r\n            eventSource.close();\r\n            window.imageWatermarkEventSource = null;\r\n            break;\r\n          case 'end':\r\n            submitting.value = false;\r\n            isProcessing.value = false;\r\n            isQueued.value = false;\r\n            eventSource.close();\r\n            window.imageWatermarkEventSource = null;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } catch (e) {\r\n        console.error('解析SSE数据错误:', e, event.data);\r\n      }\r\n    };\r\n    eventSource.onerror = (error) => {\r\n      console.error('SSE连接错误:', error);\r\n      ElMessage.error('SSE连接错误，请刷新页面重试');\r\n      submitting.value = false;\r\n      isProcessing.value = false;\r\n      isQueued.value = false;\r\n      eventSource.close();\r\n      window.imageWatermarkEventSource = null;\r\n    };\r\n  } catch (error) {\r\n    console.error('提交失败', error);\r\n    console.log('错误详情:', {\r\n      message: error.message,\r\n      response: error.response?.data,\r\n      status: error.response?.status,\r\n      headers: error.response?.headers\r\n    });\r\n    ElMessage.error('任务创建失败，请重试');\r\n    isProcessing.value = false;\r\n    submitting.value = false;\r\n  }\r\n};\r\n\r\n// 组件卸载时清理轮询\r\nonUnmounted(() => {\r\n  if (pollInterval) {\r\n    clearInterval(pollInterval);\r\n    pollInterval = null;\r\n  }\r\n  \r\n  // 移除键盘事件监听\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n});\r\n\r\n// 处理Excel文件移除\r\nconst handleExcelRemove = () => {\r\n  formData.excelFile = null;\r\n  rowCount.value = 0;\r\n  excelFileList.value = []; // 清空文件列表\r\n  excelData.value = []; // 清空Excel数据\r\n  ElMessage.info('已移除Excel文件');\r\n};\r\n\r\n// 预览图片\r\nconst previewImage = (result, index) => {\r\n  currentPreviewResult.value = result\r\n  fullPreviewIndex.value = index\r\n  fullPreviewVisible.value = true\r\n  document.body.classList.add('no-scroll')\r\n  \r\n  // 添加键盘事件监听\r\n  document.addEventListener('keydown', handleKeyDown)\r\n  \r\n  // 在下一个渲染周期检查是否为竖版图片\r\n  nextTick(() => {\r\n    const container = document.querySelector('.full-image-container')\r\n    if (container && isTallImage(result)) {\r\n      container.classList.add('tall-image')\r\n    } else if (container) {\r\n      container.classList.remove('tall-image')\r\n    }\r\n  })\r\n}\r\n\r\n// 加载Lottie动画脚本\r\n// 删除重复声明 (已在上方542行声明过)\r\n\r\nconst loadLottieScript = async () => {\r\n  return new Promise((resolve) => {\r\n    if (lottieLoaded.value) {\r\n      resolve();\r\n      return;\r\n    }\r\n    \r\n    // 检查是否已经加载过lottie-player脚本\r\n    if (!document.querySelector('script[src*=\"lottie-player.js\"]')) {\r\n      // 创建script标签加载lottie-player.js (使用本地文件)\r\n      const script = document.createElement('script');\r\n      script.src = '/lottie-player.js';\r\n      script.async = true;\r\n      \r\n      script.onload = () => {\r\n        console.log('Lottie Player 脚本加载成功');\r\n        lottieLoaded.value = true;\r\n        resolve();\r\n      };\r\n      \r\n      script.onerror = (error) => {\r\n        console.error('Lottie Player 本地脚本加载失败，尝试使用CDN:', error);\r\n        \r\n        // 尝试从CDN加载\r\n        const cdnScript = document.createElement('script');\r\n        cdnScript.src = 'https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js';\r\n        cdnScript.async = true;\r\n        \r\n        cdnScript.onload = () => {\r\n          console.log('Lottie Player CDN脚本加载成功');\r\n          lottieLoaded.value = true;\r\n          resolve();\r\n        };\r\n        \r\n        cdnScript.onerror = (cdnError) => {\r\n          console.error('Lottie Player CDN脚本加载失败:', cdnError);\r\n          resolve(); // 即使失败也resolve以避免阻塞\r\n        };\r\n        \r\n        document.head.appendChild(cdnScript);\r\n      };\r\n      \r\n      document.head.appendChild(script);\r\n    } else {\r\n      lottieLoaded.value = true;\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\n// 从模板库选择/取消选择模板\r\nconst toggleTemplateSelection = (template) => {\r\n  const index = formData.templateIds.indexOf(template.id);\r\n  if (index === -1) {\r\n    // 添加选中的模板\r\n    formData.templateIds.push(template.id);\r\n    formData.selectedTemplateNames.push(template.name);\r\n  } else {\r\n    // 取消选中的模板\r\n    formData.templateIds.splice(index, 1);\r\n    formData.selectedTemplateNames.splice(index, 1);\r\n  }\r\n}\r\n\r\n// 添加新的计算属性\r\nconst isAllSelected = computed(() => {\r\n  return filteredTemplates.value.length > 0 && \r\n         filteredTemplates.value.every(template => formData.templateIds.includes(template.id));\r\n});\r\n\r\n// 添加全选/取消全选功能\r\nconst toggleSelectAll = () => {\r\n  if (isAllSelected.value) {\r\n    // 如果已经全选，则取消全选\r\n    filteredTemplates.value.forEach(template => {\r\n      const index = formData.templateIds.indexOf(template.id);\r\n      if (index !== -1) {\r\n        formData.templateIds.splice(index, 1);\r\n        const nameIndex = formData.selectedTemplateNames.indexOf(template.name);\r\n        if (nameIndex !== -1) {\r\n          formData.selectedTemplateNames.splice(nameIndex, 1);\r\n        }\r\n      }\r\n    });\r\n  } else {\r\n    // 如果没有全选，添加所有当前过滤后的模板到选择中\r\n    filteredTemplates.value.forEach(template => {\r\n      if (!formData.templateIds.includes(template.id)) {\r\n        formData.templateIds.push(template.id);\r\n        formData.selectedTemplateNames.push(template.name);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst resetForm = () => {\r\n  console.log('开始重置表单...');\r\n  \r\n  // 关闭自定义底图 SSE 流\r\n  if (window.imageWatermarkEventSource) {\r\n    window.imageWatermarkEventSource.close();\r\n    window.imageWatermarkEventSource = null;\r\n  }\r\n  \r\n  // 一次性重置所有状态数据，避免多次渲染\r\n  // 先存储原来的底图类型\r\n  const originalSourceType = formData.imageSourceType;\r\n  \r\n  // 设置重置中标志，可以用于阻止一些监听器触发\r\n  const isResetting = true;\r\n  \r\n  // 一次性重置所有表单数据\r\n  Object.assign(formData, {\r\n    // 底图配置\r\n    excelFile: null,\r\n    imageFormat: 'single',\r\n    imageSize: '1:1',\r\n    panelMode: 'single',\r\n    searchImageUrls: [],\r\n    // 重要：直接重置为AI底图类型，不要保留原始值\r\n    imageSourceType: 'ai',\r\n    \r\n    // 模板相关\r\n    templateIds: [],\r\n    selectedTemplateNames: [],\r\n    watermarkImage: null,\r\n    taskId: '',\r\n    \r\n    // 任务相关\r\n    taskName: '',\r\n    customImageName: '{taskName}_{index}'\r\n  });\r\n  \r\n  // 重置其他响应式状态\r\n  rowCount.value = 0;\r\n  imageCount.value = 0;\r\n  excelData.value = [];\r\n  excelFileList.value = [];\r\n  formData.imageFiles = [];\r\n  imageFileList.value = [];\r\n  isProcessing.value = false;\r\n  submitting.value = false;\r\n  isQueued.value = false;\r\n  queuePosition.value = 0;\r\n  queueProgress.value = 0;\r\n  processingProgress.value = 0;\r\n  \r\n  // 重置预览状态\r\n  fullPreviewVisible.value = false;\r\n  fullPreviewIndex.value = 0;\r\n  currentPreviewResult.value = null;\r\n  \r\n  // 重置反馈相关状态\r\n  feedbackDialogVisible.value = false;\r\n  feedbackTaskId.value = '';\r\n  feedbackTaskName.value = '';\r\n  feedbackTemplateInfo.value = {};\r\n  \r\n  // 重置下载状态\r\n  isDownloading.value = false;\r\n  \r\n  // 清空搜索底图相关状态\r\n  selectedSearchImages.value = [];\r\n  searchImagesText.value = '';\r\n  \r\n  // 清空结果\r\n  generatedResults.value = [];\r\n  \r\n  // 移除事件监听和CSS类\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n  document.body.classList.remove('no-scroll');\r\n  \r\n  // 在一个单独的微任务中重置UI\r\n  nextTick(() => {\r\n    try {\r\n      // 1. 先重置上传组件\r\n      if (excelUploadRef.value) {\r\n        excelUploadRef.value.clearFiles();\r\n      }\r\n      \r\n      if (imageUploadRef.value) {\r\n        imageUploadRef.value.clearFiles();\r\n      }\r\n      \r\n      // 2. 隐藏上传信息显示\r\n      const hideElement = (selector) => {\r\n        const element = document.querySelector(selector);\r\n        if (element) element.style.display = 'none';\r\n      };\r\n      \r\n      const showElement = (selector, displayType = 'flex') => {\r\n        const element = document.querySelector(selector);\r\n        if (element) element.style.display = displayType;\r\n      };\r\n      \r\n      // 隐藏已上传文件信息\r\n      hideElement('.excel-info-inner');\r\n      hideElement('.image-info-inner');\r\n      hideElement('.selected-images-info');\r\n      \r\n      // 显示上传占位符\r\n      showElement('.ai-image-config .upload-placeholder');\r\n      showElement('.custom-image-config .upload-placeholder');\r\n      \r\n      // 3. 重置底图类型选择器 - 特别注意修复高亮问题\r\n      // 先设置正确的显示区域\r\n      showElement('.ai-image-config', 'block');\r\n      hideElement('.custom-image-config');\r\n      hideElement('.search-image-config');\r\n      \r\n      // 3.1 获取底图类型选择器的所有选项\r\n      const optionItems = document.querySelectorAll('.option-item');\r\n      const optionIndicator = document.querySelector('.option-indicator');\r\n      \r\n      if (optionItems.length >= 3) {\r\n        // 移除所有active类\r\n        optionItems.forEach((item, index) => {\r\n          if (index === 0) { // AI底图选项\r\n            item.classList.add('active'); // 为AI底图添加active类\r\n          } else {\r\n            item.classList.remove('active');\r\n          }\r\n        });\r\n        \r\n        // 3.2 重置指示器位置 - 确保它指向AI底图选项\r\n        if (optionIndicator) {\r\n          // 移除所有位置类\r\n          optionIndicator.className = 'option-indicator';\r\n          // 确保没有自定义或搜索底图的位置类\r\n          optionIndicator.classList.remove('at-custom');\r\n          optionIndicator.classList.remove('at-search');\r\n        }\r\n      }\r\n      \r\n      // 4. 重置表单输入字段\r\n      document.querySelectorAll('input[type=\"text\"]').forEach(input => {\r\n        if (input.placeholder === '请输入任务名称') {\r\n          input.value = '';\r\n          input.dispatchEvent(new Event('input', { bubbles: true }));\r\n        } else if (input.placeholder === '请输入自定义命名规则') {\r\n          input.value = '{taskName}_{index}';\r\n          input.dispatchEvent(new Event('input', { bubbles: true }));\r\n        }\r\n      });\r\n      \r\n      // 使用更加平滑的方式重置上传组件UI\r\n      setTimeout(() => {\r\n        // 不要重建整个上传区域的HTML，这会导致事件处理器丢失\r\n        // 而是只重置显示部分\r\n        const resetDragAreaContent = (selector, text) => {\r\n          const dragger = document.querySelector(`${selector} .el-upload-dragger`);\r\n          if (dragger) {\r\n            // 检查是否已经是重置状态\r\n            const hasUploadIcon = dragger.querySelector('.upload-icon');\r\n            const hasUploadText = dragger.querySelector('.upload-text');\r\n            \r\n            if (!hasUploadIcon || !hasUploadText) {\r\n              // 只有在需要重置时才修改，避免不必要的DOM操作\r\n              dragger.innerHTML = `\r\n                <el-icon class=\"upload-icon\"><Upload /></el-icon>\r\n                <div class=\"upload-text\">${text}</div>\r\n              `;\r\n            }\r\n          }\r\n        };\r\n        \r\n        // 平滑重置上传区域内容\r\n        resetDragAreaContent('.ai-image-config .upload-drag-area', '上传/拖动Excel文件到此处');\r\n        resetDragAreaContent('.custom-image-config .upload-drag-area', '上传/拖动图片到此处');\r\n        \r\n        // 确保文件输入元素为空\r\n        document.querySelectorAll('input[type=\"file\"]').forEach(input => {\r\n          input.value = '';\r\n        });\r\n      }, 50); // 使用更短的延迟\r\n    } catch (error) {\r\n      console.error('重置UI出错:', error);\r\n    }\r\n  });\r\n  \r\n  ElMessage.success('表单已重置');\r\n}\r\n\r\n// 在变量中插入命名变量\r\nconst insertNamingVariable = (variable) => {\r\n  // 如果没有值，直接设置变量\r\n  if (!formData.customImageName) {\r\n    formData.customImageName = variable;\r\n    return;\r\n  }\r\n  \r\n  // 在光标位置插入，或追加到末尾\r\n  const input = document.querySelector('.naming-input-container input');\r\n  if (input === document.activeElement) {\r\n    const startPos = input.selectionStart;\r\n    const endPos = input.selectionEnd;\r\n    formData.customImageName = \r\n      formData.customImageName.substring(0, startPos) + \r\n      variable + \r\n      formData.customImageName.substring(endPos);\r\n    \r\n    // 设置新的光标位置\r\n    setTimeout(() => {\r\n      input.selectionStart = input.selectionEnd = startPos + variable.length;\r\n      input.focus();\r\n    }, 0);\r\n  } else {\r\n    // 如果焦点不在输入框内，则追加到末尾\r\n    formData.customImageName += variable;\r\n  }\r\n}\r\n\r\n// 获取自定义命名示例\r\nconst getCustomNamingExample = () => {\r\n  if (!formData.customImageName) {\r\n    return '自定义_001.png';\r\n  }\r\n  \r\n  // 替换示例变量\r\n  let example = formData.customImageName;\r\n  const taskName = formData.taskName || '植物水果';\r\n  const today = new Date();\r\n  const dateStr = `${today.getFullYear()}${(today.getMonth()+1).toString().padStart(2, '0')}${today.getDate().toString().padStart(2, '0')}`;\r\n  const timeStr = `${today.getHours().toString().padStart(2, '0')}${today.getMinutes().toString().padStart(2, '0')}`;\r\n  \r\n  // 新增过滤@及其后内容的函数\r\n  const filterAt = (str) => {\r\n    if (!str) return '';\r\n    const idx = str.indexOf('@');\r\n    return idx === -1 ? str : str.substring(0, idx);\r\n  };\r\n  \r\n  if (formData.imageSourceType === 'ai') {\r\n    // 从Excel数据中获取真实值（如果有的话）\r\n    let text1Value = 'Text1';\r\n    let text2Value = 'Text2';\r\n    let promptValue = '森林风景';\r\n    \r\n    // 如果已上传并解析了Excel，使用第一行的真实数据\r\n    if (rowCount.value > 0 && excelData.value.length > 0) {\r\n      const firstRow = excelData.value[0];\r\n      \r\n      // 使用真实提示词\r\n      if (firstRow.prompt) {\r\n        promptValue = extractTextFromHtml(firstRow.prompt);\r\n        if (promptValue.length > 30) {\r\n          promptValue = promptValue.substring(0, 27) + '...';\r\n        }\r\n      }\r\n      \r\n      // 使用真实文本1\r\n      if (firstRow.text1) {\r\n        text1Value = extractTextFromHtml(firstRow.text1);\r\n        if (text1Value.length > 30) {\r\n          text1Value = text1Value.substring(0, 27) + '...';\r\n        }\r\n      }\r\n      \r\n      // 使用真实文本2\r\n      if (firstRow.text2) {\r\n        text2Value = extractTextFromHtml(firstRow.text2);\r\n        if (text2Value.length > 30) {\r\n          text2Value = text2Value.substring(0, 27) + '...';\r\n        }\r\n      }\r\n    }\r\n    // 过滤@及其后内容\r\n    text1Value = filterAt(text1Value);\r\n    text2Value = filterAt(text2Value);\r\n    promptValue = filterAt(promptValue);\r\n    \r\n    example = example.replace(/{taskName}/g, taskName)\r\n                    .replace(/{index}/g, '001')\r\n                    .replace(/{date}/g, dateStr)\r\n                    .replace(/{time}/g, timeStr)\r\n                    .replace(/{text1}/g, text1Value)\r\n                    .replace(/{text2}/g, text2Value)\r\n                    .replace(/{prompt}/g, promptValue);\r\n  } else if (formData.imageSourceType === 'search') {\r\n    // 搜索底图模式 - 使用用户输入的文案\r\n    let textValue = searchImagesText.value.trim() || '搜索图片文案';\r\n    \r\n    // 如果文案太长，截取前20个字符\r\n    if (textValue.length > 20) {\r\n      textValue = textValue.substring(0, 17) + '...';\r\n    }\r\n    \r\n    // 在预览示例中使用 001、002、003...，而不是固定的001\r\n    // 这样用户就知道序号会变化\r\n    const indexExample = '001';\r\n    \r\n    example = example.replace(/{taskName}/g, taskName)\r\n                    .replace(/{index}/g, indexExample)\r\n                    .replace(/{date}/g, dateStr)\r\n                    .replace(/{time}/g, timeStr)\r\n                    .replace(/{text}/g, textValue);\r\n  } else {\r\n    // 自定义底图模式示例\r\n    let originalFilename = formData.imageFiles.length > 0 ? \r\n      formData.imageFiles[0].name.substring(0, formData.imageFiles[0].name.lastIndexOf('.')) || `image_1` : \r\n      `image_1`;\r\n    \r\n    example = example.replace(/{taskName}/g, sanitizeForFileName(taskName))\r\n                    .replace(/{index}/g, '001')\r\n                    .replace(/{date}/g, dateStr)\r\n                    .replace(/{time}/g, timeStr)\r\n                    .replace(/{original_filename}/g, filterAt(originalFilename));\r\n  }\r\n  \r\n  // 如果没有扩展名，添加.png\r\n  if (!example.endsWith('.png') && !example.endsWith('.jpg')) {\r\n    example += '.png';\r\n  }\r\n  \r\n  return example;\r\n};\r\n\r\n// 处理Excel文件更改\r\nconst handleExcelChange = (file) => {\r\n  formData.excelFile = file.raw;\r\n  excelFileList.value = [file]; // 更新文件列表\r\n  \r\n  // 读取Excel文件\r\n  const reader = new FileReader();\r\n  \r\n  reader.onload = async (e) => {\r\n    try {\r\n      // 解析Excel数据\r\n      const data = new Uint8Array(e.target.result);\r\n      // eslint-disable-next-line no-undef\r\n      const workbook = XLSX.read(data, { type: 'array' });\r\n      const firstSheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[firstSheetName];\r\n      // eslint-disable-next-line no-undef\r\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n      \r\n      if (jsonData.length === 0) {\r\n        ElMessage.error('Excel文件为空或格式不正确');\r\n        return;\r\n      }\r\n      \r\n      // 检查数据条数是否超过限制\r\n      if (jsonData.length > 50) {\r\n        ElMessage.error('提示词数量超过限制，最多支持50条数据生成50张图片，请精简数据后重新上传');\r\n        formData.excelFile = null;\r\n        excelFileList.value = []; // 清空文件列表\r\n        rowCount.value = 0;\r\n        return;\r\n      }\r\n      \r\n      // 检查是否有所需的列\r\n      const firstRow = jsonData[0];\r\n      const hasPromptColumn = 'prompt' in firstRow || '提示词' in firstRow;\r\n      const hasText1Column = 'text1' in firstRow || '文本1' in firstRow;\r\n      const hasText2Column = 'text2' in firstRow || '文本2' in firstRow;\r\n      \r\n      if (!hasPromptColumn) {\r\n        ElMessage.error('Excel文件中缺少\"prompt\"或\"提示词\"列');\r\n        return;\r\n      }\r\n      \r\n      // 提取提示词和文案数据\r\n      excelData.value = jsonData.map((row, index) => {\r\n        // 获取提示词\r\n        const prompt = row.prompt || row['提示词'] || '';\r\n        \r\n        // 获取文本内容\r\n        const text1 = row.text1 || row['文本1'] || '';\r\n        const text2 = row.text2 || row['文本2'] || '';\r\n        \r\n        return { \r\n          prompt, \r\n          text1, \r\n          text2 \r\n        };\r\n      });\r\n      \r\n      // 更新行数并显示消息\r\n      rowCount.value = jsonData.length;\r\n      \r\n      ElMessage.success(`成功读取Excel文件，共${jsonData.length}行数据`);\r\n      \r\n    } catch (error) {\r\n      console.error('读取Excel文件失败:', error);\r\n      ElMessage.error('读取Excel文件失败，请检查文件格式');\r\n    }\r\n  };\r\n  \r\n  reader.readAsArrayBuffer(file.raw);\r\n  \r\n  return false; // 阻止自动上传\r\n};\r\n\r\n// 添加处理图片上传的函数\r\nconst handleImageChange = (file) => {\r\n  if (!file.raw) {\r\n    return;\r\n  }\r\n  \r\n  // 检查文件类型\r\n  const isImage = file.raw.type.startsWith('image/');\r\n  if (!isImage) {\r\n    ElMessage.error('只能上传图片文件！');\r\n    return false;\r\n  }\r\n  \r\n  // 检查文件大小，限制为10MB\r\n  const isLt10M = file.raw.size / 1024 / 1024 < 10;\r\n  if (!isLt10M) {\r\n    ElMessage.error('图片大小不能超过10MB!');\r\n    return false;\r\n  }\r\n  \r\n  // 添加到图片文件列表\r\n  formData.imageFiles.push(file.raw);\r\n  imageFileList.value.push(file);\r\n  \r\n  // 更新图片计数\r\n  imageCount.value = formData.imageFiles.length;\r\n  \r\n  console.log(`已添加图片: ${file.name}, 当前共${imageCount.value}张图片`);\r\n  \r\n  return false; // 阻止自动上传\r\n};\r\n\r\n// 处理移除单个图片\r\nconst handleImageRemove = (file) => {\r\n  // 从formData中移除文件\r\n  const index = formData.imageFiles.findIndex(item => {\r\n    return item.uid === file.uid || item.name === file.name;\r\n  });\r\n  \r\n  if (index !== -1) {\r\n    formData.imageFiles.splice(index, 1);\r\n  }\r\n  \r\n  // 从显示列表中移除\r\n  const fileIndex = imageFileList.value.findIndex(item => item.uid === file.uid);\r\n  if (fileIndex !== -1) {\r\n    imageFileList.value.splice(fileIndex, 1);\r\n  }\r\n  \r\n  // 更新计数\r\n  imageCount.value = formData.imageFiles.length;\r\n  \r\n  ElMessage.info(`已移除图片: ${file.name}`);\r\n};\r\n\r\n// 清空所有图片\r\nconst handleClearAll = () => {\r\n  formData.imageFiles = [];\r\n  imageFileList.value = [];\r\n  imageCount.value = 0;\r\n  \r\n  ElMessage.info('已清除所有图片');\r\n};\r\n\r\n// 处理超出图片上传限制\r\nconst handleExceed = (files) => {\r\n  ElMessage.warning(`最多只能上传50张图片，本次选择了${files.length}张，已超出限制`);\r\n};\r\n\r\n// 从模板库选择模板片\r\nconst selectTemplate = () => {\r\n  watermarkLibraryVisible.value = true;\r\n  \r\n  // 每次打开对话框时都重新加载模板数据\r\n  fetchTemplates();\r\n  fetchTemplateTags();\r\n}\r\n\r\n// 在组件挂载时初始化数据\r\nonMounted(async () => {\r\n  // 加载Lottie动画\r\n  await loadLottieScript();\r\n  \r\n  // 预加载模板数据\r\n  try {\r\n    await fetchTemplates();\r\n    await fetchTemplateTags();\r\n  } catch (error) {\r\n    console.error('加载模板数据失败:', error);\r\n  }\r\n  \r\n  // 获取字体列表\r\n  fetchFonts();\r\n});\r\n\r\n// 批量下载所有图片\r\nconst batchDownloadAllImages = async () => {\r\n  if (!generatedResults.value || generatedResults.value.length === 0) {\r\n    ElMessage.warning('没有可下载的图片');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 判断是否有任务ID，如果没有则提示错误\r\n    const taskId = formData.taskId;\r\n    if (!taskId) {\r\n      ElMessage.warning('无法获取任务ID，请刷新页面重试');\r\n      return;\r\n    }\r\n    \r\n    // 设置下载中状态\r\n    isDownloading.value = true;\r\n    \r\n    // 调用下载接口\r\n    const downloadUrl = `/api/ai/download-task/${taskId}`;\r\n    \r\n    // 创建一个隐藏的a标签执行下载\r\n    const link = document.createElement('a');\r\n    link.href = downloadUrl;\r\n    link.target = '_blank';\r\n    link.download = `${formData.taskName || '图片集'}.zip`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    // 设置一个定时器，几秒后恢复按钮状态（因为无法直接检测文件是否下载完成）\r\n    setTimeout(() => {\r\n      isDownloading.value = false;\r\n      ElMessage.success('打包下载完成');\r\n    }, 3000);\r\n  } catch (error) {\r\n    console.error('下载失败:', error);\r\n    ElMessage.error('下载失败: ' + (error.message || '未知错误'));\r\n    isDownloading.value = false;\r\n  }\r\n};\r\n\r\n// 在相关变量定义处添加字体选项\r\n// 字体选项\r\nconst fontOptions = ref([\r\n  { label: '加载中...', value: 'default' }\r\n])\r\n\r\n// 在相关位置添加获取字体列表的函数\r\n// 获取字体列表\r\nconst fetchFonts = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/fonts`)\r\n    if (response.data.success) {\r\n      // 转换后端返回的字体数据为前端需要的格式\r\n      fontOptions.value = response.data.data.map(font => ({\r\n        label: font.name,\r\n        value: font.value,\r\n        url: font.path ? `/${font.path}` : null,\r\n        cssFamily: font.css_family\r\n      }))\r\n      \r\n      // 初始化字体样式\r\n      loadFonts()\r\n    } else {\r\n      console.error('获取字体列表失败:', response.data.error)\r\n    }\r\n  } catch (error) {\r\n    console.error('获取字体列表失败:', error)\r\n    \r\n    // 加载失败时使用内置字体\r\n    fontOptions.value = [\r\n      { label: '默认字体', value: 'default' },\r\n      { label: '黑体', value: 'heiti' },\r\n      { label: '宋体', value: 'songti' },\r\n      { label: '微软雅黑', value: 'msyh' },\r\n      { label: '楷体', value: 'kaiti' }\r\n    ]\r\n  }\r\n}\r\n\r\n// 加载自定义字体\r\nconst loadFonts = () => {\r\n  // 清除之前加载的字体\r\n  document.querySelectorAll('style[data-font-loader=\"true\"]').forEach(el => el.remove())\r\n\r\n  // 为每个自定义字体创建@font-face规则\r\n  const customFonts = fontOptions.value.filter(font => font.url)\r\n  \r\n  if (customFonts.length > 0) {\r\n    const style = document.createElement('style')\r\n    style.setAttribute('data-font-loader', 'true')\r\n    \r\n    let fontFaceRules = ''\r\n    customFonts.forEach(font => {\r\n      fontFaceRules += `\r\n        @font-face {\r\n          font-family: '${font.value}';\r\n          src: url('${font.url}') format('${getFontFormat(font.url)}');\r\n          font-weight: normal;\r\n          font-style: normal;\r\n        }\r\n      `\r\n    })\r\n    \r\n    style.textContent = fontFaceRules\r\n    document.head.appendChild(style)\r\n  }\r\n}\r\n\r\n// 根据字体URL确定格式\r\nconst getFontFormat = (url) => {\r\n  if (url.endsWith('.ttf')) return 'truetype'\r\n  if (url.endsWith('.otf')) return 'opentype'\r\n  if (url.endsWith('.woff')) return 'woff'\r\n  if (url.endsWith('.woff2')) return 'woff2'\r\n  return 'truetype' // 默认\r\n}\r\n\r\n// 反馈对话框状态\r\nconst feedbackDialogVisible = ref(false)\r\nconst feedbackTaskId = ref('')\r\nconst feedbackTaskName = ref('')\r\nconst feedbackTemplateInfo = ref({})\r\n\r\n/**\r\n * 打开反馈对话框\r\n */\r\nconst openFeedbackDialog = () => {\r\n  feedbackTaskId.value = formData.taskId\r\n  feedbackTaskName.value = formData.taskName\r\n  \r\n  // 获取使用的模板信息\r\n  const templateIds = formData.templateIds || []\r\n  const templateNames = formData.selectedTemplateNames || []\r\n  feedbackTemplateInfo.value = templateNames.length > 0 \r\n    ? `${templateNames.join(', ')}(ID: ${templateIds.join(', ')})`\r\n    : '未使用模板'\r\n    \r\n  feedbackDialogVisible.value = true\r\n}\r\n\r\n/**\r\n * 处理反馈成功事件\r\n */\r\nconst handleFeedbackSuccess = () => {\r\n  // 这里不需要显示消息，因为FeedbackDialog组件中已经显示了成功消息\r\n}\r\n\r\n// 添加全屏预览相关的状态\r\nconst fullPreviewVisible = ref(false)\r\nconst fullPreviewIndex = ref(0)\r\nconst currentPreviewResult = ref(null)\r\n\r\n// 判断是否是竖版图片\r\nconst isTallImage = (result) => {\r\n  if (!result || !result.imageUrl) return false;\r\n  \r\n  // 如果有图片尺寸信息\r\n  if (result.width && result.height) {\r\n    const ratio = result.width / result.height;\r\n    return ratio < 0.8; // 宽高比小于0.8的图片视为竖版图片\r\n  }\r\n  \r\n  // 尝试从URL中提取宽高信息（如果有的话）\r\n  if (typeof result.imageUrl === 'string') {\r\n    // 检查URL中是否包含尺寸信息\r\n    const match = result.imageUrl.match(/(\\d+)x(\\d+)/);\r\n    if (match && match.length === 3) {\r\n      const width = parseInt(match[1]);\r\n      const height = parseInt(match[2]);\r\n      if (!isNaN(width) && !isNaN(height) && width > 0 && height > 0) {\r\n        const ratio = width / height;\r\n        return ratio < 0.8;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 添加图片加载后检测尺寸的功能\r\n  setTimeout(() => {\r\n    const imgElements = document.querySelectorAll('.preview-image');\r\n    imgElements.forEach(img => {\r\n      if (img.src === result.imageUrl && img.complete) {\r\n        if (img.naturalWidth && img.naturalHeight) {\r\n          const ratio = img.naturalWidth / img.naturalHeight;\r\n          if (ratio < 0.8) {\r\n            const wrapper = img.closest('.preview-image-wrapper');\r\n            if (wrapper && !wrapper.classList.contains('tall-image')) {\r\n              wrapper.classList.add('tall-image');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }, 100);\r\n  \r\n  return false; // 默认按横版处理\r\n}\r\n\r\n// 处理键盘事件\r\nconst handleKeyDown = (event) => {\r\n  if (!fullPreviewVisible.value) return\r\n  \r\n  switch (event.key) {\r\n    case 'ArrowLeft':\r\n      prevImage()\r\n      break\r\n    case 'ArrowRight':\r\n      nextImage()\r\n      break\r\n    case 'Escape':\r\n      closeFullPreview()\r\n      break\r\n  }\r\n}\r\n\r\n// 上一张图片\r\nconst prevImage = () => {\r\n  if (fullPreviewIndex.value > 0) {\r\n    fullPreviewIndex.value--\r\n    currentPreviewResult.value = generatedResults.value[fullPreviewIndex.value]\r\n    \r\n    // 检查是否为竖版图片\r\n    nextTick(() => {\r\n      const container = document.querySelector('.full-image-container')\r\n      if (container && isTallImage(currentPreviewResult.value)) {\r\n        container.classList.add('tall-image')\r\n      } else if (container) {\r\n        container.classList.remove('tall-image')\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// 下一张图片\r\nconst nextImage = () => {\r\n  if (generatedResults.value && fullPreviewIndex.value < generatedResults.value.length - 1) {\r\n    fullPreviewIndex.value++\r\n    currentPreviewResult.value = generatedResults.value[fullPreviewIndex.value]\r\n    \r\n    // 检查是否为竖版图片\r\n    nextTick(() => {\r\n      const container = document.querySelector('.full-image-container')\r\n      if (container && isTallImage(currentPreviewResult.value)) {\r\n        container.classList.add('tall-image')\r\n      } else if (container) {\r\n        container.classList.remove('tall-image')\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// 下载图片\r\nconst downloadImage = (result) => {\r\n  if (!result || !result.imageUrl) return;\r\n  \r\n  try {\r\n    // 创建一个临时链接\r\n    const link = document.createElement('a');\r\n    link.href = result.imageUrl;\r\n    link.download = result.name || `AI生成图片_${new Date().getTime()}.png`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    ElMessage.success('图片下载中...');\r\n  } catch (error) {\r\n    console.error('下载图片失败:', error);\r\n    ElMessage.error('下载图片失败');\r\n  }\r\n}\r\n\r\n// 关闭全屏预览\r\nconst closeFullPreview = () => {\r\n  fullPreviewVisible.value = false\r\n  document.body.classList.remove('no-scroll')\r\n  \r\n  // 移除键盘事件监听\r\n  document.removeEventListener('keydown', handleKeyDown)\r\n}\r\n\r\n// 确保组件卸载时清理事件监听器\r\nonUnmounted(() => {\r\n  // 移除键盘事件监听\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n});\r\n\r\n// 在合适的位置添加下载Excel模板的函数\r\n// 适合放在脚本部分，其他函数旁边\r\nconst downloadExcelTemplate = () => {\r\n  try {\r\n    // 使用服务器上提供的模板文件\r\n    const timestamp = new Date().getTime(); // 添加时间戳防止缓存\r\n    const downloadUrl = `${API_BASE_URL}/download-template?_t=${timestamp}`;\r\n    \r\n    console.log('正在下载模板，URL:', downloadUrl);\r\n    \r\n    // 创建一个隐藏的a标签执行下载\r\n    const link = document.createElement('a');\r\n    link.href = downloadUrl;\r\n    link.target = '_blank';\r\n    link.download = '生成图片模板.xlsx';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    ElMessage.success('模板下载中...');\r\n  } catch (error) {\r\n    console.error('下载模板失败:', error);\r\n    ElMessage.error('下载模板失败: ' + (error.message || '未知错误'));\r\n  }\r\n};\r\n\r\n// 重新生成图片\r\nconst regenerateImage = async (result, index) => {\r\n  // 防止重复点击\r\n  if (result.regenerating) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 设置重新生成状态，显示加载动画\r\n    generatedResults.value[index] = {\r\n      ...result,\r\n      regenerating: true\r\n    };\r\n    \r\n    // 提取图片相关信息\r\n    const promptData = {\r\n      task_id: formData.taskId,\r\n      image_index: index,\r\n      template_id: result.template_id || (formData.templateIds.length > 0 ? formData.templateIds[index % formData.templateIds.length] : null)\r\n    };\r\n    \r\n    // 如果有Excel数据，获取对应行的提示词\r\n    if (excelData.value && excelData.value.length > 0 && excelData.value[index]) {\r\n      promptData.prompt = excelData.value[index].prompt;\r\n      promptData.text1 = excelData.value[index].text1;\r\n      promptData.text2 = excelData.value[index].text2;\r\n    }\r\n    \r\n    // 调用API重新生成图片\r\n    const response = await axios.post(`${API_BASE_URL}/regenerate_image`, promptData);\r\n    \r\n    if (response.data.success) {\r\n      // 创建新的图片对象，保持原来的索引不变\r\n      const newImage = {\r\n        ...result,\r\n        regenerating: false,\r\n        // 优先使用 imageUrl 字段\r\n        imageUrl: response.data.imageUrl || response.data.image_path || \r\n                  // 如果存在results且有结果，则使用第一个结果的imageUrl或image_path\r\n                  (response.data.results && response.data.results.length > 0 ? \r\n                    (response.data.results[0].imageUrl || response.data.results[0].image_path) : null),\r\n        // 重新生成图片也要重新生成文件名\r\n        name: generateFileName(result, result.index !== undefined ? result.index : index),\r\n        time: new Date().getTime(), // 更新时间\r\n      };\r\n      \r\n      // 替换原图片\r\n      generatedResults.value.splice(index, 1, newImage);\r\n      \r\n      ElMessage.success('图片重新生成成功');\r\n    } else {\r\n      // 重置状态\r\n      generatedResults.value[index] = {\r\n        ...result,\r\n        regenerating: false\r\n      };\r\n      \r\n      ElMessage.error(`重新生成失败: ${response.data.error || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('重新生成图片失败:', error);\r\n    \r\n    // 重置状态\r\n    generatedResults.value[index] = {\r\n      ...result,\r\n      regenerating: false\r\n    };\r\n    \r\n    ElMessage.error(`重新生成图片失败: ${error.response?.data?.error || error.message || '未知错误'}`);\r\n  }\r\n};\r\n\r\n// 获取图片URL - 更新以确保完整保留TOS URL\r\nconst getImageUrl = (path) => {\r\n  if (!path) return defaultPreviewImg;\r\n  \r\n  // 如果已经是完整URL，直接返回\r\n  if (path.startsWith('http://') || path.startsWith('https://')) {\r\n    return path;\r\n  }\r\n  \r\n  // 处理以/file开头的路径 - 这是新的OS路径格式\r\n  if (path.startsWith('/file/') || path.startsWith('file/')) {\r\n    // 确保路径格式正确\r\n    const normalizedPath = path.startsWith('/') ? path : `/${path}`;\r\n    // 使用基础URL（可以从环境变量获取）\r\n    return `${baseURL}${normalizedPath}`;\r\n  }\r\n  \r\n  // 检查是否以/ai开头\r\n  if (path.startsWith('/ai/')) {\r\n    return path;\r\n  }\r\n  \r\n  // 处理常规路径\r\n  if (path.startsWith('/')) {\r\n    return `${API_BASE_URL}${path}`;\r\n  } else {\r\n    return `${API_BASE_URL}/${path}`;\r\n  }\r\n};\r\n\r\n// 添加一个从HTML中提取纯文本的函数\r\nconst extractTextFromHtml = (html) => {\r\n  if (!html) return '';\r\n  \r\n  // 如果输入不是字符串，直接返回空字符串\r\n  if (typeof html !== 'string') return '';\r\n  \r\n  // 创建一个临时DOM元素来解析HTML\r\n  const tempDiv = document.createElement('div');\r\n  tempDiv.innerHTML = html;\r\n  \r\n  // 获取纯文本内容\r\n  const textContent = tempDiv.textContent || tempDiv.innerText || '';\r\n  \r\n  // 清理文本：移除多余空格、换行等\r\n  return textContent.trim().replace(/\\s+/g, ' ');\r\n}\r\n\r\n// 添加下载状态变量\r\nconst isDownloading = ref(false)\r\nconst downloadButtonText = computed(() => {\r\n  if (isDownloading.value) {\r\n    return '正在打包...'\r\n  }\r\n  return '一键打包下载'\r\n})\r\n\r\n// 添加排队相关状态变量\r\nconst isQueued = ref(false)\r\nconst queuePosition = ref(0)\r\nconst queueProgress = ref(0)\r\nconst processingProgress = ref(0) // 添加处理进度\r\nconst loadingText = computed(() => {\r\n  if (isQueued.value) {\r\n    return '正在排队等待处理...'\r\n  }\r\n  if (processingProgress.value > 0) {\r\n    return `正在生成中: ${processingProgress.value}%`\r\n  }\r\n  return '正在努力处理中，请稍候...'\r\n})\r\n\r\n\r\n// 用于轮询任务状态的变量\r\nlet pollInterval = null\r\n\r\n// 添加图片尺寸选项\r\nconst imageSizeOptions = [\r\n  { label: '1:1', value: '512x512', orientation: '方形' },\r\n  { label: '4:3', value: '512x384', orientation: '横版' },\r\n  { label: '3:4', value: '384x512', orientation: '竖版' },\r\n  { label: '3:2', value: '512x341', orientation: '横版' },\r\n  { label: '2:3', value: '341x512', orientation: '竖版' },\r\n  { label: '16:9', value: '512x288', orientation: '横版' },\r\n  { label: '9:16', value: '288x512', orientation: '竖版' }\r\n]\r\n\r\n// 上传组件ref\r\nconst excelUploadRef = ref(null)\r\nconst imageUploadRef = ref(null)\r\n\r\n// 添加搜索底图相关状态\r\nconst imageSearchDialogVisible = ref(false)\r\nconst selectedSearchImages = ref([])\r\nconst searchImagesText = ref('') // 添加搜索底图文案变量\r\n\r\n// 打开搜索底图对话框\r\nconst openImageSearchDialog = () => {\r\n  imageSearchDialogVisible.value = true\r\n}\r\n\r\n// 处理搜索底图选择\r\nconst handleSearchImagesSelected = (images) => {\r\n  // 清空之前的选择\r\n  selectedSearchImages.value = images\r\n  \r\n  // 提取图片URL列表，使用原始百度图片URL\r\n  formData.searchImageUrls = images.map(img => {\r\n    console.log('搜索图片URL信息:', img.url);\r\n    return img.url; // 这里使用已经处理过的原始百度URL\r\n  });\r\n  \r\n  // 记录已选择的图片数量\r\n  if (images.length > 0) {\r\n    ElMessage.success(`已选择 ${images.length} 张搜索底图`)\r\n  }\r\n  \r\n  // 关闭对话框\r\n  imageSearchDialogVisible.value = false\r\n}\r\n</script>\r\n<style src=\"./css/CreateTask.scss\" scoped></style>"],"names":["API_BASE_URL","props","__props","emit","__emit","dialogVisible","ref","feedbackFormRef","feedbackForm","reactive","submitting","formRules","watch","newValue","onMounted","closeDialog","submitFeedback","valid","response","axios","ElMessage","error","_b","_a","searchForm","computed","val","searching","searchResults","hasSearched","abortController","cancelingSearch","selectedImages","previewVisible","previewImageUrl","currentPreviewIndex","img","updateSelectionState","selectedUrls","image","isImageSelected","selected","isAllSelected","cancelSearch","searchImages","keyword","amount","signal","data","images","url","index","width","height","widthMatch","heightMatch","e","isProxyUrl","toggleImageSelection","toggleSelectAll","handleConfirm","selectedOriginalImages","originalBaiduUrl","urlParamMatch","handleCancel","handleClose","handleImageError","event","previewImage","handleKeyDown","closePreview","prevImage","nextImage","onUnmounted","_component_el_icon","__unplugin_components_0","_component_el_input","__unplugin_components_1","_component_el_form_item","__unplugin_components_2","_component_el_input_number","__unplugin_components_3","defaultPreviewImg","baseURL","formData","isProcessing","watermarkLibraryVisible","addTemplateDialogVisible","rowCount","excelData","excelFileList","imageCount","imageFileList","lottieLoaded","namingVariables","templateTags","activeTemplateTag","templateSearchKey","templateLoading","templates","filteredTemplates","generatedResults","sanitizeForFileName","str","tag","fetchTemplates","fetchTemplatesByTag","searchTemplates","template","timestamp","fetchTemplateTags","handleTemplateAdded","newTemplate","t","refreshedTemplate","confirmSelectWatermark","firstSelectedTemplate","formatTime","date","results","processedResults","item","effectiveIndex","isSuccess","fileName","generateFileName","finalImageUrl","fallbackUrl","defaultName","taskName","indexNum","today","dateStr","timeStr","filterAt","idx","extractTextFromHtml","text1Value","text2Value","promptValue","textContent","searchImagesText","originalFilename","handleSubmit","errors","processingProgress","submitAIImageTask","submitCustomImageTask","submitSearchImageTask","reader","workbook","firstSheetName","worksheet","jsonData","firstRow","excelData2","row","prompt","text1","text2","requestData","errorText","reader2","decoder","processStream","done","value","lines","line","jsonData2","queuePosition","isQueued","globalIndex","newImage","e2","submitData","id","file","originalFileName","uploadData","sseUrl","eventSource","processGeneratedResults","currentIndex","resultWithIndex","text","handleExcelRemove","currentPreviewResult","result","fullPreviewIndex","fullPreviewVisible","nextTick","container","isTallImage","loadLottieScript","resolve","script","cdnScript","cdnError","toggleTemplateSelection","nameIndex","resetForm","queueProgress","feedbackDialogVisible","feedbackTaskId","feedbackTaskName","feedbackTemplateInfo","isDownloading","selectedSearchImages","excelUploadRef","imageUploadRef","hideElement","selector","element","displayType","showElement","optionItems","optionIndicator","input","resetDragAreaContent","dragger","hasUploadIcon","hasUploadText","insertNamingVariable","variable","startPos","endPos","getCustomNamingExample","example","textValue","handleExcelChange","hasPromptColumn","hasText1Column","handleImageChange","handleImageRemove","fileIndex","handleClearAll","handleExceed","files","selectTemplate","fetchFonts","batchDownloadAllImages","taskId","downloadUrl","link","fontOptions","font","loadFonts","el","customFonts","style","fontFaceRules","getFontFormat","openFeedbackDialog","templateIds","templateNames","handleFeedbackSuccess","match","wrapper","closeFullPreview","downloadImage","downloadExcelTemplate","regenerateImage","promptData","getImageUrl","path","normalizedPath","html","tempDiv","downloadButtonText","imageSizeOptions","imageSearchDialogVisible","openImageSearchDialog","handleSearchImagesSelected","_ctx","_cache","_component_el_radio_button","_component_el_radio_group","__unplugin_components_4","_component_el_option","__unplugin_components_5","_component_el_divider","__unplugin_components_6","_component_el_select","__unplugin_components_7","_component_el_upload","__unplugin_components_8","_component_el_tag","__unplugin_components_9","_component_el_empty","__unplugin_components_10","_component_el_dialog","__unplugin_components_11","_directive_loading","__unplugin_directives_0","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createVNode","$event","_withCtx","_createTextVNode"],"mappings":"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"}