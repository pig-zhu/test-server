{"version":3,"file":"remark-CBsncvHK.js","sources":["../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/ccount/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-to-markdown/lib/util/association.js","../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/util/safe.js","../../node_modules/mdast-util-to-markdown/lib/util/track.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/remark-gfm/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/unist-util-generated/lib/index.js","../../node_modules/mdast-util-definitions/lib/index.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test, optional\n * @param visitor Function to run for each node\n * @param reverse Fisit the tree in reverse, defaults to false\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"names":["stringifyPosition","value","position","point","index","pos","convert","test","ok","typeFactory","anyFactory","propsFactory","castFactory","tests","checks","any","parameters","check","all","node","key","type","assertion","CONTINUE","EXIT","SKIP","visitParents","tree","visitor","reverse","is","step","factory","parents","name","visit","result","subresult","offset","grandparents","toResult","overload","parent","element","decodeNamedCharacterReference","characterReference","character","splice","list","start","remove","items","end","chunkStart","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","code","constructs","existing","before","unicodePunctuationRegex","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","wwwPrefix","tokenizeWwwPrefix","domain","tokenizeDomain","path","tokenizePath","trail","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","text","gfmAutolinkLiteral","effects","nok","self","dot","data","gfmAtext","previousUnbalanced","atext","emailDomain","emailDomainAfter","emailDomainDot","wwwStart","wwwAfter","buffer","seen","protocolStart","protocolPrefixInside","protocol","protocolSlashesInside","afterProtocol","protocolAfter","size","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","after","events","token","normalizeUri","skip","replace","next","classifyCharacter","resolveAll","context","called","resolve","attention","tokenizeAttention","resolveAllAttention","open","group","openingSequence","closingSequence","use","nextEvents","movePoint","attentionMarkers","previous","marker","inside","close","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","factorySpace","max","limit","prefix","blankLine","tokenizeBlankLine","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","state","contStart","contBefore","characterEscape","tokenizeCharacterEscape","tokenizeCharacterReference","numeric","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","beforeSequenceOpen","tail","sequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","lineStart","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","enter","between","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","stream","current","adjust","breaks","slice","content","tokenizeContent","resolveContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","indent","gfmFootnote","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveToPotentialGfmFootnoteCall","id","call","string","chunk","replacement","callStart","callData","callEscape","labelAtMarker","whitespaceAfter","gfmStrikethrough","options","single","tokenizeStrikethrough","resolveAllStrikethrough","strikethrough","insideSpan","EditMap","add","addImpl","a","b","vecs","editMap","at","gfmTableAlign","inDelimiterRow","align","alignIndex","gfmTable","tokenizeTable","resolveTable","sizeB","bodyRowStart","headRowBefore","headRowStart","headRowBreak","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","currentTable","currentBody","currentCell","map","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","valueName","getPoint","now","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","tasklistCheck","tokenizeTasklistCheck","gfmTaskListItem","spaceThenNonSpace","gfm","ccount","source","count","escapeStringRegexp","own","findAndReplace","find","settings","schema","ignored","pairs","toPairs","pairIndex","grandparent","handler","change","nodes","match","matchObject","toExpression","toFunction","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transformGfmAutolinkLiterals","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","findUrl","findEmail","_","isCorrectDomain","parts","splitUrl","url","trailExec","closingParenIndex","openingParens","closingParens","email","decodeNumericCharacterReference","base","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","association","containerFlow","indexStack","children","tracker","results","child","eol","indentLines","line","one","patternCompile","pattern","patternInScope","stack","listInScope","none","safe","input","config","positions","infos","expression","numerical","escapeBackslashes","whole","track","lineShift","column","move","shift","chunks","footnoteReference","footnoteReferencePeek","gfmFootnoteFromMarkdown","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","enterFootnoteCall","enterFootnoteCallString","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","footnoteDefinition","safeOptions","subexit","blank","containerPhrasing","handle","constructsWithoutStrikethrough","handleDelete","peekDelete","gfmStrikethroughFromMarkdown","enterStrikethrough","exitStrikethrough","gfmStrikethroughToMarkdown","inlineCode","inlineCodePeek","defaultStringLength","markdownTable","stringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","serialize","toAlignment","lines","gfmTableFromMarkdown","enterTable","enterCell","enterRow","exitCodeText","exitTable","d","gfmTableToMarkdown","padding","alignDelimiters","around","handleTable","handleTableRow","handleTableCell","inlineCodeWithTable","serializeData","handleTableAsData","handleTableRowAsData","matrix","checkBullet","checkListItemIndent","style","listItem","listItemIndent","bullet","gfmTaskListItemFromMarkdown","exitCheck","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","listItemWithTaskListItem","siblings","firstParaghraph","sibling","checkable","checkbox","gfmFromMarkdown","gfmToMarkdown","remarkGfm","field","pointStart","pointEnd","emptyOptions","toString","includeImageAlt","includeHtml","values","initializeContent","afterContentStartConstruct","paragraphInitial","document","initializeDocument","containerConstruct","tokenizeContainer","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","entry","flow","initializeFlow","initial","atBlankEnding","afterConstruct","resolver","createResolver","initializeFactory","initializeText","resolveAllLineSuffixes","notText","extraResolver","resolveAllText","bufferIndex","tabs","createTokenizer","parser","initialize","from","columnStart","resolveAllConstructs","consume","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","sliceStream","sliceSerialize","defineSkip","write","main","addResult","expandTabs","serializeChunks","sliceChunks","_index","_bufferIndex","accountForPotentialSkip","chunkIndex","go","fields","construct","onreturn","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","atTab","contentInitial","flowInitial","resolveText","disable","parse","defaultConstructs","create","creator","search","preprocess","atCarriageReturn","preprocessor","encoding","endPosition","postprocess","fromMarkdown","compiler","opener","link","onenterdata","codeFlow","emphasis","hardBreak","html","image","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","resume","setData","getData","listStack","prepareList","defaultOnError","length","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","and","errorHandler","onExitError","ancestor","depth","referenceType","fragment","combined","remarkParse","doc","blockquote","lang","properties","safeId","counter","reuseCounter","sup","footnote","footnoteById","no","revert","subtype","suffix","contents","imageReference","linkReference","loose","listLoose","listItemLoose","spread","root","rows","firstRow","tableContent","body","tableRow","cellIndex","cells","alignValue","tableCell","tab","space","trimLines","last","trimLine","handlers","ignore","generated","definitions","cache","clean","createState","dangerous","patch","applyData","oneBound","allBound","wrap","augment","ctx","props","to","hName","hChildren","hProperties","defaultUnknownHandler","footer","listItems","referenceIndex","backReferences","backReference","tailTail","toHast","foot","remarkRehype","destination","bridge","mutate","file","error"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]}