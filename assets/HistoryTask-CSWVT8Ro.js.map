{"version":3,"file":"HistoryTask-CSWVT8Ro.js","sources":["../../src/pages/ImageAIGenerator/components/HistoryTask.vue"],"sourcesContent":["<template>\r\n  <div class=\"history-task-container\">\r\n    <div class=\"history-layout\">\r\n      <!-- 左侧面板：筛选区域和数据统计 -->\r\n      <div class=\"left-panel\">\r\n        <!-- 筛选区域 -->\r\n        <div class=\"filters-section\">\r\n          <h3 class=\"section-title\">筛选条件</h3>\r\n          \r\n          <!-- 关键词搜索 -->\r\n          <div class=\"filter-item\">\r\n            <div class=\"filter-label\">关键词搜索</div>\r\n            <el-input\r\n              v-model=\"searchKeyword\"\r\n              placeholder=\"搜索任务名称/关键词\"\r\n              clearable\r\n              @clear=\"clearSearch\"\r\n              @input=\"debouncedSearch\"\r\n              @keyup.enter=\"handleSearch\"\r\n            >\r\n            </el-input>\r\n          </div>\r\n          \r\n          <!-- 时间筛选 -->\r\n          <div class=\"filter-item\">\r\n            <div class=\"filter-label\">快速筛选</div>\r\n            <div class=\"time-options\">\r\n              <span\r\n                v-for=\"option in timeOptions\"\r\n                :key=\"option.value\"\r\n                :class=\"{ active: timeFilter === option.value }\"\r\n                @click=\"handleTimeFilterChange(option.value)\"\r\n              >\r\n                {{ option.label }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 日期选择器 -->\r\n          <div class=\"filter-item date-picker-container\">\r\n            <div class=\"filter-label\">选择日期</div>\r\n            <div class=\"date-picker-wrapper\">\r\n              <el-date-picker\r\n                v-model=\"dateRange\"\r\n                type=\"daterange\"\r\n                placeholder=\"选择日期范围\"\r\n                format=\"YYYY-MM-DD\"\r\n                value-format=\"YYYY-MM-DD\"\r\n                @change=\"handleDateRangeChange\"\r\n                :prefix-icon=\"Calendar\"\r\n                :clearable=\"true\"\r\n                :editable=\"false\"\r\n                :default-time=\"[\r\n                  new Date(2000, 1, 1, 0, 0, 0),\r\n                  new Date(2000, 1, 1, 23, 59, 59)\r\n                ]\"\r\n                unlink-panels\r\n                class=\"custom-date-picker\"\r\n                style=\"width: 210px !important; max-width: 210px !important;\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 数据统计区域 -->\r\n        <div class=\"stats-section\">\r\n          <h3 class=\"section-title\">数据统计</h3>\r\n          <div class=\"stats-cards\">\r\n            <div class=\"stat-card\">\r\n              <div class=\"stat-value\">{{ stats.totalImages }}</div>\r\n              <div class=\"stat-label\">生图总数</div>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n              <div class=\"stat-value\">{{ stats.todayImages }}</div>\r\n              <div class=\"stat-label\">今日生成</div>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n              <div class=\"stat-value\">{{ stats.weekImages }}</div>\r\n              <div class=\"stat-label\">本周生成</div>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n              <div class=\"stat-value\">{{ stats.monthImages }}</div>\r\n              <div class=\"stat-label\">本月生成</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 右侧面板：结果预览区 -->\r\n      <div class=\"right-panel\" v-loading=\"loading\">\r\n        <div class=\"results-header\">\r\n          <h2 class=\"results-title\">历史任务 ({{ filteredTasks.length }})</h2>\r\n          <!-- 添加刷新按钮 -->\r\n          <el-button type=\"primary\" :icon=\"Refresh\" @click=\"refreshData\" :loading=\"loading\" size=\"small\" circle title=\"刷新数据\"></el-button>\r\n        </div>\r\n        \r\n        <!-- 结果预览区域 -->\r\n        <div class=\"results-preview\" ref=\"resultsPreviewRef\">\r\n          <div v-if=\"filteredTasks.length > 0\" class=\"image-gallery\">\r\n            <div \r\n              v-for=\"task in filteredTasks\" \r\n              :key=\"task.id || task.task_id\" \r\n              class=\"task-card\"\r\n            >\r\n              <!-- 任务信息 -->\r\n              <div class=\"task-header\">\r\n                <div class=\"task-name\">{{ task.taskName }}</div>\r\n                <div class=\"task-meta\">\r\n                  <span class=\"task-time\">{{ formatDate(task.createTime) }}</span>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- 图片预览区域 -->\r\n              <div class=\"task-preview\">\r\n                <template v-if=\"task.images && task.images.length > 0\">\r\n                  <!-- 只显示第一张图片 -->\r\n                  <div \r\n                    class=\"preview-image-wrapper\"\r\n                    :class=\"{'tall-image': isTallImage(task.images[0])}\"\r\n                  >\r\n                    <img \r\n                      :src=\"getImageUrl(task.images[0].url)\" \r\n                      :data-task-id=\"task.id || task.task_id\"\r\n                      :alt=\"task.taskName\" \r\n                      class=\"preview-image\" \r\n                      @click=\"previewImage(task.images[0], task)\"\r\n                      loading=\"lazy\"\r\n                    />\r\n                    <div class=\"image-loading-placeholder\" v-if=\"!loadedImagesMap.has(`${task.id || task.task_id}-${getImageUrl(task.images[0].url)}`)\">\r\n                      <div class=\"loading-spinner\"></div>\r\n                    </div>\r\n                    <!-- 添加暗色玻璃效果的图片计数提示 -->\r\n                    <div v-if=\"task.images.length >= 1\" class=\"image-counter\">\r\n                      <span>共 {{ task.images.length }} 张</span>\r\n                    </div>\r\n                  </div>\r\n                </template>\r\n                <div v-else class=\"no-images-placeholder\">\r\n                  <el-icon v-if=\"task.status === 'processing'\"><Loading /></el-icon>\r\n                  <span v-else>暂无图片</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div v-else class=\"no-tasks\">\r\n            <el-empty v-if=\"searchKeyword && searchKeyword.trim() !== ''\">\r\n              <template #description>\r\n                <span>未找到与 \"{{ searchKeyword }}\" 相关的内容</span>\r\n              </template>\r\n            </el-empty>\r\n            <el-empty v-else description=\"暂无历史任务\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 分页控件 -->\r\n        <div class=\"pagination-container\" v-if=\"allTasks.length > 0\">\r\n          <div class=\"pagination-inner\">\r\n            <el-pagination\r\n              v-model:current-page=\"pagination.currentPage\"\r\n              v-model:page-size=\"pagination.pageSize\"\r\n              :page-sizes=\"[10, 20, 50]\"\r\n              layout=\"total, sizes, prev, pager, next, jumper\"\r\n              :total=\"pagination.total\"\r\n              @size-change=\"handleSizeChange\"\r\n              @current-change=\"handlePageChange\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <!-- 图片预览对话框 -->\r\n  <el-dialog\r\n    v-model=\"previewVisible\"\r\n    :width=\"dialogWidth\"\r\n    class=\"image-preview-dialog\"\r\n    @closed=\"handleDialogClose\"\r\n    @opened=\"handleDialogOpen\"\r\n    :show-close=\"false\"\r\n  >\r\n    <template #header>\r\n      <div class=\"preview-dialog-header\">\r\n        <h3 class=\"preview-title\">{{ currentTask?.taskName || '生成图片预览' }}</h3>\r\n        <div class=\"preview-actions\">\r\n          <span class=\"image-count-badge\" v-if=\"currentTask && currentTask.images.length\">\r\n            共 {{ currentTask.images.length }} 张图片\r\n          </span>\r\n          <el-button type=\"primary\" size=\"small\" @click=\"batchDownloadImages\" :disabled=\"!currentTask || !currentTask.images.length\">\r\n            <el-icon><Download /></el-icon> 一键打包下载\r\n          </el-button>\r\n          <el-button size=\"small\" circle @click=\"previewVisible = false\">\r\n            <el-icon><Close /></el-icon>\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <div class=\"preview-container\">\r\n      <div v-if=\"currentTask && currentTask.images.length > 0\" class=\"image-gallery-dialog\">\r\n        <div v-for=\"(image, index) in paginatedImages\" :key=\"index\" class=\"image-card\">\r\n          <div class=\"image-card-inner\" :class=\"{'tall-image': isTallImage(image)}\">\r\n            <img \r\n              :src=\"getImageUrl(image.url)\"\r\n              :data-task-id=\"currentTask.id || currentTask.task_id\" \r\n              :data-index=\"index\"\r\n              alt=\"生成图片\" \r\n              class=\"preview-image-dialog\" \r\n              @click=\"showFullImage(image, getFullImageIndex(index))\"\r\n              loading=\"lazy\"\r\n            />\r\n            <div class=\"image-loading-placeholder\" v-if=\"!loadedImagesMap.has(`${currentTask.id || currentTask.task_id}-${getImageUrl(image.url)}`)\">\r\n              <div class=\"loading-spinner\"></div>\r\n            </div>\r\n            <div class=\"image-info\">\r\n              <span class=\"image-number\">{{ getFullImageIndex(index) + 1 }}/{{ currentTask.images.length }}</span>\r\n              <span class=\"image-ratio\" v-if=\"image.width && image.height\">\r\n                {{ image.width }}×{{ image.height }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"no-images\">\r\n        <el-empty description=\"暂无生成的图片\" />\r\n      </div>\r\n      \r\n      <!-- 添加预览模态框内部的分页控件 -->\r\n      <div class=\"dialog-pagination-container\" v-if=\"currentTask && currentTask.images.length > 0\">\r\n        <el-pagination  \r\n          v-model:current-page=\"dialogPagination.currentPage\"\r\n          v-model:page-size=\"dialogPagination.pageSize\"\r\n          :page-sizes=\"dialogPagination.pageSizes\"\r\n          :total=\"currentTask.images.length\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @size-change=\"handleDialogSizeChange\"\r\n          @current-change=\"handleDialogPageChange\"\r\n          small\r\n        />\r\n      </div>\r\n    </div>\r\n  </el-dialog>\r\n  \r\n  <!-- 全屏图片预览 -->\r\n  <div v-if=\"fullPreviewVisible\" class=\"full-image-preview\" @click=\"closeFullPreview\">\r\n    <div class=\"full-image-container\">\r\n      <img :src=\"getImageUrl(fullPreviewImage?.url)\" alt=\"全屏预览\" class=\"full-preview-image\" />\r\n      \r\n      <!-- 页码信息独立显示 -->\r\n      <div class=\"full-preview-number\">{{ fullPreviewIndex + 1 }}/{{ currentTask?.images.length }}</div>\r\n      \r\n      <!-- 关闭按钮重新定位 -->\r\n      <button class=\"full-preview-close\" @click.stop=\"closeFullPreview\">\r\n        <el-icon><Close /></el-icon>\r\n      </button>\r\n      \r\n      <!-- 分离的控制按钮 -->\r\n      <div class=\"full-preview-controls\">\r\n        <el-button circle @click.stop=\"prevImage\" :disabled=\"fullPreviewIndex === 0\">\r\n          <el-icon><ArrowLeft /></el-icon>\r\n        </el-button>\r\n        <el-button circle @click.stop=\"nextImage\" :disabled=\"fullPreviewIndex >= (currentTask?.images.length - 1)\">\r\n          <el-icon><ArrowRight /></el-icon>\r\n        </el-button>\r\n      </div>\r\n      \r\n      <!-- 下载按钮移到右下角，单独定位 -->\r\n      <el-button \r\n        class=\"full-preview-download\" \r\n        circle \r\n        @click.stop=\"downloadImage(fullPreviewImage)\" \r\n        icon=\"Download\"\r\n      >\r\n        <el-icon><Download /></el-icon>\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, onBeforeUnmount, watch, onActivated, nextTick } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport { Search, Download, Loading, ArrowLeft, ArrowRight, Close, Calendar, Refresh } from '@element-plus/icons-vue'\r\nimport axios from 'axios'\r\n\r\n// 设置API基础URL前缀\r\nconst API_BASE_URL = '/api/ai'\r\nconsole.log('历史任务使用API基础URL:', API_BASE_URL)\r\n\r\n// 定义不含'/ai'前缀的baseURL - 使用相对路径\r\nconst baseURL = ''\r\nconsole.log('历史任务使用baseURL:', baseURL)\r\n\r\n// 加载状态\r\nconst loading = ref(false)\r\nconst dataLoading = ref(false) // 新增数据加载状态\r\nconst emptyText = ref('暂无历史任务')\r\n\r\n// 搜索筛选\r\nconst searchKeyword = ref('')\r\nconst timeFilter = ref('all')\r\nconst timeOptions = [\r\n  { label: '全部', value: 'all' },\r\n  { label: '今天', value: 'today' },\r\n  { label: '近7天', value: '7days' }\r\n]\r\n\r\n// 日期选择器相关\r\nconst dateRange = ref([])\r\nconst showDatePicker = ref(false) // 保留变量，但不再使用\r\n\r\n// 数据统计\r\nconst stats = reactive({\r\n  totalImages: 0,\r\n  todayImages: 0,\r\n  weekImages: 0,\r\n  monthImages: 0\r\n})\r\n\r\n// 添加一个存储所有任务的数组\r\nconst allTasks = ref([])\r\n// 添加任务缓存对象，按时间范围缓存\r\nconst taskCache = reactive({\r\n  all: [],\r\n  today: [],\r\n  '7days': [],\r\n  dateRange: {\r\n    range: [],\r\n    tasks: []\r\n  },\r\n  lastFetchTime: 0 // 上次获取数据的时间戳\r\n})\r\n\r\n// 缓存有效期（30分钟）\r\nconst CACHE_TTL = 30 * 60 * 1000\r\n\r\n// 图片URL缓存，避免重复处理相同URL\r\nconst imageUrlCache = new Map();\r\n\r\n// 图片加载状态缓存\r\nconst imageLoadingStatus = new Map();\r\n\r\n// 预览相关\r\nconst previewVisible = ref(false)\r\nconst currentTask = ref(null)\r\nconst currentImage = ref(null)\r\n\r\n// 全屏预览相关\r\nconst fullPreviewVisible = ref(false)\r\nconst fullPreviewImage = ref(null)\r\nconst fullPreviewIndex = ref(0)\r\n\r\n// 添加分页相关参数\r\nconst pagination = reactive({\r\n  pageSize: 10,\r\n  currentPage: 1,\r\n  total: 0\r\n})\r\n\r\n// 新增对话框分页相关\r\nconst dialogPagination = reactive({\r\n  currentPage: 1,\r\n  pageSizes: [8, 12, 20, 32],\r\n  pageSize: 12\r\n})\r\n\r\n// 根据屏幕尺寸计算合适的每页图片数量\r\nconst imagesPerPage = computed(() => {\r\n  return dialogPagination.pageSize;\r\n})\r\n\r\n// 自动调整每页显示数量 - 根据屏幕尺寸\r\nconst autoAdjustImagesPerPage = () => {\r\n  const width = window.innerWidth;\r\n  if (width < 640) {\r\n    // 手机屏幕\r\n    dialogPagination.pageSize = 6;\r\n  } else if (width < 1024) {\r\n    // 平板或小屏幕\r\n    dialogPagination.pageSize = 9;\r\n  } else if (width < 1440) {\r\n    // 中等屏幕\r\n    dialogPagination.pageSize = 12;\r\n  } else {\r\n    // 大屏幕\r\n    dialogPagination.pageSize = 20;\r\n  }\r\n}\r\n\r\n// 判断是否是竖版图片\r\nconst isTallImage = (image) => {\r\n  // 如果没有宽高信息，默认按横版处理\r\n  if (!image || !image.width || !image.height) {\r\n    return false;\r\n  }\r\n  \r\n  // 宽高比小于0.8的图片视为竖版图片\r\n  // 这意味着高度是宽度的1.25倍以上才认为是竖版\r\n  const ratio = image.width / image.height;\r\n  return ratio < 0.8;\r\n}\r\n\r\n// 过滤后的任务列表 - 优化计算性能\r\nconst filteredTasks = computed(() => {\r\n  // 先确保有数据\r\n  if (allTasks.value.length === 0) {\r\n    pagination.total = 0;\r\n    return [];\r\n  }\r\n  \r\n  let result = allTasks.value;\r\n  \r\n  // 前端关键词搜索\r\n  if (searchKeyword.value && searchKeyword.value.trim() !== '') {\r\n    const keyword = searchKeyword.value.trim().toLowerCase();\r\n    result = result.filter(task => {\r\n      // 在任务名称中搜索\r\n      if (task.taskName && task.taskName.toLowerCase().includes(keyword)) {\r\n        return true;\r\n      }\r\n      // 在任务提示词中搜索\r\n      if (task.prompt && task.prompt.toLowerCase().includes(keyword)) {\r\n        return true;\r\n      }\r\n      // 在图片提示词中搜索 - 优化：只检查第一张图片的提示词以提高性能\r\n      if (task.images && task.images.length > 0 && task.images[0].prompt) {\r\n        return task.images[0].prompt.toLowerCase().includes(keyword);\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  \r\n  // 更新分页信息\r\n  pagination.total = result.length;\r\n  \r\n  // 确保当前页码在有效范围内\r\n  const maxPage = Math.max(1, Math.ceil(result.length / pagination.pageSize));\r\n  if (pagination.currentPage > maxPage) {\r\n    pagination.currentPage = maxPage;\r\n  }\r\n  \r\n  // 应用分页\r\n  const start = (pagination.currentPage - 1) * pagination.pageSize;\r\n  const end = start + pagination.pageSize;\r\n  \r\n  // 预加载下一页的图片，提升翻页体验\r\n  if (end < result.length) {\r\n    const nextPageImages = result.slice(end, Math.min(end + pagination.pageSize, result.length));\r\n    // 异步预加载下一页第一张图片\r\n    setTimeout(() => {\r\n      nextPageImages.forEach(task => {\r\n        if (task.images && task.images.length > 0) {\r\n          const img = new Image();\r\n          img.src = getImageUrl(task.images[0].url);\r\n        }\r\n      });\r\n    }, 500);\r\n  }\r\n  \r\n  // 返回当前页的数据\r\n  return result.slice(start, end);\r\n})\r\n\r\n// 格式化日期 - 使用缓存优化性能\r\nconst dateFormatCache = new Map();\r\nconst formatDate = (date) => {\r\n  if (!date) return '';\r\n  \r\n  // 使用缓存\r\n  if (dateFormatCache.has(date)) {\r\n    return dateFormatCache.get(date);\r\n  }\r\n  \r\n  const d = new Date(date);\r\n  const formatted = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\r\n  \r\n  // 存入缓存\r\n  dateFormatCache.set(date, formatted);\r\n  \r\n  return formatted;\r\n}\r\n\r\n// 防抖函数\r\nconst debounce = (fn, delay) => {\r\n  let timer = null\r\n  return function() {\r\n    if (timer) clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(this, arguments)\r\n    }, delay)\r\n  }\r\n}\r\n\r\n// 搜索防抖\r\nconst debouncedSearch = debounce(() => {\r\n  // 不再调用后端API，仅进行前端筛选\r\n  console.log('前端筛选关键词:', searchKeyword.value);\r\n  // 重置到第一页，确保搜索结果从第一页显示\r\n  pagination.currentPage = 1;\r\n}, 300) // 缩短防抖时间，提高响应速度\r\n\r\n// 手动刷新数据的方法 - 强制刷新缓存\r\nconst refreshData = async () => {\r\n  loading.value = true\r\n  // 清除缓存\r\n  taskCache.lastFetchTime = 0\r\n  await fetchHistoryTasks(true)\r\n  ElMessage.success('数据已刷新')\r\n  loading.value = false\r\n}\r\n\r\n// 检查是否可以使用缓存\r\nconst canUseCache = (cacheType) => {\r\n  const now = Date.now();\r\n  // 缓存未过期且有数据\r\n  return (now - taskCache.lastFetchTime < CACHE_TTL) && \r\n         ((cacheType === 'all' && taskCache.all.length > 0) ||\r\n          (cacheType === 'today' && taskCache.today.length > 0) ||\r\n          (cacheType === '7days' && taskCache['7days'].length > 0) ||\r\n          (cacheType === 'dateRange' && taskCache.dateRange.tasks.length > 0 && \r\n           areDatesEqual(taskCache.dateRange.range, dateRange.value)));\r\n}\r\n\r\n// 比较日期范围是否相同\r\nconst areDatesEqual = (dates1, dates2) => {\r\n  if (!dates1 || !dates2 || dates1.length !== dates2.length) {\r\n    return false;\r\n  }\r\n  \r\n  return dates1.every((date, i) => date === dates2[i]);\r\n}\r\n\r\n// 分批处理数据的函数 - 支持新的preview_image结构\r\nconst processBatchTasks = (tasks, batchSize = 50) => {\r\n  return new Promise(resolve => {\r\n    const totalTasks = tasks.length;\r\n    const processedTasks = [];\r\n    let processedCount = 0;\r\n    \r\n    // 处理一批数据\r\n    const processBatch = (startIndex) => {\r\n      const endIndex = Math.min(startIndex + batchSize, totalTasks);\r\n      const currentBatch = tasks.slice(startIndex, endIndex);\r\n      \r\n      // 处理当前批次\r\n      const processed = currentBatch\r\n        .map(task => {\r\n          // 创建images数组\r\n          if (!task.images) {\r\n            task.images = [];\r\n          } \r\n          \r\n          // 处理preview_image作为第一张图片\r\n          if (task.preview_image) {\r\n            // 如果有preview_image，确保images是数组\r\n            if (!Array.isArray(task.images)) {\r\n              task.images = [];\r\n            }\r\n            \r\n            // 将preview_image添加到images数组中\r\n            if (!task.images.some(img => img.id === task.preview_image.id)) {\r\n              task.images.push(task.preview_image);\r\n            }\r\n          }\r\n          \r\n          // 如果images不是数组，将其转换为数组\r\n          if (!Array.isArray(task.images)) {\r\n            task.images = [task.images];\r\n          }\r\n          \r\n          // 设置任务创建时间\r\n          if (task.created_at && !task.createTime) {\r\n            task.createTime = task.created_at;\r\n          }\r\n          \r\n          // 设置任务ID\r\n          if (task.task_id && !task.id) {\r\n            task.id = task.task_id;\r\n          }\r\n          \r\n          // 添加一些辅助属性，方便UI显示\r\n          task.imageCount = task.image_count || task.images.length;\r\n          \r\n          // 预处理图片URL，减少重复计算\r\n          if (task.images && task.images.length > 0) {\r\n            task.images.forEach(image => {\r\n              if (image && image.url) {\r\n                // 预缓存图片URL\r\n                getImageUrl(image.url);\r\n              }\r\n            });\r\n          }\r\n          \r\n          // 重新定义任务名称显示逻辑\r\n          if (task.name) {\r\n            // 使用后端返回的name字段，并清理序号后缀\r\n            task.taskName = cleanTaskName(task.name);\r\n          } else if (task.taskName) {\r\n            // 如果已经有taskName字段，清理该字段\r\n            task.taskName = cleanTaskName(task.taskName);\r\n          } else if (task.prompt) {\r\n            // 如果没有name但有提示词，使用提示词作为任务名\r\n            task.taskName = task.prompt;\r\n          } else if (task.preview_image && task.preview_image.prompt) {\r\n            // 使用预览图的提示词\r\n            task.taskName = task.preview_image.prompt;\r\n          } else if (task.images && task.images.length > 0 && task.images[0].prompt) {\r\n            // 尝试使用第一张图片的提示词\r\n            task.taskName = task.images[0].prompt;\r\n          } else {\r\n            // 如果没有任何提示词，使用默认命名\r\n            task.taskName = \"未命名任务\";\r\n          }\r\n          \r\n          return task;\r\n        });\r\n      \r\n      // 添加到已处理数组\r\n      processedTasks.push(...processed);\r\n      processedCount += currentBatch.length;\r\n      \r\n      // 如果还有未处理的任务，继续处理下一批\r\n      if (processedCount < totalTasks) {\r\n        // 使用requestAnimationFrame避免阻塞UI\r\n        window.requestAnimationFrame(() => processBatch(endIndex));\r\n      } else {\r\n        // 全部处理完成，返回结果\r\n        resolve(processedTasks);\r\n      }\r\n    };\r\n    \r\n    // 启动批处理\r\n    processBatch(0);\r\n  });\r\n};\r\n\r\n// 获取历史任务数据 - 增加缓存和批量处理\r\nconst fetchHistoryTasks = async (forceRefresh = false) => {\r\n  try {\r\n    // 使用单独的loading状态，避免整个界面闪烁\r\n    dataLoading.value = true;\r\n    \r\n    // 确定当前使用的缓存类型\r\n    let cacheType = 'all';\r\n    if (timeFilter.value !== 'all') {\r\n      cacheType = timeFilter.value;\r\n    } else if (dateRange.value && dateRange.value.length === 2) {\r\n      cacheType = 'dateRange';\r\n    }\r\n    \r\n    // 检查是否可以使用缓存\r\n    if (!forceRefresh && canUseCache(cacheType)) {\r\n      console.log('使用缓存数据:', cacheType);\r\n      if (cacheType === 'dateRange') {\r\n        allTasks.value = [...taskCache.dateRange.tasks];\r\n      } else {\r\n        allTasks.value = [...taskCache[cacheType]];\r\n      }\r\n      pagination.total = allTasks.value.length;\r\n      pagination.currentPage = 1;\r\n      \r\n      // 如果有缓存数据，优先使用缓存，然后异步更新统计信息\r\n      fetchStatistics();\r\n      \r\n      dataLoading.value = false;\r\n      return;\r\n    }\r\n    \r\n    // 没有有效缓存，设置loading状态\r\n    loading.value = true;\r\n    \r\n    // 构建查询参数\r\n    const params = new URLSearchParams()\r\n    // 增加批量获取数量\r\n    params.append('limit', '200')\r\n    params.append('offset', '0')\r\n    \r\n    // 添加日期筛选\r\n    if (timeFilter.value !== 'all') {\r\n      const today = new Date()\r\n      today.setHours(0, 0, 0, 0)\r\n      \r\n      if (timeFilter.value === 'today') {\r\n        const formattedDate = today.toISOString().split('T')[0]\r\n        params.append('start_date', getPastDate(0))\r\n      } else if (timeFilter.value === '7days') {\r\n        const sevenDaysAgo = new Date(today)\r\n        sevenDaysAgo.setDate(today.getDate() - 7)\r\n        params.append('start_date', getPastDate(7))\r\n      }\r\n    } else if (dateRange.value && dateRange.value.length === 2) {\r\n      // 如果有选择日期范围\r\n      params.append('start_date', dateRange.value[0])\r\n      params.append('end_date', dateRange.value[1])\r\n    }\r\n    \r\n    // 添加数据加载状态指示\r\n    const dataLoadingIndicator = () => {\r\n      // 每2秒更新一次消息\r\n      setTimeout(() => {\r\n        if (loading.value) {\r\n          console.log('数据加载中...');\r\n          dataLoadingIndicator();\r\n        }\r\n      }, 2000);\r\n    };\r\n    dataLoadingIndicator();\r\n    \r\n    // 发起请求\r\n    const response = await axios.get(`${API_BASE_URL}/history?${params.toString()}`)\r\n    \r\n    if (response.data.success) {\r\n      // 处理数据\r\n      if (response.data.tasks && Array.isArray(response.data.tasks)) {\r\n        // 使用分批处理数据\r\n        const processedTasks = await processBatchTasks(response.data.tasks);\r\n        \r\n        // 更新缓存\r\n        if (timeFilter.value !== 'all') {\r\n          taskCache[timeFilter.value] = processedTasks;\r\n        } else if (dateRange.value && dateRange.value.length === 2) {\r\n          taskCache.dateRange = {\r\n            range: [...dateRange.value],\r\n            tasks: processedTasks\r\n          };\r\n        } else {\r\n          taskCache.all = processedTasks;\r\n        }\r\n        \r\n        // 更新最后获取时间\r\n        taskCache.lastFetchTime = Date.now();\r\n        \r\n        // 更新显示数据\r\n        allTasks.value = processedTasks;\r\n        \r\n        // 设置初始分页\r\n        pagination.total = processedTasks.length;\r\n        pagination.currentPage = 1;\r\n        \r\n        // 获取统计数据\r\n        fetchStatistics();\r\n      } else {\r\n        allTasks.value = response.data.tasks || [];\r\n        pagination.total = allTasks.value.length;\r\n      }\r\n    } else {\r\n      ElMessage.error(response.data.error || '获取历史记录失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取历史任务失败:', error)\r\n    ElMessage.error('获取历史任务失败，请检查网络连接')\r\n  } finally {\r\n    loading.value = false;\r\n    dataLoading.value = false;\r\n  }\r\n}\r\nconst getPastDate = (days) => {\r\n  const date = new Date()\r\n  date.setDate(date.getDate() - days)\r\n  // 设置时间为当天的 00:00:00\r\n  date.setHours(0, 0, 0, 0)\r\n  return formatDate(date)\r\n}\r\n// 获取统计数据 - 单独请求，不阻塞主数据加载\r\nconst fetchStatistics = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/history/stats`)\r\n    \r\n    if (response.data.success) {\r\n      // 更新基本统计数据\r\n      stats.totalImages = response.data.stats.totalImages\r\n      stats.todayImages = response.data.stats.todayImages\r\n      stats.weekImages = response.data.stats.weekImages\r\n      stats.monthImages = response.data.stats.monthImages\r\n    }\r\n  } catch (error) {\r\n    console.error('获取统计数据失败:', error)\r\n  }\r\n}\r\n\r\n// 页码变更 - 纯前端分页\r\nconst handlePageChange = (page) => {\r\n  pagination.currentPage = page\r\n}\r\n\r\n// 每页数量变更 - 纯前端分页\r\nconst handleSizeChange = (size) => {\r\n  pagination.pageSize = size\r\n  pagination.currentPage = 1 // 重置到第一页\r\n}\r\n\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  // 不再调用API重新获取数据\r\n  // pagination.currentPage = 1 // 重置到第一页\r\n  // fetchHistoryTasks()\r\n  \r\n  // 记录搜索行为\r\n  console.log('进行搜索:', searchKeyword.value);\r\n}\r\n\r\n// 处理时间筛选变更\r\nconst handleTimeFilterChange = (value) => {\r\n  // 如果选择了同一个值，不做任何处理\r\n  if (value === timeFilter.value) return;\r\n  \r\n  timeFilter.value = value\r\n  pagination.currentPage = 1 // 重置到第一页\r\n  \r\n  // 清空日期选择\r\n  dateRange.value = []\r\n  \r\n  // 使用缓存的数据或者重新获取\r\n  if (canUseCache(value)) {\r\n    // 使用缓存数据\r\n    allTasks.value = [...taskCache[value]];\r\n    pagination.total = allTasks.value.length;\r\n  } else {\r\n    // 没有缓存，需要重新获取\r\n    fetchHistoryTasks();\r\n  }\r\n}\r\n\r\n// 处理日期区间变更\r\nconst handleDateRangeChange = (dates) => {\r\n  if (dates && dates.length === 2) {\r\n    console.log('选择的日期区间:', dates)\r\n    // 如果选择了日期范围，则清除时间筛选\r\n    timeFilter.value = 'all'\r\n    // 设置日期区间并获取数据\r\n    dateRange.value = dates\r\n    pagination.currentPage = 1 // 重置到第一页\r\n    \r\n    // 检查缓存\r\n    if (canUseCache('dateRange') && areDatesEqual(taskCache.dateRange.range, dates)) {\r\n      // 使用缓存\r\n      allTasks.value = [...taskCache.dateRange.tasks];\r\n      pagination.total = allTasks.value.length;\r\n    } else {\r\n      // 重新获取数据\r\n      fetchHistoryTasks()\r\n    }\r\n  } else if (!dates) {\r\n    // 清空日期区间\r\n    dateRange.value = []\r\n    // 恢复默认筛选\r\n    timeFilter.value = 'all'\r\n    \r\n    // 使用全部数据缓存\r\n    if (canUseCache('all')) {\r\n      allTasks.value = [...taskCache.all];\r\n      pagination.total = allTasks.value.length;\r\n    } else {\r\n      fetchHistoryTasks()\r\n    }\r\n  }\r\n}\r\n\r\n// 预览单张图片\r\nconst previewImage = (image, task) => {\r\n  // 确保图片数据存在\r\n  if (!image || !image.url) {\r\n    ElMessage.warning('图片数据不完整，无法预览')\r\n    return\r\n  }\r\n  \r\n  // 重置分页\r\n  dialogPagination.currentPage = 1\r\n  \r\n  // 设置当前预览的图片和任务\r\n  currentImage.value = image\r\n  \r\n  // 如果是单独预览图片，创建一个临时任务对象，只包含当前图片\r\n  if (task) {\r\n    if (task.images && Array.isArray(task.images)) {\r\n      currentTask.value = task\r\n    } else {\r\n      // 如果任务没有images数组，创建一个只包含当前图片的临时任务\r\n      currentTask.value = {\r\n        ...task,\r\n        images: [image]\r\n      }\r\n    }\r\n  } else {\r\n    // 创建临时任务对象\r\n    currentTask.value = {\r\n      taskName: '图片预览',\r\n      images: [image]\r\n    }\r\n  }\r\n  \r\n  previewVisible.value = true\r\n}\r\n\r\n// 查看图片\r\nconst viewImages = (task) => {\r\n  // 确保任务对象有效\r\n  if (!task) {\r\n    ElMessage.warning('任务数据不完整')\r\n    return\r\n  }\r\n  \r\n  // 确保task.images是数组\r\n  if (!task.images) {\r\n    task.images = []\r\n  } else if (!Array.isArray(task.images)) {\r\n    task.images = [task.images]\r\n  }\r\n  \r\n  currentTask.value = task\r\n  previewVisible.value = true\r\n}\r\n\r\n// 下载图片 - 完全简化，只处理URL路径\r\nconst downloadImage = (image) => {\r\n  try {\r\n    if (!image || !image.url) {\r\n      ElMessage.error('无效的图片数据');\r\n      return;\r\n    }\r\n    \r\n    // 创建下载链接\r\n    const link = document.createElement('a');\r\n    link.href = getImageUrl(image.url);\r\n    \r\n    // 获取URL中的文件名\r\n    const fileName = image.url.split('/').pop() || `AI生成图片_${new Date().getTime()}.png`;\r\n    link.download = fileName;\r\n    \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    ElMessage.success('图片下载中...');\r\n  } catch (error) {\r\n    console.error('下载图片失败:', error);\r\n    ElMessage.error('下载图片失败');\r\n  }\r\n}\r\n\r\n// 批量下载图片\r\nconst batchDownloadImages = async () => {\r\n  if (!currentTask.value || !currentTask.value.images || currentTask.value.images.length === 0) {\r\n    ElMessage.warning('没有可下载的图片');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 获取任务ID\r\n    const taskId = currentTask.value.id;\r\n    if (!taskId) {\r\n      ElMessage.warning('无法获取任务ID，请刷新页面重试');\r\n      return;\r\n    }\r\n    \r\n    ElMessage.info('正在准备下载，请稍候...');\r\n    \r\n    // 调用下载接口\r\n    const downloadUrl = `/api/ai/download-task/${taskId}`;\r\n    \r\n    // 创建一个隐藏的a标签执行下载\r\n    const link = document.createElement('a');\r\n    link.href = downloadUrl;\r\n    link.target = '_blank';\r\n    link.download = `${currentTask.value.taskName || '历史图片集'}.zip`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    ElMessage.success('下载已开始，请稍候');\r\n  } catch (error) {\r\n    console.error('下载失败:', error);\r\n    ElMessage.error('下载失败: ' + (error.message || '未知错误'));\r\n  }\r\n};\r\n\r\n// 显示全屏图片\r\nconst showFullImage = (image, index) => {\r\n  // 确保图片数据存在\r\n  if (!image || !image.url) {\r\n    ElMessage.warning('图片数据不完整，无法预览');\r\n    return;\r\n  }\r\n  \r\n  fullPreviewImage.value = image;\r\n  fullPreviewIndex.value = index;\r\n  fullPreviewVisible.value = true;\r\n  document.body.classList.add('no-scroll');\r\n  \r\n  console.log('显示全屏图片，索引:', index, '图片:', image);\r\n  \r\n  // 添加键盘事件监听\r\n  document.addEventListener('keydown', handleKeyDown);\r\n}\r\n\r\n// 关闭全屏预览\r\nconst closeFullPreview = () => {\r\n  fullPreviewVisible.value = false;\r\n  document.body.classList.remove('no-scroll');\r\n  \r\n  // 移除键盘事件监听\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n}\r\n\r\n// 处理键盘事件\r\nconst handleKeyDown = (event) => {\r\n  if (!fullPreviewVisible.value) return;\r\n  \r\n  switch (event.key) {\r\n    case 'ArrowLeft':\r\n      prevImage();\r\n      break;\r\n    case 'ArrowRight':\r\n      nextImage();\r\n      break;\r\n    case 'Escape':\r\n      closeFullPreview();\r\n      break;\r\n  }\r\n}\r\n\r\n// 上一张图片\r\nconst prevImage = () => {\r\n  if (fullPreviewIndex.value > 0) {\r\n    fullPreviewIndex.value--;\r\n    fullPreviewImage.value = currentTask.value.images[fullPreviewIndex.value];\r\n    \r\n    // 如果切换到上一页的图片，自动翻页\r\n    const currentPageIndex = Math.floor(fullPreviewIndex.value / imagesPerPage.value);\r\n    if (currentPageIndex + 1 < dialogPagination.currentPage) {\r\n      dialogPagination.currentPage = currentPageIndex + 1;\r\n    }\r\n  }\r\n}\r\n\r\n// 下一张图片\r\nconst nextImage = () => {\r\n  if (currentTask.value && fullPreviewIndex.value < currentTask.value.images.length - 1) {\r\n    fullPreviewIndex.value++;\r\n    fullPreviewImage.value = currentTask.value.images[fullPreviewIndex.value];\r\n    \r\n    // 如果切换到下一页的图片，自动翻页\r\n    const currentPageIndex = Math.floor(fullPreviewIndex.value / imagesPerPage.value);\r\n    if (currentPageIndex + 1 > dialogPagination.currentPage) {\r\n      dialogPagination.currentPage = currentPageIndex + 1;\r\n    }\r\n  }\r\n}\r\n\r\n// 在对话框关闭时确保清理\r\nconst handleDialogClose = () => {\r\n  closeFullPreview();\r\n}\r\n\r\n// 在对话框打开时设置尺寸\r\nconst handleDialogOpen = () => {\r\n  // 自动调整每页显示数量\r\n  autoAdjustImagesPerPage()\r\n  \r\n  // 重置分页到第一页\r\n  dialogPagination.currentPage = 1\r\n  \r\n  // 调整对话框尺寸\r\n  updateDialogSize()\r\n  \r\n  // 设置一个延时再次调整，确保DOM已完全渲染\r\n  setTimeout(() => {\r\n    updateDialogSize()\r\n    \r\n    // 在对话框打开后，直接初始化对话框中的图片\r\n    initDialogImages();\r\n  }, 50)\r\n}\r\n\r\n// 初始化对话框中的图片\r\nconst initDialogImages = () => {\r\n  // 设置当前查看的所有图片为已加载状态\r\n  if (currentTask.value && currentTask.value.images) {\r\n    currentTask.value.images.forEach(image => {\r\n      if (image && image.url) {\r\n        // 预缓存图片URL\r\n        getImageUrl(image.url);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // 初始化图片观察器，针对模态框内的图片\r\n  const modalImageObserver = setupImageObserver();\r\n  if (!modalImageObserver) return;\r\n  \r\n  // 获取模态框内所有图片元素\r\n  const dialogImages = document.querySelectorAll('.image-preview-dialog .preview-image-dialog');\r\n  dialogImages.forEach(img => {\r\n    // 标记为已加载，避免显示加载占位符\r\n    const taskId = img.dataset.taskId;\r\n    const index = img.dataset.index;\r\n    if (taskId && index && currentTask.value && currentTask.value.images[index]) {\r\n      loadedImagesMap.set(`${taskId}-${getImageUrl(currentTask.value.images[index].url)}`, true);\r\n    }\r\n  });\r\n}\r\n\r\n// 获取响应式的对话框尺寸\r\nconst dialogWidth = computed(() => {\r\n  const vw = window.innerWidth * 0.85; // 视口宽度的85%\r\n  return `${Math.min(vw, 1200)}px`; // 最大宽度限制为1200px\r\n});\r\n\r\n// 计算对话框尺寸优化\r\nconst updateDialogSize = () => {\r\n  // 设置对话框高度为视口高度的75%\r\n  const vh = window.innerHeight * 0.75;\r\n  // 宽度为视口宽度的85%，最大1200px\r\n  const vw = window.innerWidth * 0.85;\r\n  const width = Math.min(vw, 1200);\r\n  \r\n  document.documentElement.style.setProperty('--dialog-width', `${width}px`);\r\n  document.documentElement.style.setProperty('--dialog-height', `${vh}px`);\r\n  \r\n  // 计算网格布局 - 根据屏幕宽度决定列数\r\n  let columns;\r\n  if (width < 500) {\r\n    columns = 2; // 小屏幕手机\r\n  } else if (width < 768) {\r\n    columns = 3; // 平板或小屏幕\r\n  } else if (width < 1024) {\r\n    columns = 4; // 中等屏幕\r\n  } else {\r\n    columns = 5; // 大屏幕\r\n  }\r\n  \r\n  // 设置图片卡片的间距\r\n  const gap = width < 768 ? 8 : 12;\r\n  \r\n  // 考虑间距计算每列的宽度\r\n  const availableWidth = width - ((columns + 1) * gap);\r\n  const cardWidth = Math.floor(availableWidth / columns);\r\n  \r\n  // 设置CSS变量\r\n  document.documentElement.style.setProperty('--card-width', `${cardWidth}px`);\r\n  document.documentElement.style.setProperty('--grid-columns', columns);\r\n  document.documentElement.style.setProperty('--grid-gap', `${gap}px`);\r\n}\r\n\r\n// 窗口大小变化处理\r\nconst handleResize = () => {\r\n  // 自动调整每页显示数量\r\n  if (previewVisible.value) {\r\n    autoAdjustImagesPerPage();\r\n  }\r\n  \r\n  // 更新对话框尺寸\r\n  updateDialogSize();\r\n  \r\n  // 如果预览窗口打开，重新渲染\r\n  if (previewVisible.value) {\r\n    handleDialogOpen();\r\n  }\r\n};\r\n\r\n// 搜索输入元素的引用\r\nconst searchInput = ref(null);\r\n\r\n// 初始化预览图片控制器\r\nconst initializePreviewImageControls = () => {\r\n  // 获取搜索输入框元素\r\n  searchInput.value = document.querySelector('.filter-item .el-input input');\r\n  \r\n  // 初始化窗口大小处理\r\n  window.addEventListener('resize', handleResize);\r\n  \r\n  // 初始化每页显示的图片数量\r\n  autoAdjustImagesPerPage();\r\n  \r\n  // 设置CSS变量\r\n  updateDialogSize();\r\n  \r\n  // 初始化键盘事件处理\r\n  document.addEventListener('keydown', (e) => {\r\n    // 只在全屏预览模式下处理按键\r\n    if (fullPreviewVisible.value) {\r\n      handleKeyDown(e);\r\n    }\r\n  });\r\n};\r\n\r\n// 清空搜索\r\nconst clearSearch = () => {\r\n  searchKeyword.value = '';\r\n  pagination.currentPage = 1; // 重置到第一页\r\n}\r\n\r\n// 组件被激活时（如从其他页面切回来时）智能刷新数据\r\nonActivated(() => {\r\n  console.log('历史任务组件被激活')\r\n  // 直接刷新数据，不再检查缓存\r\n  refreshData()\r\n  \r\n  // 清除前一页面记录（保留此功能）\r\n  sessionStorage.removeItem('previousPage')\r\n})\r\n\r\n// 加载数据 - 使用更智能的加载策略\r\nonMounted(async () => {\r\n  loading.value = true;\r\n  window.addEventListener('resize', handleResize);\r\n  \r\n  // 初始化预览图片控制器\r\n  initializePreviewImageControls();\r\n  \r\n  // 添加滚动事件监听\r\n  if (resultsPreviewRef.value) {\r\n    resultsPreviewRef.value.addEventListener('scroll', handleResultsScroll);\r\n  }\r\n  \r\n  // 在获取搜索输入元素后添加事件监听\r\n  if (searchInput.value) {\r\n    searchInput.value.addEventListener('input', debouncedSearch);\r\n  }\r\n  \r\n  // 尝试从本地存储恢复缓存\r\n  const savedCache = localStorage.getItem('taskCache');\r\n  if (savedCache) {\r\n    try {\r\n      const parsedCache = JSON.parse(savedCache);\r\n      // 检查缓存是否过期\r\n      if (Date.now() - parsedCache.timestamp < CACHE_TTL) {\r\n        // 从缓存恢复数据\r\n        Object.keys(parsedCache.data).forEach(key => {\r\n          if (key !== 'lastFetchTime') {\r\n            if (key === 'dateRange') {\r\n              taskCache.dateRange = parsedCache.data.dateRange;\r\n            } else {\r\n              taskCache[key] = parsedCache.data[key];\r\n            }\r\n          }\r\n        });\r\n        \r\n        taskCache.lastFetchTime = parsedCache.timestamp;\r\n        console.log('已从本地存储恢复缓存数据');\r\n        \r\n        // 根据当前筛选条件恢复显示\r\n        if (timeFilter.value !== 'all' && taskCache[timeFilter.value].length > 0) {\r\n          allTasks.value = [...taskCache[timeFilter.value]];\r\n        } else if (dateRange.value && dateRange.value.length === 2 && \r\n                  taskCache.dateRange.tasks.length > 0 && \r\n                  areDatesEqual(taskCache.dateRange.range, dateRange.value)) {\r\n          allTasks.value = [...taskCache.dateRange.tasks];\r\n        } else if (taskCache.all.length > 0) {\r\n          allTasks.value = [...taskCache.all];\r\n        }\r\n        \r\n        if (allTasks.value.length > 0) {\r\n          pagination.total = allTasks.value.length;\r\n          // 异步获取最新统计数据\r\n          fetchStatistics();\r\n          \r\n          // 初始化延迟加载\r\n          setTimeout(() => {\r\n            initLazyLoading();\r\n          }, 200);\r\n          \r\n          loading.value = false;\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('恢复缓存失败:', error);\r\n    }\r\n  }\r\n  \r\n  // 没有有效缓存时，获取历史任务列表\r\n  await fetchHistoryTasks();\r\n  \r\n  // 初始化延迟加载\r\n  setTimeout(() => {\r\n    initLazyLoading();\r\n  }, 200);\r\n  \r\n  loading.value = false;\r\n});\r\n\r\n// 组件卸载前清理事件监听器\r\nonBeforeUnmount(() => {\r\n  // 保存缓存到本地存储\r\n  try {\r\n    const cacheToSave = {\r\n      timestamp: taskCache.lastFetchTime,\r\n      data: {\r\n        all: taskCache.all,\r\n        today: taskCache.today,\r\n        '7days': taskCache['7days'],\r\n        dateRange: taskCache.dateRange\r\n      }\r\n    };\r\n    localStorage.setItem('taskCache', JSON.stringify(cacheToSave));\r\n    console.log('缓存数据已保存到本地存储');\r\n  } catch (error) {\r\n    console.error('保存缓存失败:', error);\r\n  }\r\n  \r\n  // 清理事件监听器\r\n  window.removeEventListener('resize', handleResize);\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n  \r\n  if (searchInput.value) {\r\n    searchInput.value.removeEventListener('input', debouncedSearch);\r\n  }\r\n  \r\n  if (resultsPreviewRef.value) {\r\n    resultsPreviewRef.value.removeEventListener('scroll', handleResultsScroll);\r\n  }\r\n  \r\n  // 清理图片观察器\r\n  if (window.historyImageObserver) {\r\n    window.historyImageObserver.disconnect();\r\n  }\r\n});\r\n\r\n// 计算当前分页下应该显示的图片\r\nconst paginatedImages = computed(() => {\r\n  if (!currentTask.value || !currentTask.value.images) return []\r\n  \r\n  const start = (dialogPagination.currentPage - 1) * imagesPerPage.value\r\n  const end = start + imagesPerPage.value\r\n  \r\n  return currentTask.value.images.slice(start, end)\r\n})\r\n\r\n// 处理对话框内分页变化\r\nconst handleDialogPageChange = (page) => {\r\n  dialogPagination.currentPage = page\r\n  \r\n  // 在页面变化后，初始化新页面的图片\r\n  setTimeout(() => {\r\n    initDialogImages();\r\n  }, 50);\r\n}\r\n\r\n// 处理对话框内分页大小变化\r\nconst handleDialogSizeChange = (size) => {\r\n  dialogPagination.pageSize = size\r\n  dialogPagination.currentPage = 1 // 重置到第一页\r\n  \r\n  // 在分页大小变化后，初始化新页面的图片\r\n  setTimeout(() => {\r\n    initDialogImages();\r\n  }, 50);\r\n}\r\n\r\n// 获取分页后的原始索引\r\nconst getFullImageIndex = (paginatedIndex) => {\r\n  return (dialogPagination.currentPage - 1) * imagesPerPage.value + paginatedIndex\r\n}\r\n\r\n// 在script部分末尾添加getImageUrl函数\r\n// 处理图片URL，确保能正确加载\r\nconst getImageUrl = (path) => {\r\n  if (!path) return '';\r\n  \r\n  // 如果已经是完整URL，直接返回\r\n  if (path.startsWith('http://') || path.startsWith('https://')) {\r\n    return path;\r\n  }\r\n  \r\n  // 简化处理，直接将路径拼接到/ai后面\r\n  return `/ai${path.startsWith('/') ? path : `/${path}`}`;\r\n}\r\n\r\n// 在组件挂载时加载缓存到LocalStorage\r\nonMounted(() => {\r\n  // 尝试从本地存储恢复缓存\r\n  const savedCache = localStorage.getItem('taskCache');\r\n  if (savedCache) {\r\n    try {\r\n      const parsedCache = JSON.parse(savedCache);\r\n      // 检查缓存是否过期\r\n      if (Date.now() - parsedCache.timestamp < CACHE_TTL) {\r\n        // 从缓存恢复数据\r\n        Object.keys(parsedCache.data).forEach(key => {\r\n          if (key !== 'lastFetchTime') {\r\n            if (key === 'dateRange') {\r\n              taskCache.dateRange = parsedCache.data.dateRange;\r\n            } else {\r\n              taskCache[key] = parsedCache.data[key];\r\n            }\r\n          }\r\n        });\r\n        \r\n        taskCache.lastFetchTime = parsedCache.timestamp;\r\n        console.log('已从本地存储恢复缓存数据');\r\n        \r\n        // 根据当前筛选条件恢复显示\r\n        if (timeFilter.value !== 'all' && taskCache[timeFilter.value].length > 0) {\r\n          allTasks.value = [...taskCache[timeFilter.value]];\r\n        } else if (dateRange.value && dateRange.value.length === 2 && \r\n                  taskCache.dateRange.tasks.length > 0 && \r\n                  areDatesEqual(taskCache.dateRange.range, dateRange.value)) {\r\n          allTasks.value = [...taskCache.dateRange.tasks];\r\n        } else if (taskCache.all.length > 0) {\r\n          allTasks.value = [...taskCache.all];\r\n        }\r\n        \r\n        if (allTasks.value.length > 0) {\r\n          pagination.total = allTasks.value.length;\r\n          // 异步获取最新统计数据\r\n          fetchStatistics();\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('恢复缓存失败:', error);\r\n    }\r\n  }\r\n  \r\n  // 没有有效缓存时，获取历史任务列表\r\n  fetchHistoryTasks();\r\n});\r\n\r\n// 组件卸载前保存缓存到LocalStorage\r\nonBeforeUnmount(() => {\r\n  // 保存缓存到本地存储\r\n  try {\r\n    const cacheToSave = {\r\n      timestamp: taskCache.lastFetchTime,\r\n      data: {\r\n        all: taskCache.all,\r\n        today: taskCache.today,\r\n        '7days': taskCache['7days'],\r\n        dateRange: taskCache.dateRange\r\n      }\r\n    };\r\n    localStorage.setItem('taskCache', JSON.stringify(cacheToSave));\r\n    console.log('缓存数据已保存到本地存储');\r\n  } catch (error) {\r\n    console.error('保存缓存失败:', error);\r\n  }\r\n  \r\n  // 清理其他事件监听器\r\n  window.removeEventListener('resize', handleResize);\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n  \r\n  if (searchInput.value) {\r\n    searchInput.value.removeEventListener('input', debouncedSearch);\r\n  }\r\n});\r\n\r\n// 清理任务名称中的序号后缀\r\nconst cleanTaskName = (name) => {\r\n  if (!name) return \"未命名任务\";\r\n  \r\n  // 移除名称末尾的_x或-x格式的序号（x为数字）\r\n  // 例如：\"测试任务_1\" -> \"测试任务\"，\"风景图-2\" -> \"风景图\"\r\n  let cleanedName = name.replace(/[_-](\\d+)$/, '');\r\n  \r\n  // 移除末尾的(1), (2)等格式的序号\r\n  cleanedName = cleanedName.replace(/\\s*\\(\\d+\\)$/, '');\r\n  \r\n  // 移除末尾可能的空格\r\n  cleanedName = cleanedName.trim();\r\n  \r\n  // 移除副本、copy等常见后缀\r\n  const commonSuffixes = [' 副本', ' copy', ' 拷贝', ' 复制'];\r\n  for (const suffix of commonSuffixes) {\r\n    if (cleanedName.endsWith(suffix)) {\r\n      cleanedName = cleanedName.substring(0, cleanedName.length - suffix.length).trim();\r\n      break;\r\n    }\r\n  }\r\n  \r\n  // 如果清理后名称为空，返回默认名称\r\n  if (!cleanedName) {\r\n    return \"未命名任务\";\r\n  }\r\n  \r\n  // 如果名称过长，截断并添加省略号\r\n  const maxLength = 30; // 最大显示长度\r\n  if (cleanedName.length > maxLength) {\r\n    return cleanedName.substring(0, maxLength) + '...';\r\n  }\r\n  \r\n  return cleanedName;\r\n}\r\n\r\n// 预览区域的ref\r\nconst resultsPreviewRef = ref(null);\r\n\r\n// 记录已加载的图片元素\r\nconst loadedImagesMap = reactive(new Map());\r\n\r\n// 虚拟滚动优化相关状态\r\nconst virtualScrollOptions = reactive({\r\n  enabled: true,    // 是否启用虚拟滚动\r\n  buffer: 5,        // 缓冲区大小\r\n  itemHeight: 280   // 估计的每个任务卡片高度\r\n});\r\n\r\n// 观察图片元素是否进入视口的函数\r\nconst setupImageObserver = () => {\r\n  // 如果浏览器不支持IntersectionObserver，则禁用虚拟滚动\r\n  if (!('IntersectionObserver' in window)) {\r\n    virtualScrollOptions.enabled = false;\r\n    return;\r\n  }\r\n  \r\n  const imageObserver = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        const img = entry.target;\r\n        const taskId = img.dataset.taskId;\r\n        const imageUrl = img.dataset.src;\r\n        \r\n        if (imageUrl && !img.src) {\r\n          img.src = imageUrl;\r\n          img.classList.add('loading');\r\n          \r\n          img.onload = () => {\r\n            img.classList.remove('loading');\r\n            img.classList.add('loaded');\r\n            loadedImagesMap.set(`${taskId}-${imageUrl}`, true);\r\n          };\r\n          \r\n          img.onerror = () => {\r\n            img.classList.remove('loading');\r\n            img.classList.add('error');\r\n            // 移除不存在的图片引用，避免无限循环的404请求\r\n            // img.src = `${API_BASE_URL}/assets/image-error.svg`; // 错误占位图使用API_BASE_URL\r\n            \r\n            // 使用内联样式显示错误状态，而不是加载不存在的图片\r\n            img.src = 'data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2036%2036%22%3E%3Cpath%20fill%3D%22%23d9d9d9%22%20d%3D%22M18%2C2A16%2C16%2C0%2C1%2C0%2C34%2C18%2C16%2C16%2C0%2C0%2C0%2C18%2C2Zm0%2C30A14%2C14%2C0%2C1%2C1%2C32%2C18%2C14%2C14%2C0%2C0%2C1%2C18%2C32Z%22%2F%3E%3Cpath%20fill%3D%22%23d9d9d9%22%20d%3D%22M18%2C9.5a1.5%2C1.5%2C0%2C0%2C0-1.5%2C1.5v10a1.5%2C1.5%2C0%2C0%2C0%2C3%2C0V11A1.5%2C1.5%2C0%2C0%2C0%2C18%2C9.5Z%22%2F%3E%3Cpath%20fill%3D%22%23d9d9d9%22%20d%3D%22M18%2C24.5A1.5%2C1.5%2C0%2C1%2C0%2C19.5%2C26%2C1.5%2C1.5%2C0%2C0%2C0%2C18%2C24.5Z%22%2F%3E%3C%2Fsvg%3E';\r\n          };\r\n        }\r\n        \r\n        // 停止观察已处理的图片\r\n        imageObserver.unobserve(img);\r\n      }\r\n    });\r\n  }, {\r\n    root: null,\r\n    rootMargin: '100px 0px',\r\n    threshold: 0.1\r\n  });\r\n  \r\n  // 绑定到全局以便在其他地方使用\r\n  window.historyImageObserver = imageObserver;\r\n  \r\n  return imageObserver;\r\n}\r\n\r\n// 初始化图片懒加载\r\nconst initLazyLoading = () => {\r\n  const imageObserver = setupImageObserver();\r\n  \r\n  if (!imageObserver) return;\r\n  \r\n  // 获取所有预览图片元素并观察它们\r\n  const imageElements = document.querySelectorAll('.preview-image[data-src]');\r\n  imageElements.forEach(img => {\r\n    imageObserver.observe(img);\r\n  });\r\n}\r\n\r\n// 处理滚动事件的函数\r\nconst handleResultsScroll = debounce(() => {\r\n  if (!resultsPreviewRef.value) return;\r\n  \r\n  // 检测可视区域，加载可见图片\r\n  initLazyLoading();\r\n  \r\n  // 预加载下一批图片\r\n  if (pagination.currentPage < Math.ceil(pagination.total / pagination.pageSize)) {\r\n    const scrollPosition = resultsPreviewRef.value.scrollTop;\r\n    const containerHeight = resultsPreviewRef.value.clientHeight;\r\n    const scrollHeight = resultsPreviewRef.value.scrollHeight;\r\n    \r\n    // 如果滚动到接近底部，预加载下一页数据\r\n    if (scrollPosition + containerHeight > scrollHeight - 300) {\r\n      // 预加载下一页数据但不切换页面\r\n      const nextPage = pagination.currentPage + 1;\r\n      const start = (nextPage - 1) * pagination.pageSize;\r\n      const end = start + pagination.pageSize;\r\n      \r\n      // 确保有足够的数据可加载\r\n      if (end <= allTasks.value.length) {\r\n        const nextPageTasks = allTasks.value.slice(start, end);\r\n        \r\n        // 预加载下一页图片\r\n        nextPageTasks.forEach(task => {\r\n          if (task.images && task.images.length > 0) {\r\n            const img = new Image();\r\n            img.src = getImageUrl(task.images[0].url);\r\n          }\r\n        });\r\n        \r\n        console.log(`预加载第${nextPage}页数据，${nextPageTasks.length}条任务`);\r\n      }\r\n    }\r\n  }\r\n}, 200);\r\n</script>\r\n<style scoped>\r\n@import './css/HistoryTask.scss';\r\n</style>\r\n"],"names":["API_BASE_URL","CACHE_TTL","loading","ref","dataLoading","searchKeyword","dateRange","stats","reactive","allTasks","taskCache","previewVisible","currentTask","currentImage","fullPreviewVisible","pagination","dialogPagination","imagesPerPage","computed","autoAdjustImagesPerPage","width","isTallImage","image","filteredTasks","result","keyword","task","maxPage","start","end","nextPageImages","img","getImageUrl","dateFormatCache","formatDate","date","d","formatted","debounce","fn","delay","timer","debouncedSearch","refreshData","fetchHistoryTasks","ElMessage","canUseCache","cacheType","areDatesEqual","dates1","dates2","i","processBatchTasks","tasks","batchSize","resolve","totalTasks","processedTasks","processedCount","processBatch","startIndex","endIndex","currentBatch","cleanTaskName","processed","forceRefresh","timeFilter","fetchStatistics","params","today","formattedDate","getPastDate","dataLoadingIndicator","response","axios","error","days","page","handleSizeChange","size","handleSearch","handleTimeFilterChange","value","handleDateRangeChange","dates","previewImage","downloadImage","link","fileName","batchDownloadImages","taskId","downloadUrl","showFullImage","index","fullPreviewImage","fullPreviewIndex","handleKeyDown","closeFullPreview","event","prevImage","nextImage","currentPageIndex","handleDialogOpen","updateDialogSize","initDialogImages","setupImageObserver","loadedImagesMap","dialogWidth","vw","vh","columns","gap","availableWidth","cardWidth","handleResize","searchInput","initializePreviewImageControls","clearSearch","onActivated","onMounted","resultsPreviewRef","handleResultsScroll","savedCache","parsedCache","key","initLazyLoading","onBeforeUnmount","cacheToSave","paginatedImages","handleDialogPageChange","handleDialogSizeChange","getFullImageIndex","paginatedIndex","path","name","cleanedName","commonSuffixes","suffix","maxLength","virtualScrollOptions","imageObserver","entries","entry","imageUrl","scrollPosition","containerHeight","scrollHeight","_ctx","_cache","_component_el_input","__unplugin_components_0","_component_el_date_picker","__unplugin_components_1","_component_el_button","_component_el_icon","__unplugin_components_3","_component_el_empty","__unplugin_components_4","_component_el_pagination","__unplugin_components_5","_component_el_dialog","__unplugin_components_6","_directive_loading","__unplugin_directives_0","_openBlock","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_createVNode","$event","_unref","_withKeys"],"mappings":"utEA6RMA,GAAe,UAgDfC,GAAY,GAAK,GAAK,uCA/C5B,MAAWC,EAAWC,EAAE,EAAK,EAC7BC,GAAAD,EAAA,EAAA,EACsBA,EAAI,QAAK,EAI3B,MAAGE,EAAAF,EAAA,EAAA,MACmB,KAAA,KACF,CAClB,CAAA,MAAS,KAAM,MAAO,KAAG,EAC/B,CAAA,MAAA,KAAA,MAAA,OAAA,EACM,CAAC,MAAA,MAAA,MAAA,OAAA,CACP,EAGUG,EAAYH,GAAM,CAAA,IACG,EAAG,EAGlC,MAAAI,EAAAC,EAAA,CACM,YAAI,EACJ,YAAe,EACf,aACN,YAAA,CACK,CAAA,EAGHC,EAAeN,EAAA,CAAA,CAAA,EAEfO,EAAcF,EAAA,CACd,IAAA,CAAA,EACF,MAAA,CAAA,EACM,QAAS,CAAC,EACV,UAAW,CACT,MAAO,CAAE,EACF,MAAA,CAAA,CACR,EACA,cAAK,CACJ,CAAA,EAYWG,EAAOR,EAAK,EAAC,EAChCS,EAAAT,EAAA,IAAA,EACUU,GAACV,EAAA,IAAA,EAGJW,EAAAX,EAAA,EAAA,MAC0B,IAAA,IACJA,EAAA,CAAA,EAGpBY,EAAAP,EAAA,CACH,YACA,cACA,OACN,CAAA,EAGUQ,EAAKR,EAAA,CACb,YAAe,EACf,UAAQ,CAAA,EAAA,GAAA,GAAA,EAAA,EACR,SAAA,EACF,CAAA,EAGES,EAAeC,GAAA,IACJF,EAAgB,QAC3B,EAGQG,GAAU,IAAA,CACd,MAAAC,EAAc,OAAE,WACGA,EAAA,IAEzBJ,EAAA,SAAA,EACiBI,EAAK,KAEdJ,EAAe,SAAW,EACjBI,EAAG,KAEAJ,WAAc,GAGdA,WAAc,EAElC,EAGUK,GAAAC,GAEP,CAAAA,GAAA,CAAAA,EAAA,OAAA,CAAAA,EAAA,OACF,GAKgBA,EAAW,QAAW,OACtB,GAIPC,GAAgBL,GAAE,IAAA,CAEpB,GAAMT,EAAK,MAAE,SAAA,EACpB,OAAAM,EAAA,MAAA,EACD,CAAA,EAGM,IAAIS,EAACf,EAAA,SAGDJ,EAAI,OAAAA,EAAA,MAAA,KAAA,IAAA,GAAA,CACX,MAAAoB,EAAApB,EAAA,MAAA,KAAA,EAAA,YAAA,EACDmB,EAAAA,EAAA,OAAAE,GAEAA,EAAA,UAAAA,EAAA,SAAA,cAAA,SAAAD,CAAA,GAIWC,EAAM,QAAYA,EAAG,OAAE,cAAA,SAAAD,CAAA,EACnB,GAGVC,EAAA,QAAAA,EAAA,OAAA,OAAA,GAAAA,EAAA,OAAA,CAAA,EAAA,OACWA,EAAA,OAAA,CAAA,EAAA,OAAA,YAAA,EAAA,SAAAD,CAAA,EAEH,EACR,CACP,CAGMV,EAAC,MAAAS,EAAA,OAGJ,MAAAG,EAAA,KAAA,IAAA,EAAA,KAAA,KAAAH,EAAA,OAAAT,EAAA,QAAA,CAAA,EACDA,EAAA,YAAAY,IACMZ,EAAG,YAAAY,GAIT,MAAMC,GAAUb,EAAgB,YAAY,GAAOA,EAAa,SAClDc,EAAYD,EAAAb,EAAU,SAGpC,GAAAc,EAAAL,EAAA,OAAA,CACM,MAACM,EAAAN,EAAA,MAAAK,EAAA,KAAA,IAAAA,EAAAd,EAAA,SAAAS,EAAA,MAAA,CAAA,EAED,WAAW,IAAa,CAC9BM,EAAA,QAAAJ,GAAA,CACU,GAAIA,EAAK,QAAAA,EAAA,OAAA,OAAA,EAAA,CACH,MAAOK,EAAC,IAAE,MACJA,EAAA,IAAAC,EAAUN,EAAM,OAAK,CAAI,EAAC,GAAI,CACtD,CACA,CAAc,CACM,EAAA,GAAA,CACpB,CAGM,OAAGF,EAAA,MAAAI,EAAAC,CAAA,CACJ,CAAA,EAGHI,GAAA,IAAA,IACQC,GAAGC,GAAA,CACX,GAAO,CAAAA,EAAO,MAAM,GAGhB,GAAIF,GAAS,IAAAE,CAAA,EACE,OAAAF,GAAU,IAAGE,CAAA,EAGhC,MAAAC,EAAA,IAAA,KAAAD,CAAA,EACOE,EAAA,GAAAD,EAAA,YAAA,CAAA,IAAA,OAAAA,EAAA,SAAA,EAAA,CAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAA,OAAAA,EAAA,QAAA,CAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAA,OAAAA,EAAA,SAAA,CAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAA,OAAAA,EAAA,WAAA,CAAA,EAAA,SAAA,EAAA,GAAA,CAAA,GAGN,OAAAH,GAAA,IAAAE,EAAAE,CAAA,EAESA,CACZ,EAGiBC,GAAI,CAACC,EAAIC,IAAW,CACnC,IAAAC,EAAA,KACA,OAAO,UAAU,CAClBA,GAAA,aAAAA,CAAA,EACDA,EAAA,WAAA,IAAA,CACOF,EAAA,MAAA,KAAA,SAAA,CACP,EAAMC,CAAU,CAChB,CACA,EAGSE,KAAsB,IAAA,CAE5B3B,EAAA,YAAA,CACF,EAAA,GAAA,EAGK4B,GAAkB,SAAY,CAC9BzC,EAAQ,MAAQ,GAEhBQ,EAAU,cAAQ,QACZkC,EAAiB,EAAA,EACvBC,EAAU,QAAQ,OAAA,EACxB3C,EAAA,MAAA,EACA,EAGS4C,EAAAC,YACmB,EAERrC,EAAQ,cAAAT,KACb8C,IAAQ,OAAArC,EAAA,IAAA,OAAA,GACtBqC,IAAA,SAAArC,EAAA,MAAA,OAAA,GACDqC,IAAA,SAAArC,EAAA,OAAA,EAAA,OAAA,GACaqC,IAAA,aAAArC,EAAA,UAAA,MAAA,OAAA,GACPsC,EAAwBtC,EAAM,UAAA,MAAAJ,EAAA,KAAA,GAI1B0C,EAAgB,CAAGC,EAAKC,IACxB,CAACD,GAAU,CAACC,GAAUD,EAAI,SAAeC,EAAO,UAIzDD,EAAA,MAAA,CAAAd,EAAAgB,IAAAhB,IAAAe,EAAAC,CAAA,CAAA,EAIMC,GAA2B,CAAAC,EAAOC,EAAW,SACnC,QAAAC,GAAA,CACd,MAAAC,EAAAH,EAAA,OACDI,EAAA,CAAA,EACM,IAACC,EAAoB,EAGrB,MAAMC,EAAKC,GAAe,CACX,MAAAC,EAAI,KAAK,MAAiBP,EAAKE,CAAA,EACzCM,EAAkBT,EAAE,MAAAO,EAAAC,CAAA,IAGNC,EACvB,IAAApC,MAEoB,SACZA,EAAS,OAAU,CAAC,GAIXA,EAAE,gBAEF,MAAE,QAAAA,EAAA,MAAA,IACRA,EAAW,OAAG,CAAA,GAIDA,EAAA,OAAK,KAAEK,GAAAA,EAAA,KAAAL,EAAA,cAAA,EAAA,GACjBA,EAAc,OAAA,KAAGA,EAAA,aAAA,GAKvB,MAAA,QAAAA,EAAA,MAAA,IACIA,EAAa,OAAC,CAACA,EAAC,MAAS,GAI9BA,EAAA,YAAA,CAAAA,EAAA,aACDA,EAAA,WAAAA,EAAA,YAICA,EAAA,SAAA,CAAAA,EAAA,KACDA,EAAA,GAAAA,EAAA,SAICA,EAAA,WAAAA,EAAA,aAAAA,EAAA,OAAA,OAGOA,EAAC,QAAYA,EAAO,OAAG,OAAA,GACzBA,EAAK,eAAcJ,GAAA,CACxBA,GAAAA,EAAA,KAESU,EAAQV,EAAA,GAAA,CAE5B,CAAU,EAIQI,EAAK,KAEPA,EAAA,SAAiBqC,GAAMrC,EAAA,IAAA,EACxBA,EAAA,SAEJA,EAAA,SAAAqC,GAAArC,EAAA,QAAA,EACDA,EAAA,OAEIA,EAAS,SAAGA,EAAA,SACI,eAAMA,EAAA,cAAA,OAEpBA,EAAK,SAAKA,EAAW,cAAA,OACTA,EAAE,QAAMA,EAAA,OAAA,OAAA,GAAAA,EAAA,OAAA,CAAA,EAAA,OAEpBA,EAAK,SAAWA,EAAG,OAAA,CAAA,EAAA,OAGnBA,EAAK,SAAK,QAGLA,EACR,EAGH+B,EAAe,KAAK,GAACO,CAAA,EACrBN,GAAkBI,EAAQ,OAG1BJ,EAAYF,EAEhB,OAAA,sBAAA,IAAAG,EAAAE,CAAA,CAAA,EAGAN,EAAcE,CAAgB,CAE3B,EAGDE,EAA4B,CAAA,CACpC,CAAO,EAIDf,EAAA,MAAAqB,EAAA,KAAA,CACF,GAAA,IAEgB,MAAA,GAGpB,IAAAlB,EAAA,MAQQ,GAPImB,EAAW,QAAA,MACAnB,EAAAmB,EAAU,MAC1B5D,EAAA,OAAAA,EAAA,MAAA,SAAA,IACGyC,EAAY,aAId,CAAAkB,GAAkBnB,EAAAC,CAAA,EAAA,KACE,YACtBtC,EAAY,MAAW,CAAA,GAAAC,EAAM,UAAA,KAAA,EAE7BD,EAAsB,MAAC,CAAC,GAAAC,EAAAqC,CAAA,CAAA,EAE1BhC,EAAA,MAAAN,EAAA,MAAA,OACMM,EAAO,YAAA,EAGPoD,IAEE/D,GAAE,MAAA,GACE,MAChB,CAGMF,EAAA,MAAA,GAGA,MAAAkE,EAAA,IAAA,gBAMK,KAJE,OAAA,QAAA,KAAA,EACRA,EAAA,OAAA,SAAA,GAAA,EAGOF,EAAQ,QAAK,MAAA,CACrB,MAAAG,EAAA,IAAA,KAGM,GAFAA,EAAG,SAAA,EAAA,EAAA,EAAA,CAAA,EAECH,EAAC,QAAA,QAAA,CACE,MAACI,EAAeD,EAAA,YAAA,EAAA,MAAA,GAAA,EAAA,CAAA,EAChBD,EAAE,OAAO,aAAMG,GAAA,CAAA,CAAA,CAChC,MAAIL,EAAA,QAAA,UACS,IAAA,KAAAG,CAAA,EACY,QAAQA,EAAI,QAAA,EAAA,CAAA,EACzBD,EAAO,OAAK,aAAMG,GAAA,CAAA,CAAA,EAE9B,MAAMjE,EAAA,OAAAA,EAAA,MAAA,SAAA,IAEO8D,EAAc,OAAA,aAAoB9D,EAAC,MAAO,CAAA,CAAC,IACzC,OAAQ,WAAaA,QAAe,CAAA,CAAA,GAI3C,MAAMkE,OAEJ,WAAc,KACRtE,EAAE,SACyB,CAEtC,EAAA,GAAA,CACD,EACIsE,EAAS,EAGX,MAAAC,EAAkB,MAAAC,GAAA,IAAA,GAAA1E,EAAA,YAAAoE,EAAA,SAAA,CAAA,EAAA,EAEhB,GAAEK,EAAW,KAAK,QAEjB,GAAAA,EAAA,KAAA,OAAA,MAAA,QAAAA,EAAA,KAAA,KAAA,EAAA,CAEH,MAAAhB,EAAA,MAAAL,GAAAqB,EAAA,KAAA,KAAA,EAGKP,EAAA,QAAA,MACOxD,EAAQwD,OAAc,EAAYT,EAChDnD,EAAA,OAAAA,EAAA,MAAA,SAAA,EACYI,EAAa,UAAG,CACnB,MAAA,CAAA,GAAAJ,EAAA,KAAA,EACK,MAAKmD,CACR,EAEP/C,EAAA,IAAA+C,kBAI8B,KAAS,IAAC,EAGpChD,EAAqB,MAAAgD,EAGvB1C,EAAa,QAAkB,OAChCA,EAAA,YAAA,EAGQoD,EAAc,CAC/B,MACY1D,EAAK,MAAAgE,EAAA,KAAA,OAAA,CAAA,EACD1D,EAAO,QAAiB,MAAA,YAGhC8B,EAAW,MAAO4B,EAAe,KAAA,OAAQ,UAAA,CAE1C,OAACE,EAAA,CACA,QAAQ,MAAC,YAAAA,CAAA,EACT9B,EAAA,MAAgB,kBAAE,CAC1B,QAAc,CACN3C,EAAQ,MAAQ,GAChBE,GAAgB,MAAG,EAC3B,CACA,EACMmE,GAAgBK,GAAS,CAC1B,MAAAzC,EAAA,IAAA,KACD,OAAAA,EAAO,QAAQA,EAAA,QAAA,EAAAyC,CAAA,EAENzC,EAAA,SAAO,EAAG,EAAG,EAAG,CAAC,EACjBD,GAAAC,CAAA,CACb,EAEGgC,EAAA,SAAA,CACF,GAAA,CACK,MAAAM,EAAmB,MAAMC,GAAA,IAAA,GAAA1E,EAAA,gBAAA,EAExByE,EAAoB,KAAA,UAEpBlE,EAAS,YAAWkE,EAAA,KAAA,MAAA,YACRlE,EAAA,YAAMkE,EAAA,KAAA,MAAA,YACxBlE,EAAA,WAAAkE,EAAA,KAAA,MAAA,WACSlE,EAAM,YAASkE,EAAA,KAAA,MAAA,YAElB,OAAAE,EAAA,CACE,cAAY,YAAeA,CAAI,CACxC,CACA,KAGkCE,GAAK,CACjC9D,EAAM,YAAqB8D,CACjC,EAGIC,GAA0BC,GAAO,CAClChE,EAAA,SAAAgE,EACFhE,EAAA,YAAA,CACD,EAGYiE,GAAa,IAAM,CAAA,EAGrBC,GAAOC,GAAA,CAELA,MAAgB,QAE3BhB,EAAA,MAAAgB,EACDnE,EAAA,YAAA,EAGMT,EAAU,MAAE,CAAA,EAGhBwC,EAAAoC,CAAA,GAEOzE,EAAQ,YAAoByE,CAAO,CAAA,EAC3CnE,EAAA,MAAAN,EAAA,MAAA,QAGKmC,EAAA,EAEN,EAGYuC,GAAuBC,GAAG,CACpCA,GAAAA,EAAA,SAAA,KAEiB,MAAG,MAEd9E,EAAU,MAAA8E,EACZrE,EAAiB,YAAI,EAGvB+B,EAA2B,WAAM,KAAQpC,EAAA,UAAA,MAAA0E,CAAA,GAEnC3E,EAAQ,MAAA,CAAA,GAAAC,EAAA,UAAA,KAAA,EACGK,EAAA,MAAGN,EAAA,MAAA,QAGxBmC,EAAA,GAEMwC,IAEF9E,EAAc,MAAQ,CAAA,EAEZ4D,EAAM,MAAO,QAGZ,KAAc,GACzBzD,EAAA,MAAA,CAAA,GAAAC,EAAA,GAAA,EACMK,EAAC,MAAAN,EAAA,MAAA,QAEDmC,EAAG,EAGb,EAGKyC,GAAA,CAAA/D,EAAAI,IAAA,CAEC,GAAI,CAACJ,GAAE,CAAAA,EAAA,IAAA,CACAuB,UAAW,cAAA,EAChB,MACR,CAGM7B,EAAkB,YAAK,EAGvBH,GAAM,MAAAS,EAGTI,EACFA,EAAA,QAAA,MAAA,QAAAA,EAAA,MAAA,EACDd,EAAA,MAAAc,EAGUd,EAAG,MAAA,CACD,GAAGc,EACX,OAAiB,CAAAJ,CAAK,CAC1B,EAIkBV,SAChB,SAAA,OACQ,OAAO,CAAAU,CAAA,CACjB,EAGMX,EAAO,MAAA,EACb,EAsBU2E,GAAGhE,GAAA,CACP,GAAK,CACE,GAAA,CAAAA,GAAS,CAACA,EAAM,IAAG,CACtBuB,EAAA,MAAA,SAAA,EACP,MACH,CAGQ,QAAY,SAAA,cAAA,GAAA,EACZ0C,EAAK,KAAOvD,EAAYV,KAAS,EAGvC,MAAAkE,EAAAlE,EAAA,IAAA,MAAA,GAAA,EAAA,OAAA,UAAA,IAAA,KAAA,EAAA,QAAA,CAAA,OACWiE,EAAA,SAAaC,EAEzB,SAAA,KAAA,YAAAD,CAAA,EACDA,EAAA,MAAA,EACQ,SAAS,KAAK,YAACA,CAAA,EAEhB1C,EAAA,QAAA,UAAA,CACA,OAAQ8B,EAAI,CACb,QAAU,MAAM,UAAWA,CAAA,IACpB,MAAA,QAAA,CACb,CACA,EAGac,GAAe,SAAW,CACnC,GAAA,CAAA7E,EAAA,OAAA,CAAAA,EAAA,MAAA,QAAAA,EAAA,MAAA,OAAA,SAAA,EAAA,CACIiC,EAAS,QAAA,UAAA,EACb,MACJ,CAEY,GAAA,CAEA,MAAK6C,EAAY9E,EAAM,MAAC,GAChC,GAAA,CAAA8E,EAAA,GACU,QAAc,kBAAM,EACxB,MACV,CAEG7C,EAAA,KAAA,eAAA,EAGK,MAAC8C,EAAA,yBAAAD,CAAA,GAGKH,EAAO,SAAS,cAAI,GAAA,EAC9BA,EAAO,KAAAI,EACRJ,EAAA,OAAA,SACDA,EAAA,SAAA,GAAA3E,EAAA,MAAA,UAAA,OAAA,OACK,SAAA,KAAA,YAAA2E,CAAA,EACCA,EAAK,MAAA,EACT,SAAa,KAAa,YAAMA,GAErB1C,EAAQ,QAAG,WAAW,QACxB8B,EAAA,CACR,QAAA,MAAA,QAAAA,CAAA,EACD9B,EAAA,MAAA,UAAA8B,EAAA,SAAA,OAAA,CACJ,CACI,EAGAiB,GAAA,CAAAtE,EAAAuE,IAAA,CAEK,GAAC,IAAO,CAAAvE,EAAsB,IAAA,CAC/BuB,EAAQ,QAAA,cAAY,EACpB,MACR,CAEIiD,EAAa,MAAAxE,EACLyE,EAAiB,MAAKF,EAC9B/E,EAAA,MAAA,YACU,KAAA,UAAgB,IAAI,WAAC,EAG/B,SAAe,iBAAa,UAAakF,CAAW,CACxD,EAGSC,EAAA,IAAA,CACHnF,EAAiB,SACjB,SAAO,KAAA,UAAA,OAAA,WAAA,EAGT,SAAO,oBAAA,UAAAkF,CAAA,CACX,IAG2BE,GAAM,YAG/B,OAAAA,EAAA,IAAA,CACA,IAAW,YACXC,GAAA,EACQ,MACR,IAAS,aACVC,GAAA,EACD,MACQ,IAAC,SACaH,EAAM,OAE5B,CACA,EAGCE,GAAA,IAAA,CACD,GAAAJ,EAAA,MAAA,EAAA,CACQA,EAAC,QACHD,EAAsB,MAAKlF,EAAC,MAAA,OAAAmF,EAAA,KAAA,EAG1B,QAAc,KAAA,MAAAA,EAAA,MAAA9E,EAAA,KAAA,EACZoF,EAAW,EAAArF,EAAA,cACNA,EAAG,YAAAqF,EAAA,EAElB,CACA,EAGsBD,GAAA,IAAG,CACnB,KAAM,OAAAL,EAAA,MAAAnF,EAAA,MAAA,OAAA,OAAA,EAAA,CACTmF,EAAA,QACFD,EAAA,MAAAlF,EAAA,MAAA,OAAAmF,EAAA,KAAA,EAGc,MAAAM,EAAU,KAAA,MAAAN,EAAA,MAAA9E,EAAA,KAAA,EACHoF,EAAS,EAAIrF,EAAA,cAC/BA,EAAuB,YAAEqF,EAAA,EAE7B,CACA,KAGuB,IAAa,CAC/BJ,EAAA,CACL,EAGQK,GAAA,IAAA,CAEFnF,GAAqB,EAGvBH,EAAA,YAAA,EAGEuF,IAGH,WAAA,IAAA,CACFA,EAAA,EAGsBC,GAAG,CAC1B,EAAE,EAAA,CACF,EAGsBA,GAAO,IAAG,CAa5B,GAXqB5F,EAAA,OAAEA,EAAA,MAAA,QACzBA,EAAA,MAAA,OAAA,QAAAU,GAAA,CACWA,GAAAA,EAAA,KAEXU,EAAAV,EAAA,GAAA,CAEF,CAAkB,EAKd,CADkBmF,GAAA,EAClB,OAGI,SAAA,iBAAA,6CAAA,EACP,QAAA1E,GAAA,CAEO,MAAK2D,EAAA3D,EAAA,QAAA,OACS8D,EAAA9D,EAAI,QAAM,MACpB2D,GAAUG,GAAAjF,EAAA,OAAAA,EAAA,MAAA,OAAAiF,CAAA,GACLa,EAAS,QAAa,IAAA1E,EAAepB,EAAA,MAAA,OAAAiF,CAAA,EAAA,GAAA,CAAA,GAAA,EAAA,CAEtD,CAAM,CACN,EAGOc,GAAAzF,GAAA,IAAA,CACJ,MAAA0F,EAAA,OAAA,WAAA,IACD,MAAA,GAAA,KAAA,IAAAA,EAAA,IAAA,CAAA,IACF,CAAK,EAGHL,EAAA,IAAA,CAEK,MAAaM,EAAA,OAAW,YAAiB,IAEpCD,EAAK,OAAM,WAAA,IACPxF,EAAM,KAAQ,IAAAwF,MAAO,EAE/B,SAAS,gBAAuB,MAAA,YAAqB,qBAAc,IAAM,EACzE,yBAAuB,MAAQ,YAAE,kBAA6B,GAAOC,CAAA,MAG1E,IAAAC,EACD1F,EAAA,IACQ0F,EAAM,EACG1F,EAAG,IACZ0F,EAAW,EACF1F,EAAQ,KACtB0F,EAAA,EAEKA,EAAI,EAIN,MAAMC,EAAM3F,EAAO,IAAA,EAAA,GAGvB4F,EAAA5F,GAAA0F,EAAA,GAAAC,EACwBE,EAAA,KAAM,MAAYD,EAAIF,CAAY,EAGtD,SAAS,gBAAS,MAAA,YAAA,eAAA,GAAAG,CAAA,IAAA,EAClB,SAAQ,gBAAA,MAAA,YAAA,iBAAAH,CAAA,EACR,SAAQ,gBAAM,MAAA,YAAA,aAAA,GAAAC,CAAA,IAAA,CACpB,EAGWG,EAAc,IAAG,CAElBvG,EAAA,OACNQ,GAAmB,IAIE,EAGHR,EAAG,OACjB2F,GAAiB,CAEpB,EAGKa,EAAgBhH,EAAM,IAAA,EAGtBiH,GAAC,IAAA,CAELD,EAAS,MAAA,SAAA,cAAA,8BAAA,EAGZ,OAAA,iBAAA,SAAAD,CAAA,EAGD/F,GAAmB,EAGfoF,EAAe,EAGnB,SAAA,iBAAA,UAAA,GAAA,CAEUzF,EAAA,SACY,CAAI,CAE5B,CAAO,CACF,EAGHuG,GAAA,IAAA,CACIhH,EAAQ,MAAA,GACZU,EAAO,YAAwB,CACjC,EAGEuG,GAAA,IAAA,CAEA3E,GAAA,EAGQ,eAAiB,WAAS,cAAU,CACzC,CAAA,EAGD4E,GAAC,SAAA,CACArH,EAAA,MAAA,GACH,OAAA,iBAAA,SAAAgH,CAAA,EAGIE,GAAqB,EAG1BI,EAAA,OACDA,EAAA,MAAA,iBAAA,SAAAC,EAAA,EAIUN,EAAQ,OACLA,EAAE,MAAA,iBAAA,QAAAzE,CAAA,EAIb,MAAAgF,EAAA,aAAA,QAAA,WAAA,EACF,GAAAA,EACQ,GAAI,CACF,MAAMC,EAAO,KAAA,MAAAD,CAAA,EAEd,GAAA,KAAA,IAAA,EAAkBC,EAAqB,UAAE1H,KAEtC,OAAG,KAAA0H,EAAA,IAAA,EAAA,QAAAC,GAAA,CACbA,IAAA,kBACAA,IAAA,YACWlH,EAAA,UAAAiH,EAAA,KAAA,UAEQjH,EAAOkH,CAAA,EAAAD,OAAwBC,CAAG,EAGvD,CAAa,EAEElH,EAAO,cAAgBiH,EAAU,UAGhCzD,EAAA,QAAA,OAAAxD,EAAAwD,EAAA,KAAA,EAAA,OAAA,EACRzD,EAAyB,MAAA,CAAA,KAAmByD,EAAG,KAAA,CAAA,EACpC5D,EAAA,OAAAA,EAAA,MAAA,SAAA,GACVI,EAAA,UAAA,MAAA,OAAA,GACGsC,EAAwBtC,EAAC,UAAY,MAAAJ,EAAA,KAAA,EACnCG,EAAG,MAAA,CAAA,GAAAC,EAAA,UAAA,KAAA,EACMA,EAAA,IAAY,OAAW,IAChCD,EAAI,MAAA,CAAA,GAAAC,EAAA,GAAA,GAGFD,EAAS,MAAS,OAAI,GAAA,CACxBM,EAAmB,MAAAN,QAAe,OAElC0D,EAAiB,EAGpB,WAAA,IAAA,CACH0D,GAAA,CACA,EAAS,GAAC,EAEV3H,EAAA,MAAA,GACM,MACd,CAES,OAAQyE,GACP,QAAQ,MAAS,UAAUA,EACrC,CAIM,MAAG/B,EAAA,EAGH,WAAI,IAAgB,CAClBiF,GAAe,CAChB,EAAE,GAAC,EAEJ3H,EAAQ,MAAM,EACpB,CAAK,EAGD4H,GAAM,IAAA,CAEJ,GAAI,CACF,MAACC,EAAA,CACF,UAAArH,EAAA,cACI,KAAE,CACA,IAAMA,EAAQ,IACtB,MAAAA,EAAA,MACF,QAAAA,EAAA,OAAA,EACD,UAAAA,EAAA,SACF,CACyB,EACvB,aAAA,QAAA,YAAA,KAAA,UAAAqH,CAAA,CAAA,CACK,OAAKpD,EAAA,SACI,MAAI,UAAAA,CAAA,CACpB,QAGU,oBAAc,SAAAuC,CAAA,EACrB,SAAA,oBAAA,UAAAlB,CAAA,EAEOmB,EAAK,OACfA,EAAoB,MAAG,oBAAA,QAAAzE,CAAA,EAGb8E,EAAe,OACVA,EAAW,MAAC,oBAAc,SAAAC,EAAA,EAIhC,OAAQ,sBACT,OAAA,qBAA8B,WAAA,CAEtC,CAAK,EAGD,MAAMO,GAAS9G,GAAA,IAAA,CACf,GAAA,CAAON,EAAY,OAAM,CAAAA,EAAO,MAAA,OAAA,MAAA,CAAA,EAElC,MAAAgB,GAAAZ,EAAA,YAAA,GAAAC,EAAA,MACUY,EAAAD,EAAAX,EAAA,MAEV,OAASL,EAAA,MAAoB,OAAQ,MAAgBgB,EAAAC,CAAA,CACrD,CAAA,EAGCoG,GAAApD,GAAA,CACD7D,EAAA,YAAA6D,EAGC,WAAA,IAAA,CACD2B,GAAA,CACK,EAAE,EAAE,CACX,EAGG0B,GAAAnD,GAAA,CACH/D,EAAA,SAAA+D,EACM/D,EAAW,YAAA,EAGf,WAAA,IAAA,CACMwF,GAAyB,CAC1B,EAAC,EAAG,CACX,EAGA2B,GAAAC,IACapH,EAAA,YAAA,GAAAC,EAAA,MAAAmH,IAKOC,GACAA,EAGpBA,EAAA,WAAA,SAAA,GAAAA,EAAA,WAAA,UAAA,EACeA,EAIb,MAAAA,EAAA,WAAA,GAAA,EAAAA,EAAA,IAAAA,CAAA,EAAA,GARqB,GAYnBd,GAAK,IAAA,CAET,MAAAG,EAAA,aAAA,QAAA,WAAA,EACM,GAAIA,EACJ,GAAA,CACI,QAAiB,KAAA,MAAcA,CAAK,EAE9C,GAAA,KAAA,IAAA,EAAAC,EAAA,UAAA1H,KAEY,OAAM,KAAA0H,EAAA,IAAA,EAAA,QAAAC,GAAA,CACAA,IAAQ,kBACNA,IAAG,YACrBlH,EAAA,UAAAiH,EAAA,KAAA,UAESjH,EAAiBkH,CAAG,EAAID,EAAM,KAAWC,CAAC,EAGrD,CAAE,EAEWlH,EAAO,cAAkBiH,EAAe,UAG3BzD,EAAA,QAAA,OAAAxD,EAAAwD,EAAA,KAAA,EAAA,OAAA,EACZzD,EAAG,MAAA,CAAA,GAAAC,EAAAwD,EAAA,KAAA,CAAA,EACD5D,EAAA,OAAAA,EAAA,MAAA,SAAA,GACiBI,EAAA,UAAS,MAAU,OAAG,GACpCsC,EAAAtC,EAAA,UAAA,MAAAJ,EAAA,KAAA,EACVG,EAAA,MAAA,CAAA,GAAAC,EAAA,UAAA,KAAA,EACcA,MAAc,OAAA,IACvBD,EAAG,MAAA,CAAA,GAAAC,EAAA,GAAA,GAGED,QAAY,OAAc,GAAA,CAC/BM,EAAsB,MAAAN,EAAI,MAAA,OAE1B0D,EAAmB,EACnB,MACd,CAES,OAAEQ,EAAA,CACD,QAAC,MAAA,UAAAA,CAAA,CACX,CAIM/B,EAAiB,CACvB,CAAK,EAGDkF,GAAuB,IAAA,CAErB,GAAI,CACF,MAAMC,EAAc,CAClB,YAAqB,cACtB,KAAA,CACD,IAAArH,EAAA,IACI,QAAqB,MACvB,QAAWA,EAAQ,OAAS,EAC1B,UAAWA,EAAA,SACvB,CACS,EACD,aAAC,QAAA,YAAA,KAAA,UAAAqH,CAAA,CAAA,CACF,OAAApD,EAAA,CACI,QAAE,MAAQ,UAAAA,CAAA,CACrB,CAGE,OAAA,oBAAA,SAAAuC,CAAA,EACI,SAAS,oBAAM,UAAAlB,CAAA,EAElBmB,EAAA,OACHA,EAAA,MAAA,oBAAA,QAAAzE,CAAA,CAEA,CAAA,EAGI,MAAMqB,GAAeuE,GAAA,CACnB,GAAS,CAAAA,EAAE,MAAA,QAIX,IAAGC,EAAiBD,EAAO,QAAG,aAAA,EAAA,EAG9BC,EAAAA,EAAA,QAAA,cAAA,EAAA,EAGFA,EAAeA,EAAA,KAAA,EAGjB,MAAAC,EAAA,CAAA,MAAA,QAAA,MAAA,KAAA,EACI,UAAQC,KAAAD,EACN,GAACD,EAAA,SAA2BE,CAAG,EAAY,CACzCF,EAACA,EAA4B,UAAgB,EAAAA,EAAE,OAAAE,EAAA,MAAA,EAAA,KAAA,EACvD,KACF,CAIA,GAAA,CAAAF,EACQ,MAAO,QAIT,MAAMG,EAAY,GAClB,OAAIH,EAAY,OAASG,EACzBH,EAAmB,UAAY,EAAGG,CAAS,EAAE,MAGtCH,CACb,EAGEf,EAAArH,EAAA,IAAA,EAGUuG,EAAyBlG,EAAA,IAAG,GAAA,KAG5BA,EAAA,CACP,QAAA,GACF,OAAA,EACD,WAAA,GACF,CAAK,EAGFiG,GAAA,IAAA,CAEG,GAAI,EAAE,yBAAQ,QAAA,CACZkC,GAAqB,QAAI,GAChB,MACjB,CAEE,MAAAC,EAAA,IAAA,qBAAAC,GAAA,CACMA,EAAC,QAAYC,GAAA,CACpB,GAAAA,EAAA,eAAA,CACD,MAAA/G,EAAA+G,EAAA,OACWpD,EAAA3D,EAAA,QAAA,SACkBA,EAAK,QAAE,IAEvBgH,GAAA,CAAAhH,EAAA,MACPA,EAAA,IAAkBgH,EACxBhH,EAAA,UAAA,IAAA,SAAA,EAE0BA,EAAA,OAAC,IAAE,CACbA,EAAI,UAAU,OAAC,SAAA,EACfA,EAAI,UAAQ,IAAA,QAAA,IACI,IAAE,GAAA2D,CAAA,IAAAqD,CAAA,GAAA,EAAA,CAC/B,EAEWhH,EAAI,QAAA,IAAA,CACMA,EAAA,UAAM,OAAI,SAAA,EACrBA,EAAA,UAAA,IAAqB,OAAO,EAKvCA,EAAA,IAAA,snBAKW6G,EAAa,YAC1B,CACA,CAAQ,CACR,GACQ,KAAM,KACN,WAAM,YACN,UAAE,EACV,CAAO,EAGD,cAAM,qBAAuBA,EAEzBA,CACV,EAGUf,GAAkB,IAAK,CAC3B,MAAMe,EAAgBnC,GAAoB,EAE1C,GAAI,CAACmC,EAAe,OAGjB,SAAA,iBAAA,0BAAA,EACD,QAAA7G,GAAA,CACA6G,EAAa,QAAA7G,CAAA,CACrB,CAAO,CACP,EAGU0F,GAAKnF,GAAA,IAAA,CACD,GAAAkF,EAAc,QAG1BK,GAAA,EAGA9G,EAAA,YAAA,KAAA,KAAAA,EAAA,MAAAA,EAAA,QAAA,GAAA,CACM,MAACiI,EAAcxB,EAAA,MAAA,UACtByB,EAAAzB,EAAA,MAAA,aACD0B,EAAA1B,EAAA,MAAA,aAGQ,GAAawB,EAAGC,EAAqBC,EAAA,IAAA,CAG3C,MAAAtH,GADoBb,EAAO,YAAA,EAC3B,GAAAA,EAAA,SACcc,EAAID,EAAAb,EAAA,SAGhBc,GAAqBpB,EAAK,MAAC,QAC1BA,EAAA,MAAA,MAAAmB,EAAAC,CAAA,EAGO,QAAAH,GAAA,CACN,GAAAA,EAAA,QAAsBA,EAAU,OAAM,OAAA,EAAA,CACpB,MAAAK,EAAM,IAAE,MAC9BA,EAAA,IAAAC,EAAAN,EAAA,OAAA,CAAA,EAAA,GAAA,CACF,CACA,CAAE,CAEF,CACA,CACI,EAAA,GAAM,EAEN,MAAkB,CAAAyH,EAAAC,IAAoB,WACtC,MAAAC,EAAAC,GACQC,EAAaC,GACjBC,KACIC,EAAWC,GACXC,EAAsBC,GACtBC,EAAyBC,GACzBC,EAAwBC,GAC9BC,EAAAC,GAEA,OAAQC,EAAY,EAAAC,EAAeC,GAAA,KAAA,CACjCC,EAAoB,MAAUC,GAAY,CAC1CD,EAAA,MAAAE,GAAA,CACIF,EAAO,MAAAG,GAAA,CACXH,EAA0B,MAAKI,GAAA,GACpB,EAAM,IAAQvB,EAAO,EAAA,EAAOmB,EAAO,KAAA,CAAA,MAAA,eAAA,EAAA,OAAA,EAAA,KAClB,MAAAK,GAAA,CACpBxB,EAAM,CAAA,IAAAA,EAAiB,CAAA,EAAAmB,EAAe,MAAA,CAAA,MAAA,cAAA,EAAA,QAAA,EAAA,GAC3CM,EAAAxB,EAAA,CACA,WAAAhJ,EAAA,MACH,sBAAA+I,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA0B,GAAAzK,EAAA,MAAAyK,GACY,YAAO,aACpB,UAAA,GACF,QAAAzD,GACF,QAAA0D,EAAArI,CAAA,EACK,QAAAsI,GAAAhG,GAAA,CAAA,OAAA,CAAA"}