{"version":3,"file":"index-BYMOSpFW.js","sources":["../../node_modules/element-plus/es/components/loading/index.mjs","../../src/pages/BatchCutout/index.vue"],"sourcesContent":["import Loading from './src/service.mjs';\nexport { default as ElLoadingService } from './src/service.mjs';\nimport vLoading from './src/directive.mjs';\nexport { default as ElLoadingDirective, default as vLoading } from './src/directive.mjs';\n\nconst ElLoading = {\n  install(app) {\n    Loading._context = app._context;\n    vLoading._context = app._context;\n    app.directive(\"loading\", vLoading);\n    app.config.globalProperties.$loading = Loading;\n  },\n  directive: vLoading,\n  service: Loading\n};\n\nexport { ElLoading, ElLoading as default };\n//# sourceMappingURL=index.mjs.map\n","<template>\r\n  <div v-loading=\"listLoading\" element-loading-text=\"处理中...\"\r\n    class=\"upload-container pt-[20px] h-full w-full items-start flex-1 display-flex flex-col\">\r\n    <div class=\"flex justify-between items-center w-full mb-5 px-[20px]\">\r\n      <h2 class=\"text-[20px] font-medium text-[#333] flex items-center\">\r\n        <span class=\"mr-3 flex items-center justify-center w-[36px] h-[36px] rounded-[10px] bg-gradient-to-r from-[#9096FF] to-[#85C8FF] text-white\">\r\n          <el-icon class=\"text-[18px]\"><Picture /></el-icon>\r\n        </span>\r\n        图片处理\r\n      </h2>\r\n      <div class=\"statistics\">\r\n        <span class=\"mr-5 text-[14px] text-[#666]\">当前数量: <b class=\"text-[#4080ff]\">{{ statistics.current }}</b></span>\r\n        <span class=\"mr-5 text-[14px] text-[#666]\">今日数量: <b class=\"text-[#4080ff]\">{{ statistics.daily }}</b></span>\r\n        <span class=\"mr-5 text-[14px] text-[#666]\">本周数量: <b class=\"text-[#4080ff]\">{{ statistics.weekly }}</b></span>\r\n        <span class=\"mr-5 text-[14px] text-[#666]\">本月数量: <b class=\"text-[#4080ff]\">{{ statistics.monthly }}</b></span>\r\n        <span class=\"text-[14px] text-[#666]\">总计: <b class=\"text-[#4080ff]\">{{ statistics.total }}</b></span>\r\n      </div>\r\n    </div>\r\n    <el-tabs class=\"tabs-container\">\r\n      <el-tab-pane label=\"批量抠图\">\r\n        <section class=\"controls w-full flex-row flex-1 gap-[10px]\">\r\n          <div class=\"action-buttons px-[15px] py-[10px]\">\r\n            <el-button @click=\"handleBatchCutout\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Crop /></el-icon>\r\n              一键抠图\r\n            </el-button>\r\n            <el-button @click=\"handleBatchDownload\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Download /></el-icon>\r\n              打包下载\r\n            </el-button>\r\n            <el-button @click=\"handleClear\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Delete /></el-icon>\r\n              清空列表\r\n            </el-button>\r\n          </div>\r\n          <div class=\"upload-wall-container\">\r\n            <el-scrollbar>\r\n              <div class=\"upload-wall\">\r\n                <el-upload ref=\"uploadRef\" v-virtual-scroll=\"{ itemSize: 190, buffer: 5 }\" :auto-upload=\"false\"\r\n                  list-type=\"picture-card\" :on-change=\"handleChange\" :on-preview=\"openImageDetail\"\r\n                  :on-remove=\"handleRemove\" :before-remove=\"beforeRemove\" :on-exceed=\"handleExceed\"\r\n                  :file-list=\"uploadFileList\" drag multiple>\r\n                  <template #default>\r\n                    <el-icon>\r\n                      <Plus />\r\n                    </el-icon>\r\n                    <div class=\"el-upload__text\">拖动文件或者<em>点击上传</em></div>\r\n                  </template>\r\n                  <template #file=\"{ file }\">\r\n                    <div class=\"upload-list-item\">\r\n                      <div class=\"image-stack\">\r\n                        <!-- 只有在非original模式且有processed_url时显示处理后的图片 -->\r\n                        <!-- 统一使用 processed_url -->\r\n                        <img :src=\"file.processed_url || file.origin_url || file.url\"\r\n                          class=\"upload-list-item-image original-image\" loading=\"lazy\" :alt=\"file.name\" />\r\n                      </div>\r\n                      <div class=\"upload-list-item-actions\" @click.stop>\r\n                        <span class=\"upload-list-item-preview\" @click=\"openImageDetail(file)\">\r\n                          <el-icon>\r\n                            <ZoomIn />\r\n                          </el-icon>\r\n                        </span>\r\n                        <span class=\"upload-list-item-delete\" @click=\"confirmRemove(file)\">\r\n                          <el-icon>\r\n                            <Delete />\r\n                          </el-icon>\r\n                        </span>\r\n                      </div>\r\n                      <span class=\"upload-list-item-name\">{{ file.name }}</span>\r\n                    </div>\r\n                  </template>\r\n                </el-upload>\r\n              </div>\r\n            </el-scrollbar>\r\n          </div>\r\n        </section>\r\n      </el-tab-pane>\r\n      <el-tab-pane label=\"修改尺寸\">\r\n        <el-form :model=\"resizeForm\" label-width=\"120px\">\r\n          <el-form-item label=\"主体位置\">\r\n            <el-radio-group v-model=\"resizePosition.position\">\r\n              <el-radio value=\"original\">原图位置</el-radio>\r\n              <el-radio value=\"center\">主体居中无边界</el-radio>\r\n              <el-radio value=\"center-padding\">主体居中距边界25px</el-radio>\r\n            </el-radio-group>\r\n          </el-form-item>\r\n          <el-form-item label=\"尺寸选择\">\r\n            <el-radio-group v-model=\"resizeForm.sizeOption\">\r\n              <el-radio value=\"original\">原图尺寸</el-radio>\r\n              <el-radio value=\"custom\">自定义尺寸</el-radio>\r\n            </el-radio-group>\r\n          </el-form-item>\r\n          <el-form-item label=\"宽度\" v-show=\"resizeForm.sizeOption === 'custom'\">\r\n            <el-input-number v-model=\"resizeForm.width\" :min=\"1\" :max=\"10000\"></el-input-number>\r\n          </el-form-item>\r\n          <el-form-item label=\"高度\" v-show=\"resizeForm.sizeOption === 'custom'\">\r\n            <el-input-number v-model=\"resizeForm.height\" :min=\"1\" :max=\"10000\"></el-input-number>\r\n          </el-form-item>\r\n        </el-form>\r\n        <section class=\"controls w-full flex-row flex-1 gap-[10px]\">\r\n          <div class=\"action-buttons px-[15px] py-[10px]\">\r\n            <el-button @click=\"sizeHandleBatchCutout\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><ScaleToOriginal /></el-icon>\r\n              调整尺寸\r\n            </el-button>\r\n            <el-button @click=\"handleBatchDownload\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Download /></el-icon>\r\n              打包下载\r\n            </el-button>\r\n            <el-button @click=\"handleClear\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Delete /></el-icon>\r\n              清空列表\r\n            </el-button>\r\n          </div>\r\n          <div class=\"upload-wall-container\">\r\n            <el-scrollbar>\r\n              <div class=\"upload-wall\">\r\n                <el-upload ref=\"uploadRef\" v-virtual-scroll=\"{ itemSize: 190, buffer: 5 }\" :auto-upload=\"false\"\r\n                  list-type=\"picture-card\" :on-change=\"handleChange\" :on-preview=\"openImageDetail\"\r\n                  :on-remove=\"handleRemove\" :before-remove=\"beforeRemove\" :on-exceed=\"handleExceed\"\r\n                  :file-list=\"uploadFileList\" drag multiple>\r\n                  <template #default>\r\n                    <el-icon>\r\n                      <Plus />\r\n                    </el-icon>\r\n                    <div class=\"el-upload__text\">拖动文件或者<em>点击上传</em></div>\r\n                  </template>\r\n                  <template #file=\"{ file }\">\r\n                    <div class=\"upload-list-item\">\r\n                      <div class=\"image-stack\">\r\n                        <!-- 只有在非original模式且有processed_url时显示处理后的图片 -->\r\n                        <!-- 统一使用 processed_url -->\r\n                        <img :src=\"file.processed_url || file.origin_url || file.url\"\r\n                          class=\"upload-list-item-image original-image\" loading=\"lazy\" :alt=\"file.name\" />\r\n                      </div>\r\n                      <div class=\"upload-list-item-actions\" @click.stop>\r\n                        <span class=\"upload-list-item-preview\" @click=\"openImageDetail(file)\">\r\n                          <el-icon>\r\n                            <ZoomIn />\r\n                          </el-icon>\r\n                        </span>\r\n                        <span class=\"upload-list-item-delete\" @click=\"confirmRemove(file)\">\r\n                          <el-icon>\r\n                            <Delete />\r\n                          </el-icon>\r\n                        </span>\r\n                      </div>\r\n                      <span class=\"upload-list-item-name\">{{ file.name }}</span>\r\n                    </div>\r\n                  </template>\r\n                </el-upload>\r\n              </div>\r\n            </el-scrollbar>\r\n          </div>\r\n        </section>\r\n      </el-tab-pane>\r\n      <el-tab-pane label=\"批量命名\">\r\n        <el-form :model=\"nameForm\" label-width=\"120px\">\r\n          <el-form-item label=\"命名规则\">\r\n            <el-select v-model=\"nameForm.selectedRules\" multiple collapse-tags :max=\"3\" placeholder=\"请选择命名规则（最多选择3个）\"\r\n              style=\"width: 100%\">\r\n              <el-option label=\"原名称\" value=\"original\" />\r\n              <el-option label=\"数字序列\" value=\"sequence\" />\r\n              <el-option label=\"时间戳\" value=\"timestamp\" />\r\n              <el-option label=\"图片尺寸\" value=\"size\" />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <div class=\"preview-name\" v-show=\"nameForm.selectedRules.length > 0\">\r\n              预览：{{ getPreviewName() }}\r\n            </div>\r\n          </el-form-item>\r\n        </el-form>\r\n        <section class=\"controls w-full flex-row flex-1 gap-[10px]\">\r\n          <div class=\"action-buttons px-[15px] py-[10px]\">\r\n            <el-button @click=\"handleBatchRename\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><EditPen /></el-icon>\r\n              批量命名\r\n            </el-button>\r\n            <el-button @click=\"handleBatchDownload\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Download /></el-icon>\r\n              打包下载\r\n            </el-button>\r\n            <el-button @click=\"handleClear\" class=\"primary-button\">\r\n              <el-icon class=\"mr-2\"><Delete /></el-icon>\r\n              清空列表\r\n            </el-button>\r\n          </div>\r\n          <div class=\"upload-wall-container\">\r\n            <el-scrollbar>\r\n              <div class=\"upload-wall\">\r\n                <el-upload ref=\"uploadRef\" v-virtual-scroll=\"{ itemSize: 190, buffer: 5 }\" :auto-upload=\"false\"\r\n                  list-type=\"picture-card\" :on-change=\"handleChange\" :on-preview=\"openImageDetail\"\r\n                  :on-remove=\"handleRemove\" :before-remove=\"beforeRemove\" :on-exceed=\"handleExceed\"\r\n                  :file-list=\"uploadFileList\" drag multiple>\r\n                  <template #default>\r\n                    <el-icon>\r\n                      <Plus />\r\n                    </el-icon>\r\n                    <div class=\"el-upload__text\">拖动文件或者<em>点击上传</em></div>\r\n                  </template>\r\n                  <template #file=\"{ file }\">\r\n                    <div class=\"upload-list-item\">\r\n                      <div class=\"image-stack\">\r\n                        <!-- 只有在非original模式且有processed_url时显示处理后的图片 -->\r\n                        <!-- 统一使用 processed_url -->\r\n                        <img :src=\"file.processed_url || file.origin_url || file.url\"\r\n                          class=\"upload-list-item-image original-image\" loading=\"lazy\" :alt=\"file.name\" />\r\n                      </div>\r\n                      <div class=\"upload-list-item-actions\" @click.stop>\r\n                        <span class=\"upload-list-item-preview\" @click=\"openImageDetail(file)\">\r\n                          <el-icon>\r\n                            <ZoomIn />\r\n                          </el-icon>\r\n                        </span>\r\n                        <span class=\"upload-list-item-delete\" @click=\"confirmRemove(file)\">\r\n                          <el-icon>\r\n                            <Delete />\r\n                          </el-icon>\r\n                        </span>\r\n                      </div>\r\n                      <span class=\"upload-list-item-name\">{{ file.name }}</span>\r\n                    </div>\r\n                  </template>\r\n                </el-upload>\r\n              </div>\r\n            </el-scrollbar>\r\n          </div>\r\n        </section>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n    <el-dialog v-model=\"detailDialogVisible\" title=\"图片详情\" width=\"60%\">\r\n      <Detail :imageUrl=\"selectedImageUrl\" :imageId=\"selectedImageId\" @close=\"closeDialog\" />\r\n    </el-dialog>\r\n    <el-dialog v-model=\"editDialogVisible\" title=\"图片编辑\" width=\"60%\">\r\n      <Edit ref=\"editRef\" :imageId=\"selectedImageId\" :imageList=\"fileList\" @close=\"closeDialog\"\r\n        @changeImage=\"changeEditImage\" />\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted, watch } from 'vue'\r\nimport { ElMessage, ElMessageBox, ElLoading } from 'element-plus'\r\nimport { Plus, ZoomIn, Delete, Picture, Download, EditPen, Crop, ScaleToOriginal } from '@element-plus/icons-vue'\r\nimport Detail from './Detail.vue'\r\nimport Edit from './Edit.vue'\r\nimport { toBase64, base64ToFile, formatToYYYYMMDDHHmmss } from '../../utils/utils'\r\nimport {\r\n  getImageList,\r\n  postImageDelete,\r\n  postResize,\r\n  getImageStatistics,\r\n  postImageRomoveBackground,\r\n  postImageUploads,\r\n  getImageDetail,\r\n  postImageDeleteOne\r\n} from '@service/task'\r\nimport JSZip from 'jszip/dist/jszip.min.js'\r\n\r\ndefineOptions({\r\n  name: 'BatchCutoutIndex'\r\n})\r\n\r\nconst baseUrl = import.meta.env.VITE_API_BASE_URL\r\n\r\n// 添加 resizePosition ref\r\nconst resizePosition = ref({\r\n  position: 'original' // 'original' | 'center' | 'center-padding'\r\n})\r\n\r\n// 添加 loadImage 辅助函数\r\nconst loadImage = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image()\r\n    img.crossOrigin = 'anonymous'  // 处理跨域问题\r\n    img.onload = () => resolve(img)\r\n    img.onerror = reject\r\n    img.src = url\r\n  })\r\n}\r\n\r\n// 添加计算图片边界的函数\r\nconst calculateImageBounds = (maskImage, { padding = 0 } = {}) => {\r\n  // 参数校验\r\n  if (!maskImage) {\r\n    throw new Error('maskImage 参数是必需的');\r\n  }\r\n\r\n  // 确保 padding 是有效的数字且不小于0\r\n  padding = Math.max(0, Number(padding) || 0);\r\n\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  canvas.width = maskImage.width;\r\n  canvas.height = maskImage.height;\r\n\r\n  // 绘制蒙版图片到 canvas\r\n  ctx.drawImage(maskImage, 0, 0);\r\n\r\n  // 获取图片数据\r\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  const data = imageData.data;\r\n\r\n  // 扫描四个方向\r\n  const scanLine = {\r\n    // 从下往上扫描\r\n    bottom: () => {\r\n      for (let y = canvas.height - 1; y >= 0; y--) {\r\n        for (let x = 0; x < canvas.width; x++) {\r\n          const offset = (y * canvas.width + x) * 4;\r\n          if (data[offset + 3] < 240) {\r\n            return y;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    },\r\n    // 从上往下扫描\r\n    top: () => {\r\n      for (let y = 0; y < canvas.height; y++) {\r\n        for (let x = 0; x < canvas.width; x++) {\r\n          const offset = (y * canvas.width + x) * 4;\r\n          if (data[offset + 3] < 240) {\r\n            return y;\r\n          }\r\n        }\r\n      }\r\n      return canvas.height - 1;\r\n    },\r\n    // 从左往右扫描\r\n    left: () => {\r\n      for (let x = 0; x < canvas.width; x++) {\r\n        for (let y = 0; y < canvas.height; y++) {\r\n          const offset = (y * canvas.width + x) * 4;\r\n          if (data[offset + 3] < 240) {\r\n            return x;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    },\r\n    // 从右往左扫描\r\n    right: () => {\r\n      for (let x = canvas.width - 1; x >= 0; x--) {\r\n        for (let y = 0; y < canvas.height; y++) {\r\n          const offset = (y * canvas.width + x) * 4;\r\n          if (data[offset + 3] < 240) {\r\n            return x;\r\n          }\r\n        }\r\n      }\r\n      return canvas.width - 1;\r\n    }\r\n  };\r\n\r\n  // 获取边界值\r\n  const bounds = {\r\n    top: scanLine.top(),\r\n    bottom: scanLine.bottom(),\r\n    left: scanLine.left(),\r\n    right: scanLine.right()\r\n  };\r\n\r\n  // 检查有效性\r\n  const isValidBounds =\r\n    bounds.top <= bounds.bottom &&\r\n    bounds.left <= bounds.right &&\r\n    bounds.top >= 0 &&\r\n    bounds.bottom < canvas.height &&\r\n    bounds.left >= 0 &&\r\n    bounds.right < canvas.width;\r\n\r\n  if (!isValidBounds) {\r\n    console.warn('未找到有效的主体区域，返回完整图片尺寸');\r\n    return {\r\n      x: 0,\r\n      y: 0,\r\n      width: canvas.width,\r\n      height: canvas.height\r\n    };\r\n  }\r\n\r\n  // 计算带有边距的边界框\r\n  const x = Math.max(0, bounds.left - padding);\r\n  const y = Math.max(0, bounds.top - padding);\r\n  const width = Math.min(canvas.width - x, bounds.right - bounds.left + 1 + padding * 2);\r\n  const height = Math.min(canvas.height - y, bounds.bottom - bounds.top + 1 + padding * 2);\r\n\r\n  // 返回结果\r\n  const result = { x, y, width, height };\r\n\r\n  // 调试信息\r\n  console.log('边界框计算结果:', result);\r\n  return result;\r\n};\r\n\r\n\r\n\r\nconst detailDialogVisible = ref(false)\r\nconst editDialogVisible = ref(false)\r\nconst selectedImageUrl = ref('')\r\nconst selectedImageId = ref('')\r\nconst listLoading = ref(false)\r\nconst fileList = ref([])\r\nconst uploadFileList = ref([])\r\nconst uploadRef = ref(null)\r\nconst editRef = ref(null)\r\n\r\nconst openImageDetail = (item) => {\r\n  selectedImageUrl.value = item.url\r\n  selectedImageId.value = item.id || ''\r\n  if (!item.id) {\r\n    detailDialogVisible.value = true\r\n  } else if (item.status === 'success') {\r\n    editDialogVisible.value = true\r\n  }\r\n}\r\n\r\n\r\n\r\nconst closeDialog = () => {\r\n  detailDialogVisible.value = false\r\n  editDialogVisible.value = false\r\n  editRef.value?.closeEditor() // 触发 Edit 组件的 closeEditor 方法，清空按钮状态\r\n}\r\n\r\nconst handleChange = async (file, uploadFiles) => {\r\n  if (file.size > 10 * 1024 * 1024) {\r\n    ElMessage.error('文件大小不能超过10M')\r\n    const index = uploadFiles.findIndex(item => item.uid === file.uid)\r\n    if (index !== -1) {\r\n      uploadFiles.splice(index, 1)\r\n    }\r\n    return\r\n  }\r\n\r\n  // 先计算文件名\r\n  const truncatedName = file.name.length > 20\r\n    ? file.name.slice(0, 20) + '...'\r\n    : file.name\r\n\r\n  // 保存原始文件名\r\n  file.original_name = file.name\r\n  file.name = truncatedName\r\n  file.truncated_name = truncatedName\r\n\r\n  // 更新上传列表\r\n  uploadFileList.value = uploadFiles\r\n\r\n  // 处理新文件\r\n  if (file) {\r\n    try {\r\n      if (file.id) {\r\n        // 如果文件已有id，说明是已处理过的文件，直接使用现有数据\r\n        const existingFile = uploadFileList.value.find(item => item.id === file.id)\r\n        if (existingFile) {\r\n          fileList.value = fileList.value.filter(item => item.uid !== file.uid)\r\n          fileList.value.push({\r\n            ...existingFile,\r\n            uid: file.uid\r\n          })\r\n        }\r\n      } else {\r\n        // 处理新上传的文件\r\n        const base64Data = await toBase64(file)\r\n        const newItem = {\r\n          url: base64Data,\r\n          selectedImageId: '',\r\n          name: truncatedName,\r\n          original_name: file.original_name,\r\n          truncated_name: truncatedName,\r\n          uid: file.uid,\r\n          status: 'ready'\r\n        }\r\n\r\n        // 直接更新 fileList\r\n        if (!fileList.value.some(item => item.uid === file.uid)) {\r\n          fileList.value = [...fileList.value, newItem]\r\n        }\r\n      }\r\n      console.log('handleChange - 更新后的 fileList:', fileList.value)\r\n      console.log('handleChange - 更新后的 uploadFileList:', uploadFileList.value)\r\n    } catch (error) {\r\n      console.error('文件处理失败:', error)\r\n      ElMessage.error('文件处理失败，请重试')\r\n    }\r\n  }\r\n}\r\n\r\nconst changeEditImage = (newImageId) => {\r\n  selectedImageId.value = newImageId\r\n  // 如果需要，这里可以添加其他逻辑，比如重新加载图片详情\r\n}\r\n\r\nconst handleExceed = (files, uploadFiles) => {\r\n  console.log(files, uploadFiles, '--files, uploadFiles-->>')\r\n}\r\n\r\nconst handleBatchDownload = async () => {\r\n  try {\r\n    if (uploadFileList.value.length === 0) {\r\n      ElMessage.warning('没有可下载的图片')\r\n      return\r\n    }\r\n\r\n    // 创建一个新的JSZip实例\r\n    const zip = new JSZip()\r\n\r\n    // 分离已处理和未处理的图片\r\n    const processedImages = uploadFileList.value.filter(item => item.id)\r\n    const unprocessedImages = uploadFileList.value.filter(item => !item.id)\r\n\r\n    // 显示加载提示\r\n    const loading = ElLoading.service({\r\n      lock: true,\r\n      text: '正在准备下载...',\r\n      background: 'rgba(0, 0, 0, 0.7)'\r\n    })\r\n\r\n    try {\r\n      // 处理已处理的图片（从后端获取）\r\n      if (processedImages.length > 0) {\r\n        const ids = processedImages.map(item => item.id)\r\n        // 构建namesMap参数\r\n        const namesMap = {}\r\n        processedImages.forEach(item => {\r\n          namesMap[item.id] = item.name.includes('.') ? \r\n            item.name.substring(0, item.name.lastIndexOf('.')) : \r\n            item.name\r\n        })\r\n        const namesMapStr = encodeURIComponent(JSON.stringify(namesMap))\r\n        const padding = getPaddingByPosition(resizePosition.value.position);\r\n        const response = await fetch(`${baseUrl}/api/image/batch/download?${ids.map(id => `ids=${id}`).join('&')}&padding=${padding}&namesMap=${namesMapStr}`)\r\n        if (!response.ok) throw new Error('下载处理后的图片失败')\r\n\r\n        const processedZip = await response.blob()\r\n        const processedZipContent = await JSZip.loadAsync(processedZip)\r\n\r\n        // 将处理后的图片添加到主zip中\r\n        for (const [filename, file] of Object.entries(processedZipContent.files)) {\r\n          if (!file.dir) {\r\n            const content = await file.async('blob')\r\n            const matchingImage = processedImages.find(img =>\r\n              (img.original_name || img.name).toLowerCase() === filename.toLowerCase()\r\n            )\r\n            const finalName = matchingImage ? (matchingImage.original_name || matchingImage.name) : filename\r\n            zip.file(finalName, content)\r\n          }\r\n        }\r\n      }\r\n\r\n      // 处理未处理的图片（直接从前端获取）\r\n      for (const image of unprocessedImages) {\r\n        const imageUrl = image.url\r\n        const fileName = image.original_name || image.name\r\n\r\n        let imageBlob\r\n        if (imageUrl.startsWith('data:')) {\r\n          // 如果是base64数据\r\n          const base64Data = imageUrl.split(',')[1]\r\n          imageBlob = await fetch(`data:image/png;base64,${base64Data}`).then(res => res.blob())\r\n        } else {\r\n          // 如果是URL\r\n          imageBlob = await fetch(imageUrl).then(res => res.blob())\r\n        }\r\n\r\n        zip.file(fileName, imageBlob)\r\n      }\r\n\r\n      // 生成zip文件\r\n      const content = await zip.generateAsync({\r\n        type: 'blob',\r\n        compression: 'DEFLATE',\r\n        compressionOptions: {\r\n          level: 6\r\n        }\r\n      })\r\n\r\n      // 创建下载链接\r\n      const url = URL.createObjectURL(content)\r\n      const link = document.createElement('a')\r\n      link.href = url\r\n      link.download = `images_${formatToYYYYMMDDHHmmss(new Date())}.zip`\r\n      document.body.appendChild(link)\r\n      link.click()\r\n      document.body.removeChild(link)\r\n      URL.revokeObjectURL(url)\r\n\r\n      ElMessage.success('文件打包下载成功')\r\n    } finally {\r\n      loading.close()\r\n    }\r\n  } catch (error) {\r\n    console.error('下载失败:', error)\r\n    ElMessage.error('下载失败，请重试')\r\n  }\r\n}\r\n\r\nconst handleClear = async () => {\r\n  try {\r\n    await postImageDelete()\r\n    fileList.value = []\r\n    uploadFileList.value = []\r\n    uploadIdMap.value.clear()\r\n    localStorage.removeItem('uploadIdMap') // 清除存储的映射关系\r\n    if (uploadRef.value) {\r\n      uploadRef.value.clearFiles()  // 清空上传组件的文件列表\r\n    }\r\n    ElMessage.success('清空成功')\r\n    getImageListFunc()\r\n    console.log('清空后的 fileList:', fileList.value)\r\n  } catch (error) {\r\n    console.error('清空失败:', error)\r\n    ElMessage.error('清空失败，请重试')\r\n  }\r\n}\r\n\r\nconst pollingTimer = ref(null)\r\n\r\nconst uploadIdMap = ref(new Map())  // 保存 uid 到 id 的映射\r\nconst resultMap = ref(new Map())    // 保存 id 到处理结果的映射\r\n\r\nconst saveToLocalStorage = () => {\r\n  localStorage.setItem('uploadIdMap', JSON.stringify(Array.from(uploadIdMap.value.entries())))\r\n}\r\n\r\nconst loadFromLocalStorage = () => {\r\n  const savedMap = localStorage.getItem('uploadIdMap')\r\n  if (savedMap) {\r\n    uploadIdMap.value = new Map(JSON.parse(savedMap))\r\n  }\r\n}\r\n\r\n// 同步 uploadIdMap 与服务器数据\r\nconst syncUploadIdMapWithServer = (serverList) => {\r\n  if (!serverList || serverList.length === 0) {\r\n    // 如果服务器数据为空，清空本地存储\r\n    uploadIdMap.value.clear()\r\n    saveToLocalStorage()\r\n    return\r\n  }\r\n\r\n  // 获取服务器端所有图片ID集合\r\n  const serverImageIds = new Set(serverList.map(item => item.id))\r\n\r\n  // 遍历 uploadIdMap，删除在服务器端不存在的映射\r\n  const entriesToDelete = []\r\n  for (const [uid, id] of uploadIdMap.value.entries()) {\r\n    if (!serverImageIds.has(id)) {\r\n      entriesToDelete.push(uid)\r\n      console.log(`发现需要删除的映射: uid=${uid}, id=${id}`)\r\n    }\r\n  }\r\n\r\n  // 删除不存在的映射\r\n  if (entriesToDelete.length > 0) {\r\n    entriesToDelete.forEach(uid => {\r\n      uploadIdMap.value.delete(uid)\r\n    })\r\n    // 保存更新后的映射关系到 localStorage\r\n    saveToLocalStorage()\r\n    console.log('已同步 uploadIdMap 与服务器数据')\r\n  }\r\n}\r\n\r\nconst getImageListFunc = async () => {\r\n  try {\r\n    const {\r\n      code,\r\n      data: { list }\r\n    } = await getImageList()\r\n    console.log('getImageListFunc - 服务器返回的数据:', list)\r\n    if (code === 0) {\r\n      // 先清空resultMap，确保只包含服务器返回的最新数据\r\n      // 先尝试从 localStorage 加载映射关系\r\n      loadFromLocalStorage()\r\n      // 同步 uploadIdMap 与服务器数据\r\n      syncUploadIdMapWithServer(list)\r\n\r\n      // 如果没有需要处理的图片，停止轮询\r\n      if (uploadIdMap.value.size === 0) {\r\n        console.log('没有需要处理的图片，停止轮询')\r\n        stopPolling()\r\n        listLoading.value = false\r\n        return\r\n      }\r\n\r\n      // 更新处理结果映射,{id:response}\r\n      list.forEach(item => {\r\n        if (item.id) {\r\n          resultMap.value.set(item.id, {\r\n            id: item.id,\r\n            origin_url: `${baseUrl}${item.file_url}`,\r\n            name: item.file_name || '未命名',\r\n            status: item.status,\r\n            update_time: item.update_time,\r\n            create_time: item.create_time,\r\n            size_x: item.size_x,\r\n            size_y: item.size_y,\r\n            original_name: item.file_name,\r\n            truncated_name: item.file_name.length > 20 ? item.file_name.slice(0, 20) + '...' : item.file_name\r\n          })\r\n        }\r\n      })\r\n      // 检查是否所有图片都处理完成\r\n      const allComplete = Array.from(uploadIdMap.value.values()).every(id =>\r\n        resultMap.value.has(id) && resultMap.value.get(id).status === 'success'\r\n      )\r\n      if (!allComplete) {\r\n        console.log('再次轮询')\r\n      }\r\n\r\n      if (allComplete) {\r\n        updateDisplayLists()\r\n        // 在轮询结束后，如果有处理成功的图片，则加载蒙版\r\n        loadMaskImages()\r\n        stopPolling()\r\n        listLoading.value = false\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('获取图片列表失败:', error)\r\n    ElMessage.error(error.message || '获取图片列表失败，请重试')\r\n  }\r\n}\r\n\r\n// 刷新页面时调用\r\nconst initializeDisplayLists = () => {\r\n  const resultArray = Array.from(resultMap.value.values())\r\n  fileList.value = resultArray.map(result => {\r\n    return {\r\n      id: result.id,\r\n      origin_url: result.origin_url,\r\n      name: result.name,\r\n      status: result.status,\r\n      update_time: result.update_time,\r\n      create_time: result.create_time,\r\n      original_name: result.original_name,\r\n      size_x: result.size_x,\r\n      size_y: result.size_y,\r\n      truncated_name: result.truncated_name\r\n    }\r\n  })\r\n\r\n  // 构建uploadFileList\r\n  uploadFileList.value = fileList.value.map(item => {\r\n\r\n    // 从uploadIdMap中反查uid\r\n    let foundUid = null\r\n    // 找到所有映射到当前id的uid\r\n    const matchingUids = Array.from(uploadIdMap.value.entries())\r\n      .filter(([, mappedId]) => mappedId === item.id)\r\n      .map(([uid]) => uid)\r\n\r\n    // 遍历所有匹配的uid,找到第一个未被使用的，兼容多个uid对应同一个id的情况\r\n    for (const uid of matchingUids) {\r\n      if (!uploadFileList.value.some(file => file.uid === uid)) {\r\n        foundUid = uid\r\n        break\r\n      }\r\n    }\r\n\r\n    // @TODO 如果没找到可用的uid,那么创建一个uid\r\n    const finalUid = foundUid || null\r\n    return {\r\n      name: item.name,\r\n      // url,  根据fileList都是上传后的文件，后续处理使用image_id即可，这里不保存，也无法记录本地url\r\n      origin_url: item.origin_url,\r\n      status: item.status,\r\n      id: item.id,\r\n      uid: finalUid,\r\n      original_name: item.original_name,\r\n      truncated_name: item.truncated_name,\r\n      update_time: item.update_time,\r\n      create_time: item.create_time,\r\n      size_x: item.size_x,\r\n      size_y: item.size_y\r\n    }\r\n  })\r\n}\r\n\r\n// 更新已存在的显示列表\r\nconst updateExistingDisplayLists = () => {\r\n  // 更新 fileList,兼容一键处理时，个别文件失败的情况\r\n  fileList.value = fileList.value.map(item => {\r\n    const id = uploadIdMap.value.get(item.uid)\r\n    const result = id ? resultMap.value.get(id) : null\r\n\r\n    //这里通过resultMap，uploadIdMap，首次构建fileList，注意name后续使用接口返回的名称\r\n    if (result) {\r\n      return {\r\n        ...item,\r\n        id: id,\r\n        uid: item.uid,\r\n        origin_url: result.origin_url,\r\n        name: result.name,\r\n        status: result.status,\r\n        update_time: result.update_time,\r\n        create_time: result.create_time,\r\n        original_name: result.original_name,\r\n        size_x: result.size_x,\r\n        size_y: result.size_y,\r\n        truncated_name: result.truncated_name\r\n      }\r\n    }\r\n    return item\r\n  })\r\n\r\n  // 基于uploadIdMap和resultMap，更新uploadFileList，兼容个别文件处理失败的情况\r\n  uploadFileList.value = uploadFileList.value.map(item => {\r\n    const id = uploadIdMap.value.get(item.uid)\r\n    const result = id ? resultMap.value.get(id) : null\r\n\r\n    return result ? {\r\n      ...item,\r\n      id: result.id,\r\n      uid: item.uid,\r\n      origin_url: result.origin_url,\r\n      name: result.name,\r\n      status: result.status,\r\n      update_time: result.update_time,\r\n      create_time: result.create_time,\r\n      original_name: result.original_name,\r\n      size_x: result.size_x,\r\n      size_y: result.size_y,\r\n      truncated_name: result.truncated_name\r\n    } : {\r\n      ...item,\r\n      status: 'error'\r\n    }\r\n  })\r\n}\r\n\r\n// 统一的更新入口\r\nconst updateDisplayLists = () => {\r\n  //如果fileList为空，那么使用resultMap构建fileList和uploadFileList，因为刷新页面所有数据会被清空\r\n  if (fileList.value.length === 0 && resultMap.value.size > 0) {\r\n    initializeDisplayLists()\r\n  } else {\r\n    updateExistingDisplayLists()\r\n  }\r\n  // 更新统计数据\r\n  statistics.value.current = fileList.value.length\r\n}\r\n\r\n\r\nconst startPolling = () => {\r\n  if (pollingTimer.value) return // 防止重复启动轮询\r\n  pollingTimer.value = setInterval(async () => {\r\n    await getImageListFunc()\r\n  }, 2000) // 每2秒调用一次\r\n  listLoading.value = true // 启动轮询时开始加载\r\n}\r\n\r\nconst stopPolling = () => {\r\n  if (pollingTimer.value) {\r\n    clearInterval(pollingTimer.value)\r\n    pollingTimer.value = null\r\n  }\r\n}\r\n\r\nconst resizeForm = ref({\r\n  sizeOption: 'original',\r\n  width: 100,\r\n  height: 100,\r\n  position: 'original'\r\n})\r\n\r\nconst statistics = ref({\r\n  current: 0,\r\n  daily: 0,\r\n  weekly: 0,\r\n  monthly: 0,\r\n  total: 0\r\n})\r\n\r\nconst fetchStatistics = async () => {\r\n  try {\r\n    const response = await getImageStatistics()\r\n    if (response.code === 0) {\r\n      statistics.value = response.data\r\n    } else {\r\n      throw new Error(response.message || '获取统计数据失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取统计数失败:', error)\r\n    ElMessage.error(error.message || '获取统计数据失败，请重试')\r\n  }\r\n}\r\n\r\n\r\nconst sizeHandleBatchCutout = async () => {\r\n  listLoading.value = true // 开始 loading\r\n  try {\r\n    const files = fileList.value\r\n\r\n    if (files.length === 0) {\r\n      ElMessage.warning('没有图片需要处理')\r\n      listLoading.value = false\r\n      return\r\n    }\r\n    if (files.length >= 100) {\r\n      ElMessage.error('一次最多只能处理100张图片')\r\n      listLoading.value = false\r\n      return\r\n    }\r\n\r\n    // 遍历uploadFileList，并行处理所有图片\r\n    const uploadPromises = files.map(async (item) => {\r\n      try {\r\n        if (!item.id) {\r\n          //1. 上传图片\r\n          //2. 调用postResize接口,如果需要裁剪\r\n          //3. 调用postImageRomoveBackground接口,如果需要删除背景\r\n          //4. 调用postImageRomoveBackground接口,如果需要删除背景\r\n          const formData = new FormData()\r\n          const file = base64ToFile(item.url, item.original_name || item.name)\r\n          if (!file) {\r\n            console.error(`文件 ${item.original_name || item.name} 格式错误，跳过处理`)\r\n            return null\r\n          }\r\n          formData.append('files', file)\r\n\r\n          //上传失败弹窗报错\r\n          const res = await postImageUploads(formData)\r\n          if (res.code !== 0) {\r\n            console.error(`图片 ${item.original_name || item.name} 上传失败:`, res)\r\n            ElMessage.error(res.message || '上传失败，请重试')\r\n            return null\r\n          }\r\n\r\n          // 校验返回数据的完整性\r\n          if (!res.data || !Array.isArray(res.data.list) || res.data.list.length === 0) {\r\n            console.error(`图片 ${item.original_name || item.name} 上传返回数据异常:`, res)\r\n            ElMessage.error('上传返回数据异常，请重试')\r\n            return null\r\n          }\r\n\r\n\r\n          const uploadedItem = res.data.list[0]\r\n          uploadIdMap.value.set(item.uid, uploadedItem.id)\r\n          saveToLocalStorage()\r\n\r\n          // 只调用修改尺寸的接口\r\n          if (resizeForm.value.sizeOption !== 'original') {\r\n            const { width, height } = resizeForm.value\r\n            await postResize({\r\n              image_ids: [uploadedItem.id],\r\n              width,\r\n              height\r\n            })\r\n          }\r\n\r\n          await postImageRomoveBackground({\r\n            image_ids: [uploadedItem.id]\r\n          })\r\n          return uploadedItem.id\r\n        } else {\r\n          const { width, height } = resizeForm.value\r\n          await postResize({\r\n            image_ids: [item.id],\r\n            width,\r\n            height\r\n          })\r\n          return item.id\r\n        }\r\n      } catch (error) {\r\n        console.error(`图片 ${item.original_name || item.name} 处理失败:`, error)\r\n        return null\r\n      }\r\n    })\r\n\r\n    // 等待所有图片处理完成\r\n    const results = await Promise.all(uploadPromises)\r\n    const successCount = results.filter(id => id !== null).length\r\n\r\n    if (successCount > 0) {\r\n      // 开始轮询检查处理状态\r\n      startPolling()\r\n    } else {\r\n      ElMessage.error('所有图片处理失败')\r\n      listLoading.value = false\r\n    }\r\n  } catch (error) {\r\n    console.error('批量处理失败:', error)\r\n    ElMessage.error(error.message || '批量处理失败，请重试')\r\n    listLoading.value = false\r\n  }\r\n}\r\n\r\nconst handleBatchCutout = async () => {\r\n  listLoading.value = true // 开始 loading，全页面加载状态\r\n  try {\r\n    const files = fileList.value\r\n\r\n    if (files.length === 0) {\r\n      ElMessage.warning('没有图片需要处理')\r\n      listLoading.value = false\r\n      return\r\n    }\r\n    if (files.length >= 100) {\r\n      ElMessage.error('一次最多只能处理100张图片')\r\n      listLoading.value = false\r\n      return\r\n    }\r\nconsole.log('files0000',files)\r\n    // 并行处理所有图片\r\n    const uploadPromises = files.map(async (item) => {\r\n      try {\r\n        if (!item.id) {\r\n          // 处理新上传的图片\r\n          const formData = new FormData()\r\n          const file = base64ToFile(item.url, item.original_name || item.name)\r\n          if (!file) {\r\n            console.error(`文件 ${item.original_name || item.name} 格式错误，跳过处理`)\r\n            return null\r\n          }\r\n          formData.append('files', file)\r\n\r\n          const res = await postImageUploads(formData)\r\n          if (res.code === 0 && res.data.list[0]) {\r\n            const uploadedItem = res.data.list[0]\r\n            uploadIdMap.value.set(item.uid, uploadedItem.id)\r\n            saveToLocalStorage()\r\n\r\n            await postImageRomoveBackground({\r\n              image_ids: [uploadedItem.id]\r\n            })\r\n\r\n            return uploadedItem.id\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`图片 ${item.original_name || item.name} 处理失败:`, error)\r\n        return null\r\n      }\r\n    })\r\n\r\n    // 等待所有图片处理完成\r\n    const results = await Promise.all(uploadPromises)\r\n    const successCount = results.filter(id => id !== null).length\r\n\r\n    if (successCount > 0) {\r\n      // 开始轮询检查处理状态\r\n      startPolling()\r\n    } else {\r\n      ElMessage.error('所有图片处理失败')\r\n      listLoading.value = false\r\n    }\r\n  } catch (error) {\r\n    console.error('批量处理失败:', error)\r\n    ElMessage.error(error.message || '批量处理失败，请重试')\r\n    listLoading.value = false\r\n  }\r\n}\r\n\r\nconst loadMaskImages = async () => {\r\n  try {\r\n    // 分别处理成功和未成功的图片\r\n    const successImages = fileList.value.filter(item => item.id && item.status === 'success')\r\n    const nonSuccessImages = fileList.value.filter(item => item.id && item.status !== 'success')\r\n    // 处理成功的图片\r\n    const updatedSuccessImages = await Promise.all(\r\n      successImages.map(async (item) => {\r\n        try {\r\n          const { data } = await getImageDetail(item.id)\r\n          console.log('getImageDetail接口返回', data)\r\n          return {\r\n            ...item,\r\n            mask_url: `${baseUrl}${data.mask.file_url}`,    // 蒙版URL\r\n            origin_url: `${baseUrl}${data.origin.file_url}`, // 原图URL\r\n            size_x: data.origin.size_x,\r\n            size_y: data.origin.size_y\r\n          }\r\n        } catch (error) {\r\n          console.error(`获取图片 ${item.id} 的详情失败:`, error)\r\n          return item\r\n        }\r\n      })\r\n    )\r\n\r\n    // 处理未成功的图片\r\n    const updatedNonSuccessImages = nonSuccessImages.map(item => ({\r\n      ...item,\r\n      // 未成功的图片没有蒙版\r\n      url: item.url,    // 未成功的使用原本的本地url即可\r\n      origin_url: item.origin_url // origin_url与url保持一致\r\n    }))  // 合并所有处理后的图片\r\n    const allUpdatedImages = [...updatedSuccessImages, ...updatedNonSuccessImages]\r\n\r\n    // 统一更新显示\r\n    fileList.value = fileList.value.map(item => {\r\n      const updatedImage = allUpdatedImages.find(updated => updated.id === item.id)\r\n      return updatedImage || item\r\n    })\r\n\r\n    uploadFileList.value = uploadFileList.value.map(item => {\r\n      // 通过uid从uploadIdMap获取对应的id\r\n      const id = uploadIdMap.value.get(item.uid)\r\n      // 从fileList中找到对应id的数据\r\n      const fileItem = fileList.value.find(file => file.id === id)\r\n      return {\r\n        ...item,\r\n        // 如果找到对应数据则使用其mask_url和origin_url,否则默认该图片处理失败，mask_url为null\r\n        mask_url: fileItem ? fileItem.mask_url : null,\r\n        origin_url: fileItem ? fileItem.origin_url : item.origin_url\r\n      }\r\n    })\r\n    // 调整图片位置\r\n    console.log(\"loadMaskImages开始：fileList.value\", fileList.value)\r\n    await adjustImagePosition(uploadFileList.value)\r\n\r\n    // 更新fileList中的processed_url\r\n    fileList.value = fileList.value.map(item => {\r\n      const uploadFile = uploadFileList.value.find(file => {\r\n        const id = uploadIdMap.value.get(file.uid)\r\n        return id === item.id\r\n      })\r\n      return {\r\n        ...item,\r\n        processed_url: uploadFile?.processed_url || null\r\n      }\r\n    })\r\n\r\n\r\n    console.log(\"loadMaskImages结束：fileList.value\", fileList.value)\r\n    console.log(\"loadMaskImages结束：uploadFileList.value\", uploadFileList.value)\r\n    console.log(\"loadMaskImages结束：resultMap.value\", resultMap.value)\r\n    console.log(\"loadMaskImages结束：uploadIdMap.value\", uploadIdMap.value)\r\n  } catch (error) {\r\n    console.error('加载蒙版图片失败:', error)\r\n    ElMessage.error('加载蒙版图片失败，请重试')\r\n  }\r\n}\r\n\r\n/**\r\n * 合并原图和蒙版\r\n * @param {HTMLImageElement} originalImage - 原图\r\n * @param {HTMLImageElement} maskImage - 蒙版\r\n * @returns {HTMLCanvasElement} 合并后的画布\r\n */\r\n const mergeMaskAndOriginal = (originalImage, maskImage) => {\r\n  const { canvas: tempCanvas, ctx: tempCtx } = createCanvas(originalImage.width, originalImage.height);\r\n  tempCtx.drawImage(originalImage, 0, 0);\r\n  tempCtx.globalCompositeOperation = 'normal';\r\n  tempCtx.drawImage(maskImage, 0, 0);\r\n  return tempCanvas;\r\n};\r\n\r\n/**\r\n * 处理原始模式\r\n * @param {CanvasRenderingContext2D} ctx - 画布上下文\r\n * @param {HTMLCanvasElement} mergedImage - 合并后的图像\r\n */\r\nconst handleOriginalMode = (ctx, mergedImage) => {\r\n  ctx.drawImage(mergedImage, 0, 0, 148, 148);\r\n};\r\n\r\n/**\r\n * 处理居中模式\r\n * @param {CanvasRenderingContext2D} ctx - 画布上下文\r\n * @param {HTMLCanvasElement} mergedImage - 合并后的图像\r\n * @param {HTMLImageElement} maskImage - 蒙版图像\r\n * @param {string} position - 位置模式\r\n */\r\n const handleCenterMode = (ctx, mergedImage, maskImage, position) => {\r\n  let bounds, scale, offsetX, offsetY;\r\n  \r\n  switch (position) {\r\n    case 'center': {\r\n      bounds = calculateImageBounds(maskImage, { padding: 0 });\r\n      // 计算主体区域的缩放比例\r\n      scale = Math.min(148 / bounds.width, 148 / bounds.height);\r\n      // 计算居中偏移\r\n      offsetX = (148 - bounds.width * scale) / 2;\r\n      offsetY = (148 - bounds.height * scale) / 2;\r\n      break;\r\n    }\r\n    case 'center-padding': {\r\n      bounds = calculateImageBounds(maskImage, { padding: 25 });\r\n      // 计算主体区域的缩放比例\r\n      scale = Math.min(148 / bounds.width, 148 / bounds.height);\r\n      // 计算居中偏移\r\n      offsetX = (148 - bounds.width * scale) / 2;\r\n      offsetY = (148 - bounds.height * scale) / 2;\r\n      break;\r\n    }\r\n  }\r\n\r\n  ctx.save();\r\n  ctx.translate(offsetX, offsetY);\r\n  ctx.scale(scale, scale);\r\n  ctx.drawImage(\r\n    mergedImage,\r\n    bounds.x, bounds.y, bounds.width, bounds.height,\r\n    0, 0, bounds.width, bounds.height\r\n  );\r\n  ctx.restore();\r\n};\r\n\r\n/**\r\n * 处理单个图片\r\n * @param {Object} image - 图片对象\r\n */\r\nconst processImage = async (image) => {\r\n  if (!image.mask_url || image.status !== 'success') return;\r\n\r\n  try {\r\n    // 1. 并行加载图片\r\n    const [originalImage, maskImage] = await Promise.all([\r\n      loadImage(image.origin_url),\r\n      loadImage(image.mask_url)\r\n    ]);\r\n\r\n    // 2. 创建主画布\r\n    const { canvas, ctx } = createCanvas(148, 148);\r\n\r\n    // 3. 合并原图和蒙版\r\n    const mergedImage = mergeMaskAndOriginal(originalImage, maskImage);\r\n\r\n    // 4. 根据模式处理图片\r\n    if (resizePosition.value.position === 'original') {\r\n      handleOriginalMode(ctx, mergedImage);\r\n    } else {\r\n      handleCenterMode(ctx, mergedImage, maskImage, resizePosition.value.position);\r\n    }\r\n\r\n    // 5. 生成处理后的URL\r\n    image.processed_url = canvas.toDataURL('image/png');\r\n  } catch (error) {\r\n    console.error('处理图片失败:', error);\r\n    ElMessage.error(`处理图片 ${image.name} 失败`);\r\n  }\r\n};\r\n\r\n/**\r\n * 主函数：调整图片位置\r\n * @param {Array} fileList - 文件列表\r\n */\r\nasync function adjustImagePosition(fileList) {\r\n  // 并行处理所有图片\r\n  await Promise.all(fileList.map(processImage));\r\n  \r\n  // 更新显示列表\r\n  uploadFileList.value = [...uploadFileList.value];\r\n}\r\n\r\n/**\r\n * 创建画布\r\n * @returns {Object} 包含画布和上下文的对象\r\n */\r\nconst createCanvas = (width, height) => {\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, ctx };\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst handleRemove = async (file) => {\r\n  try {\r\n    // 如果文件有id，说明是已经上传到服务器的文件，需要调用删除接口\r\n    let deleteId = file.id\r\n    if (deleteId) {\r\n      const { code } = await postImageDeleteOne(deleteId)\r\n      if (code !== 0) {\r\n        throw new Error('删除失败')\r\n      }\r\n\r\n      // 从resultMap中删除\r\n      resultMap.value.delete(deleteId)\r\n\r\n      // 找到并删除uploadIdMap中所有映射到这个id的uid\r\n      for (const [uid, id] of uploadIdMap.value.entries()) {\r\n        if (id === deleteId) {\r\n          uploadIdMap.value.delete(uid)\r\n        }\r\n      }\r\n\r\n      // 更新localStorage\r\n      saveToLocalStorage()\r\n    }\r\n\r\n    // 使用 uid 进行匹配删除\r\n    fileList.value = fileList.value.filter(item => item.uid !== file.uid)\r\n    uploadFileList.value = uploadFileList.value.filter(item => item.uid !== file.uid)\r\n\r\n    // 更新统计数据\r\n    statistics.value.current = fileList.value.length\r\n\r\n  } catch (error) {\r\n    console.error('删除文件失败:', error)\r\n    ElMessage.error('删除文件失败，请重试')\r\n  }\r\n}\r\n\r\nconst beforeRemove = (file) => {\r\n  const fileName = file.original_name || file.name  // 使用原始文件名，如果没有则使用当前文件名\r\n  return ElMessageBox.confirm(`确定移除 ${fileName}？`)\r\n}\r\n\r\n// 添加虚拟滚动指令\r\nconst vVirtualScroll = {\r\n  mounted(el, binding) {\r\n    const { itemSize = 190, buffer = 5 } = binding.value || {}\r\n    const container = el.parentElement\r\n    let startIndex = 0\r\n    let endIndex = 0\r\n    let lastScrollTop = 0\r\n\r\n    const updateVisibleItems = () => {\r\n      const scrollTop = container.scrollTop\r\n      const containerHeight = container.clientHeight\r\n\r\n      // 计算可见区域的起始和结束索引\r\n      startIndex = Math.floor(scrollTop / itemSize)\r\n      endIndex = Math.ceil((scrollTop + containerHeight) / itemSize)\r\n\r\n      // 添加缓冲区\r\n      startIndex = Math.max(0, startIndex - buffer)\r\n      endIndex = endIndex + buffer\r\n\r\n      // 更新元素可见性\r\n      const items = el.querySelectorAll('.el-upload-list__item')\r\n      items.forEach((item, index) => {\r\n        if (index >= startIndex && index <= endIndex) {\r\n          item.style.display = ''\r\n        } else {\r\n          item.style.display = 'none'\r\n        }\r\n      })\r\n    }\r\n\r\n    container.addEventListener('scroll', () => {\r\n      if (Math.abs(container.scrollTop - lastScrollTop) > itemSize / 2) {\r\n        requestAnimationFrame(updateVisibleItems)\r\n        lastScrollTop = container.scrollTop\r\n      }\r\n    })\r\n\r\n    // 初始更新\r\n    updateVisibleItems()\r\n  }\r\n}\r\n\r\n// 添加新的确认删除函数\r\nconst confirmRemove = async (file) => {\r\n  try {\r\n    await beforeRemove(file)  // 等待确认对话框的结果\r\n    handleRemove(file)        // 用户确认后删除文件\r\n  } catch {\r\n    // 用户取消删除，不做任何操作\r\n  }\r\n}\r\n\r\nconst nameForm = ref({\r\n  selectedRules: []\r\n})\r\n\r\nconst getPreviewName = () => {\r\n  if (nameForm.value.selectedRules.length === 0) return ''\r\n\r\n  const parts = []\r\n  nameForm.value.selectedRules.forEach(rule => {\r\n    switch (rule) {\r\n      case 'original':\r\n        parts.push('example')\r\n        break\r\n      case 'sequence':\r\n        parts.push('001')\r\n        break\r\n      case 'timestamp':\r\n        parts.push(formatToYYYYMMDDHHmmss(new Date()))\r\n        break\r\n      case 'size':\r\n        parts.push('800_800')\r\n        break\r\n    }\r\n  })\r\n\r\n  const fullName = parts.join('_') + '.png'\r\n  return fullName\r\n}\r\n\r\nconst handleBatchRename = async () => {\r\n  if (nameForm.value.selectedRules.length === 0) {\r\n    ElMessage.warning('请至少选择一个命名规则')\r\n    return\r\n  }\r\n\r\n  try {\r\n    let sequence = 1\r\n    const timestamp = Date.now()\r\n\r\n    // 创建一个新的数组来存储更新后的文件\r\n    const updatedFiles = fileList.value.map((item, index) => {\r\n      const parts = []\r\n      nameForm.value.selectedRules.forEach(rule => {\r\n        switch (rule) {\r\n          case 'original':\r\n            parts.push(item.original_name?.split('.')[0] || 'untitled')\r\n            break\r\n          case 'sequence':\r\n            parts.push(String(sequence).padStart(3, '0'))\r\n            break\r\n          case 'timestamp': {\r\n            // 使用块级作用域来声明变量\r\n            const time = new Date(timestamp + index * 1000)\r\n            parts.push(formatToYYYYMMDDHHmmss(time))\r\n            break\r\n          }\r\n          case 'size':\r\n            parts.push(`${item.size_x || 0}_${item.size_y || 0}`)\r\n            break\r\n        }\r\n      })\r\n\r\n      sequence++\r\n      const newName = parts.join('_') + '.png'\r\n      const truncatedName = newName.length > 20 ? newName.slice(0, 20) + '...' : newName\r\n\r\n      // 返回一个新的对象，而不是修改原对象\r\n      return {\r\n        ...item,\r\n        name: truncatedName,\r\n        truncated_name: truncatedName\r\n      }\r\n    })\r\n\r\n    // 更新 fileList\r\n    fileList.value = updatedFiles\r\n\r\n    // 更新 uploadFileList，使用新的名称\r\n    uploadFileList.value = uploadFileList.value.map(item => {\r\n      const updatedFile = updatedFiles.find(f => f.uid === item.uid)\r\n      if (updatedFile) {\r\n        return {\r\n          ...item,\r\n          name: updatedFile.name,\r\n          truncated_name: updatedFile.truncated_name\r\n        }\r\n      }\r\n      return item\r\n    })\r\n\r\n    ElMessage.success('批量重命名成功')\r\n  } catch (error) {\r\n    console.error('批量重命名失败:', error)\r\n    ElMessage.error('批量重命名失败，请重试')\r\n  }\r\n}\r\n\r\n/**\r\n * 根据位置模式获取padding值\r\n * @param {string} position - 位置模式 ('original' | 'center' | 'center-padding')\r\n * @returns {number} padding值 (center: 0, center-padding: 25, 其他: -1)\r\n */\r\n const getPaddingByPosition = (position) => {\r\n  switch (position) {\r\n    case 'center':\r\n      return 0;\r\n    case 'center-padding':\r\n      return 25;\r\n    default:\r\n      return -1;\r\n  }\r\n}\r\n\r\n\r\n\r\nonMounted(async () => {\r\n  const {\r\n    code,\r\n    data: { list }\r\n  } = await getImageList()\r\n  console.log('onMounted getImageList接口返回', list)\r\n  if (code === 0) {\r\n    // 加载并同步 uploadIdMap\r\n    loadFromLocalStorage()\r\n    syncUploadIdMapWithServer(list)\r\n\r\n    if (uploadIdMap.value.size === 0) {\r\n      console.log('没有需要处理的图片，停止轮询')\r\n      stopPolling()\r\n      return\r\n    }\r\n\r\n    listLoading.value = true\r\n    // 更新处理结果映射\r\n    list.forEach(item => {\r\n      if (item.id) {\r\n        resultMap.value.set(item.id, {\r\n          id: item.id,\r\n          original_url: item.file_url,\r\n          name: item.file_name || '未命名',\r\n          original_name: item.file_name || '未命名',\r\n          truncated_name: item.file_name.length > 20 ? item.file_name.slice(0, 20) + '...' : item.file_name,\r\n          status: item.status,\r\n          file_url: item.file_url,\r\n          update_time: item.update_time,\r\n          create_time: item.create_time,\r\n          size_x: item.size_x,\r\n          size_y: item.size_y\r\n        })\r\n      }\r\n    })\r\n\r\n    // 检查是否所有图片都处理完成\r\n    const allComplete = Array.from(uploadIdMap.value.values()).every(id =>\r\n      resultMap.value.has(id) && resultMap.value.get(id).status === 'success'\r\n    )\r\n\r\n    if (!allComplete) {\r\n      // 如果有未完成的图片\r\n      // 根据 resultMap 和 uploadIdMap 直接构建 uploadFileList，用于回显\r\n      const resultArray = Array.from(resultMap.value.values())\r\n      uploadFileList.value = resultArray.map(result => {\r\n        // 从 uploadIdMap 中反查 uid\r\n        let foundUid = null\r\n        // 找到所有映射到当前 id 的 uid\r\n        const matchingUids = Array.from(uploadIdMap.value.entries())\r\n          .filter(([, mappedId]) => mappedId === result.id)\r\n          .map(([uid]) => uid)\r\n\r\n        // 遍历所有匹配的 uid，找到第一个未被使用的\r\n        for (const uid of matchingUids) {\r\n          if (!uploadFileList.value.some(file => file.uid === uid)) {\r\n            foundUid = uid\r\n            break\r\n          }\r\n        }\r\n\r\n        // 如果没找到可用的 uid，跳过该数据\r\n        if (!foundUid) {\r\n          return null\r\n        }\r\n        return {\r\n          name: result.name,\r\n          url: result.url,\r\n          status: result.status,\r\n          id: result.id,\r\n          uid: foundUid,\r\n          original_name: result.original_name,\r\n          truncated_name: result.truncated_name,\r\n          size_x: result.size_x,\r\n          size_y: result.size_y,\r\n          update_time: result.update_time,\r\n          create_time: result.create_time\r\n        }\r\n      })\r\n      // 然后加载蒙版图片\r\n      loadMaskImages()\r\n      startPolling()\r\n    } else {\r\n      updateDisplayLists()\r\n      loadMaskImages()\r\n      listLoading.value = false\r\n    }\r\n    await fetchStatistics()\r\n  }\r\n})\r\n\r\nonUnmounted(() => {\r\n  stopPolling() // 清除轮询定时器，防止内存泄漏\r\n})\r\n\r\n// 监听 fileList 的变化以更新当前数量\r\nwatch(fileList, (newList) => {\r\n  statistics.value.current = newList.length\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n:root {\r\n  --primary-purple: #4080ff;\r\n  --primary-blue: #40b0ff;\r\n  --primary-gradient: linear-gradient(90deg, #4080ff, #40b0ff);\r\n  --button-gradient: linear-gradient(90deg, #3366ff, #3399ff);\r\n  --text-dark: #333333;\r\n  --text-light: #666666;\r\n  --background-light: #f8f9ff;\r\n  --border-color: #e0e6ff;\r\n  --shadow-color: rgba(102, 153, 255, 0.1);\r\n}\r\n\r\n.upload-container {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--background-light);\r\n}\r\n\r\n.statistics {\r\n  background-color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 3px 10px rgba(64, 128, 255, 0.1);\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  b {\r\n    font-weight: 600;\r\n    font-size: 15px;\r\n  }\r\n}\r\n\r\n.tabs-container {\r\n  min-width: 95%;\r\n  padding: 0 20px;\r\n  \r\n  :deep(.el-tabs__header) {\r\n    margin-bottom: 20px;\r\n    border-bottom: none;\r\n  }\r\n  \r\n  :deep(.el-tabs__item) {\r\n    font-size: 15px;\r\n    color: var(--text-light);\r\n    height: 40px;\r\n    line-height: 40px;\r\n    padding: 0 20px;\r\n    \r\n    &.is-active {\r\n      color: var(--primary-purple);\r\n      font-weight: 500;\r\n    }\r\n\r\n    &:hover {\r\n      color: var(--primary-purple);\r\n    }\r\n  }\r\n  \r\n  :deep(.el-tabs__active-bar) {\r\n    background: var(--primary-gradient);\r\n    height: 3px;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  :deep(.el-tabs__nav-wrap::after) {\r\n    height: 1px;\r\n    background-color: #e4e7ed;\r\n    opacity: 0.8;\r\n  }\r\n}\r\n\r\n.resize-form, .name-form {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 25px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 3px 15px 0 var(--shadow-color);\r\n  \r\n  :deep(.el-form-item__label) {\r\n    color: var(--text-dark);\r\n  }\r\n  \r\n  :deep(.el-radio__input.is-checked .el-radio__inner) {\r\n    background: var(--primary-gradient);\r\n    border-color: var(--primary-purple);\r\n  }\r\n  \r\n  :deep(.el-radio__input.is-checked + .el-radio__label) {\r\n    color: var(--primary-purple);\r\n  }\r\n  \r\n  :deep(.el-input-number__increase:hover),\r\n  :deep(.el-input-number__decrease:hover) {\r\n    color: var(--primary-purple);\r\n  }\r\n  \r\n  :deep(.el-select .el-input__wrapper.is-focus) {\r\n    box-shadow: 0 0 0 1px var(--primary-purple) inset;\r\n  }\r\n\r\n  :deep(.el-form-item) {\r\n    margin-bottom: 18px;\r\n  }\r\n\r\n  :deep(.el-radio) {\r\n    margin-right: 16px;\r\n  }\r\n\r\n  :deep(.el-input-number) {\r\n    .el-input__wrapper {\r\n      box-shadow: 0 0 0 1px #dcdfe6 inset;\r\n      &:hover {\r\n        box-shadow: 0 0 0 1px var(--primary-purple) inset;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.preview-name {\r\n  background: #f0f5ff;\r\n  padding: 12px 15px;\r\n  border-radius: 8px;\r\n  color: var(--text-dark);\r\n  font-size: 14px;\r\n  border-left: 3px solid var(--primary-purple);\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 12px;\r\n  margin-bottom: 15px;\r\n  padding: 15px 20px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  \r\n  .primary-button {\r\n    background: linear-gradient(135deg, rgb(144, 150, 255), rgb(133, 200, 255));\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 4px 12px rgba(116, 189, 255, 0.3);\r\n    color: white;\r\n    border-radius: 6px;\r\n    height: 40px;\r\n    width: 150px;\r\n    // &::before {\r\n    //   content: '';\r\n    //   position: absolute;\r\n    //   inset: 0;\r\n    //   background: linear-gradient(180deg, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0));\r\n    //   border-radius: 6px;\r\n    //   z-index: -1;\r\n    // }\r\n    \r\n    // &:hover {\r\n    //   opacity: 1;\r\n    //   transform: translateY(-2px);\r\n    //   box-shadow: 0 8px 20px rgba(64, 128, 255, 0.7), inset 0 1px 1px rgba(255, 255, 255, 0.4), 0 0 0 3px rgba(64, 128, 255, 0.3);\r\n    //   background: linear-gradient(90deg, #2a5ae6, #2a8ae6);\r\n    // }\r\n    \r\n    // &:active {\r\n    //   transform: translateY(0);\r\n    //   box-shadow: 0 3px 10px rgba(64, 128, 255, 0.5), inset 0 1px 3px rgba(0, 0, 0, 0.2), 0 0 0 2px rgba(64, 128, 255, 0.2);\r\n    //   background: linear-gradient(90deg, #2354db, #2380db);\r\n    // }\r\n\r\n    .el-icon {\r\n      filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));\r\n      font-size: 20px;\r\n    }\r\n    \r\n    // .mr-2 {\r\n    //   margin-right: 10px;\r\n    // }\r\n  }\r\n  .disabled-button{\r\n\r\n  }\r\n}\r\n\r\n// 添加媒体查询，在较小屏幕上调整按钮样式\r\n@media screen and (max-width: 768px) {\r\n  .action-buttons {\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    \r\n    .primary-button {\r\n      min-width: 140px;\r\n    }\r\n  }\r\n}\r\n\r\n.upload-wall-container {\r\n  max-height: calc(100vh - 280px);\r\n  overflow-y: auto;\r\n  padding: 0 15px;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 16px rgba(64, 128, 255, 0.12);\r\n  margin: 0 15px;\r\n  position: relative;\r\n\r\n  // 添加渐变边框效果\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: -1px;\r\n    left: -1px;\r\n    right: -1px;\r\n    bottom: -1px;\r\n    background: linear-gradient(135deg, #769ce9, #56b0f0);\r\n    z-index: -1;\r\n    border-radius: 17px;\r\n    opacity: 0.4;\r\n    pointer-events: none;\r\n  }\r\n\r\n  // 优化滚动性能\r\n  -webkit-overflow-scrolling: touch;\r\n  will-change: transform;\r\n\r\n  // 美化滚动条样式\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: #f5f7fa;\r\n  }\r\n}\r\n\r\n.upload-wall {\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n\r\n  :deep(.el-upload) {\r\n    order: -1;\r\n  }\r\n\r\n  :deep(.el-upload--picture-card) {\r\n    width: 190px;\r\n    height: 190px;\r\n    line-height: normal;\r\n    overflow: hidden;\r\n    border-radius: 16px;\r\n    border: 2px dashed #4080ff;\r\n    background-color: rgba(230, 240, 255, 0.5);\r\n    transition: all 0.3s;\r\n    box-shadow: 0 4px 12px rgba(64, 128, 255, 0.08);\r\n    position: relative;\r\n    \r\n    &:hover {\r\n      border-color: #3366ff;\r\n      transform: translateY(-3px);\r\n      background-color: rgba(230, 240, 255, 0.9);\r\n      box-shadow: 0 8px 20px rgba(51, 102, 255, 0.15);\r\n    }\r\n\r\n    .el-upload-dragger {\r\n      width: 100%;\r\n      height: 100%;\r\n      padding: 0;\r\n      border: none;\r\n      background-color: transparent;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n    }\r\n\r\n    .el-icon {\r\n      font-size: 42px;\r\n      color: #4080ff;\r\n      margin-bottom: 15px;\r\n      filter: drop-shadow(0 2px 5px rgba(64, 128, 255, 0.3));\r\n    }\r\n\r\n    .el-upload__text {\r\n      font-size: 16px;\r\n      color: #666;\r\n      line-height: 1.5;\r\n      text-align: center;\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      right: 0;\r\n      padding: 10px;\r\n      background: #f8faff;\r\n      border-top: 1px solid #9eabf3;\r\n      \r\n      em {\r\n        color: #5e74f3;\r\n        font-weight: bold;\r\n        font-style: normal;\r\n      }\r\n    }\r\n  }\r\n\r\n  :deep(.el-upload-list--picture-card) {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 12px;\r\n\r\n    .el-upload-list__item {\r\n      width: 150px;\r\n      height: 180px;\r\n      position: relative;\r\n      overflow: hidden;\r\n      border-radius: 12px;\r\n      border: none;\r\n      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);\r\n      transition: all 0.3s;\r\n      \r\n      &:hover {\r\n        transform: translateY(-2px);\r\n        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);\r\n      }\r\n\r\n      transform: translateZ(0);\r\n      will-change: transform;\r\n\r\n      .upload-list-item {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n\r\n        .upload-list-item-actions {\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: calc(100% - 30px);\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          gap: 16px;\r\n          background-color: rgba(0, 0, 0, 0.5);\r\n          opacity: 0;\r\n          transition: opacity 0.3s;\r\n          cursor: default;\r\n          border-radius: 12px 12px 0 0;\r\n\r\n          .el-icon {\r\n            color: #fff;\r\n            font-size: 20px;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n              transform: scale(1.1);\r\n            }\r\n          }\r\n        }\r\n\r\n        &:hover {\r\n          .upload-list-item-actions {\r\n            opacity: 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      .upload-list-item-image {\r\n        width: 100%;\r\n        height: calc(100% - 30px);\r\n        object-fit: cover;\r\n        border-radius: 12px 12px 0 0;\r\n\r\n        backface-visibility: hidden;\r\n        -webkit-backface-visibility: hidden;\r\n      }\r\n\r\n      .upload-list-item-name {\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        height: 30px;\r\n        line-height: 30px;\r\n        text-align: center;\r\n        background-color: #fff;\r\n        color: #606266;\r\n        font-size: 12px;\r\n        padding: 0 5px;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        border-radius: 0 0 12px 12px;\r\n      }\r\n\r\n      .el-upload-list__item-actions {\r\n        top: 0;\r\n        height: calc(100% - 30px);\r\n      }\r\n    }\r\n  }\r\n}\r\n//     background: linear-gradient(135deg, rgba(128, 135, 255, 0.15), rgba(116, 189, 255, 0.15), rgba(124, 239, 203, 0.15));\r\n.image-stack {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .upload-list-item-image {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n\r\n  .original-image {\r\n    z-index: 1;\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.upload-list-item {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .upload-list-item-actions {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: calc(100% - 30px);\r\n    z-index: 3;\r\n  }\r\n\r\n  .upload-list-item-name {\r\n    height: 30px;\r\n    margin-top: auto;\r\n  }\r\n}\r\n\r\n// :deep(.rounded-dialog) {\r\n//   .el-dialog__header {\r\n//     border-bottom: 1px solid #f0f0f0;\r\n//     padding: 15px 20px;\r\n//     background: linear-gradient(to right, rgba(102, 153, 255, 0.05), rgba(102, 204, 255, 0.05));\r\n//   }\r\n  \r\n//   .el-dialog__body {\r\n//     padding: 20px;\r\n//   }\r\n  \r\n//   .el-dialog__headerbtn {\r\n//     top: 15px;\r\n    \r\n//     .el-dialog__close {\r\n//       color: var(--primary-purple);\r\n//     }\r\n//   }\r\n  \r\n//   .el-dialog {\r\n//     border-radius: 12px;\r\n//     overflow: hidden;\r\n//     box-shadow: 0 4px 20px rgba(102, 153, 255, 0.15);\r\n//   }\r\n// }\r\n</style>\r\n"],"names":["ElLoading","app","Loading","vLoading","baseUrl","resizePosition","ref","loadImage","url","resolve","reject","img","calculateImageBounds","maskImage","padding","canvas","ctx","data","scanLine","y","x","offset","bounds","width","height","detailDialogVisible","editDialogVisible","selectedImageUrl","selectedImageId","listLoading","fileList","uploadFileList","uploadRef","editRef","openImageDetail","item","closeDialog","_a","handleChange","file","uploadFiles","ElMessage","index","truncatedName","existingFile","newItem","toBase64","error","changeEditImage","newImageId","handleExceed","files","handleBatchDownload","zip","JSZip","processedImages","unprocessedImages","loading","ids","namesMap","namesMapStr","response","id","processedZip","processedZipContent","filename","content2","matchingImage","finalName","image","imageUrl","fileName","imageBlob","base64Data","res","content","link","formatToYYYYMMDDHHmmss","uploadIdMap","getImageListFunc","pollingTimer","loadFromLocalStorage","savedMap","syncUploadIdMapWithServer","serverList","saveToLocalStorage","serverImageIds","entriesToDelete","uid","code","list","getImageList","resultMap","allComplete","updateDisplayLists","loadMaskImages","stopPolling","initializeDisplayLists","resultArray","result","mappedId","matchingUids","finalUid","updateExistingDisplayLists","statistics","startPolling","resizeForm","getImageStatistics","sizeHandleBatchCutout","uploadPromises","postResize","formData","base64ToFile","postImageUploads","uploadedItem","postImageRomoveBackground","handleBatchCutout","successImages","nonSuccessImages","updatedSuccessImages","getImageDetail","updatedNonSuccessImages","allUpdatedImages","updated","fileItem","adjustImagePosition","uploadFile","mergeMaskAndOriginal","originalImage","tempCanvas","tempCtx","createCanvas","handleOriginalMode","mergedImage","handleCenterMode","position","scale","offsetX","offsetY","processImage","fileList2","handleRemove","deleteId","postImageDeleteOne","beforeRemove","ElMessageBox","vVirtualScroll","el","buffer","binding","container","startIndex","endIndex","lastScrollTop","updateVisibleItems","scrollTop","containerHeight","itemSize","confirmRemove","nameForm","parts","rule","handleBatchRename","sequence","timestamp","updatedFiles","time","newName","updatedFile","f","getPaddingByPosition","onMounted","foundUid","fetchStatistics","onUnmounted","watch","newList","_ctx","_cache","_component_el_icon","__unplugin_components_0","_component_el_button","__unplugin_components_1","_component_el_upload","__unplugin_components_2","_component_el_scrollbar","__unplugin_components_3","_component_el_tab_pane","__unplugin_components_4","_component_el_radio","__unplugin_components_5","_component_el_radio_group","__unplugin_components_6","_component_el_form_item","__unplugin_components_7","_component_el_input_number","__unplugin_components_8","__unplugin_components_9","_component_el_option","__unplugin_components_10","_component_el_select","__unplugin_components_11","_component_el_tabs","__unplugin_components_12","_component_el_dialog","__unplugin_components_13","_directive_loading","__unplugin_directives_0","_withDirectives","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode"],"mappings":"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","x_google_ignoreList":[0]}