{"version":3,"file":"TemplateForm-fdGODvPl.js","sources":["../../src/pages/ImageAIGenerator/components/TemplateForm.vue"],"sourcesContent":["<template>\r\n  <el-form :model=\"templateForm\" :rules=\"templateRules\" ref=\"templateFormRef\" label-position=\"top\" class=\"compact-form\">\r\n    <el-row :gutter=\"20\">\r\n      <el-col :span=\"8\">\r\n        <!-- 左侧表单区域 -->\r\n        <div class=\"form-card\">\r\n          <!-- 模板名称（调整到最上方） -->\r\n          <el-form-item label=\"模板名称\" prop=\"name\" class=\"rounded-form-item\">\r\n            <el-input v-model=\"templateForm.name\" placeholder=\"请输入模板名称\" class=\"rounded-input\"></el-input>\r\n          </el-form-item>\r\n\r\n          <!-- 上传水印图（修改名称） -->\r\n          <el-form-item label=\"上传水印图\" prop=\"image\" class=\"rounded-form-item\">\r\n            <el-upload\r\n              class=\"template-upload\"\r\n              action=\"#\"\r\n              :auto-upload=\"false\"\r\n              :limit=\"1\"\r\n              :on-change=\"handleImageChange\"\r\n              :before-upload=\"beforeImageUpload\"\r\n              :show-file-list=\"false\"\r\n            >\r\n              <template #trigger>\r\n                <el-button type=\"primary\" class=\"rounded-button\">选择图片</el-button>\r\n              </template>\r\n              <template #tip>\r\n                <div class=\"el-upload__tip\">\r\n                  仅支持png文件，且不超过5MB\r\n                </div>\r\n              </template>\r\n            </el-upload>\r\n          </el-form-item>\r\n          \r\n          <!-- AI底图尺寸 -->\r\n          <el-form-item label=\"AI底图尺寸\" prop=\"imageSize\" class=\"rounded-form-item\">\r\n            <el-select v-model=\"templateForm.imageSize\" placeholder=\"请选择AI底图尺寸\" class=\"rounded-select w-100\">\r\n              <!-- 方形 -->\r\n              <el-option\r\n                v-for=\"item in imageSizeOptions.filter(item => item.orientation === '方形')\"\r\n                :key=\"item.value\"\r\n                :label=\"`${item.label} (${item.orientation})`\"\r\n                :value=\"item.value\">\r\n              </el-option>\r\n              \r\n              <el-divider content-position=\"center\">横版</el-divider>\r\n              \r\n              <!-- 横版 -->\r\n              <el-option\r\n                v-for=\"item in imageSizeOptions.filter(item => item.orientation === '横版')\"\r\n                :key=\"item.value\"\r\n                :label=\"`${item.label} (${item.orientation})`\"\r\n                :value=\"item.value\">\r\n              </el-option>\r\n              \r\n              <el-divider content-position=\"center\">竖版</el-divider>\r\n              \r\n              <!-- 竖版 -->\r\n              <el-option\r\n                v-for=\"item in imageSizeOptions.filter(item => item.orientation === '竖版')\"\r\n                :key=\"item.value\"\r\n                :label=\"`${item.label} (${item.orientation})`\"\r\n                :value=\"item.value\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          \r\n          <!-- 分类选择 -->\r\n          <el-form-item label=\"分类\" prop=\"tag\" class=\"rounded-form-item\">\r\n            <el-select v-model=\"templateForm.tag\" placeholder=\"请选择分类\" class=\"rounded-select w-100\">\r\n              <el-option\r\n                v-for=\"item in localTemplateTags\"\r\n                :key=\"item.value\"\r\n                :label=\"item.label\"\r\n                :value=\"item.value\">\r\n              </el-option>\r\n              <el-divider></el-divider>\r\n              <div class=\"add-tag-btn\">\r\n                <el-button type=\"primary\" text @click=\"showAddTagDialog = true\">\r\n                  <el-icon><Plus /></el-icon>添加新分类\r\n                </el-button>\r\n              </div>\r\n            </el-select>\r\n          </el-form-item>\r\n        </div>\r\n        \r\n        <!-- 文字区域设置（横向布局） -->\r\n        <div class=\"form-card mt-20\">\r\n          <h3 class=\"card-title\">文字设置（可选）</h3>\r\n          <el-row :gutter=\"15\">\r\n            <el-col :span=\"12\">\r\n              <!-- 文字一 -->\r\n              <div class=\"text-area-group rounded-box\">\r\n                <div class=\"text-area-header\">\r\n                  <h4>文字1</h4>\r\n                  <el-switch v-model=\"templateForm.text1.enabled\" />\r\n                </div>\r\n                \r\n                <template v-if=\"templateForm.text1.enabled\">\r\n                  <div class=\"text-settings\">\r\n                    <el-form-item label=\"字体\" class=\"mb-2\">\r\n                      <div class=\"font-select-container\">\r\n                        <el-select \r\n                          v-model=\"templateForm.text1.font\" \r\n                          placeholder=\"请选择字体\" \r\n                          class=\"rounded-select font-select\"\r\n                          @change=\"() => onFontChange('text1')\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"font in fontOptions\"\r\n                            :key=\"font.value\"\r\n                            :label=\"font.label\"\r\n                            :value=\"font.value\">\r\n                            <div class=\"font-option-item\">\r\n                              <span :style=\"{ fontFamily: getFontFamily(font.value) }\">{{ font.label }}</span>\r\n                            </div>\r\n                          </el-option>\r\n                        </el-select>\r\n                        <el-upload\r\n                          class=\"font-upload\"\r\n                          action=\"#\"\r\n                          :auto-upload=\"false\"\r\n                          :show-file-list=\"false\"\r\n                          :on-change=\"(file) => handleFontUpload(file, 'text1')\"\r\n                          accept=\".ttf,.otf,.woff,.woff2\"\r\n                        >\r\n                          <el-button class=\"upload-font-btn\" type=\"primary\" circle>\r\n                            <el-icon><Upload /></el-icon>\r\n                          </el-button>\r\n                        </el-upload>\r\n                      </div>\r\n                    </el-form-item>\r\n                    \r\n                    <!-- 将文字颜色和描边设置改为横向排列 -->\r\n                    <el-row :gutter=\"10\">\r\n                      <el-col :span=\"12\">\r\n                        <el-form-item label=\"文字颜色\" class=\"mb-2\">\r\n                          <div class=\"color-picker-group\">\r\n                            <el-color-picker \r\n                              v-model=\"templateForm.text1.color\" \r\n                              show-alpha\r\n                              size=\"large\"\r\n                              class=\"direct-color-picker\"\r\n                              @change=\"redrawCanvas\"\r\n                            ></el-color-picker>\r\n                          </div>\r\n                        </el-form-item>\r\n                      </el-col>\r\n                      <el-col :span=\"12\">\r\n                        <el-form-item label=\"描边\" class=\"mb-2\">\r\n                          <div class=\"color-picker-group\">\r\n                            <el-color-picker \r\n                              v-model=\"templateForm.text1.strokeColor\" \r\n                              show-alpha\r\n                              size=\"large\"\r\n                              class=\"direct-color-picker\"\r\n                              @change=\"redrawCanvas\"\r\n                            ></el-color-picker>\r\n                          </div>\r\n                        </el-form-item>\r\n                      </el-col>\r\n                    </el-row>\r\n                  </div>\r\n                </template>\r\n              </div>\r\n            </el-col>\r\n        \r\n            <el-col :span=\"12\">\r\n              <!-- 文字二 -->\r\n              <div class=\"text-area-group rounded-box\">\r\n                <div class=\"text-area-header\">\r\n                  <h4>文字2</h4>\r\n                  <el-switch v-model=\"templateForm.text2.enabled\" />\r\n                </div>\r\n                \r\n                <template v-if=\"templateForm.text2.enabled\">\r\n                  <div class=\"text-settings\">\r\n                    <el-form-item label=\"字体\" class=\"mb-2\">\r\n                      <div class=\"font-select-container\">\r\n                        <el-select \r\n                          v-model=\"templateForm.text2.font\" \r\n                          placeholder=\"请选择字体\" \r\n                          class=\"rounded-select font-select\"\r\n                          @change=\"() => onFontChange('text2')\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"font in fontOptions\"\r\n                            :key=\"font.value\"\r\n                            :label=\"font.label\"\r\n                            :value=\"font.value\">\r\n                            <div class=\"font-option-item\">\r\n                              <span :style=\"{ fontFamily: getFontFamily(font.value) }\">{{ font.label }}</span>\r\n                            </div>\r\n                          </el-option>\r\n                        </el-select>\r\n                        <el-upload\r\n                          class=\"font-upload\"\r\n                          action=\"#\"\r\n                          :auto-upload=\"false\"\r\n                          :show-file-list=\"false\"\r\n                          :on-change=\"(file) => handleFontUpload(file, 'text2')\"\r\n                          accept=\".ttf,.otf,.woff,.woff2\"\r\n                        >\r\n                          <el-button class=\"upload-font-btn\" type=\"primary\" circle>\r\n                            <el-icon><Upload /></el-icon>\r\n                          </el-button>\r\n                        </el-upload>\r\n                      </div>\r\n                    </el-form-item>\r\n                    \r\n                    <!-- 将文字颜色和描边设置改为横向排列 -->\r\n                    <el-row :gutter=\"10\">\r\n                      <el-col :span=\"12\">\r\n                        <el-form-item label=\"文字颜色\" class=\"mb-2\">\r\n                          <div class=\"color-picker-group\">\r\n                            <el-color-picker \r\n                              v-model=\"templateForm.text2.color\" \r\n                              show-alpha\r\n                              size=\"large\"\r\n                              class=\"direct-color-picker\"\r\n                              @change=\"redrawCanvas\"\r\n                            ></el-color-picker>\r\n                          </div>\r\n                        </el-form-item>\r\n                      </el-col>\r\n                      <el-col :span=\"12\">\r\n                        <el-form-item label=\"描边\" class=\"mb-2\">\r\n                          <div class=\"color-picker-group\">\r\n                            <el-color-picker \r\n                              v-model=\"templateForm.text2.strokeColor\" \r\n                              show-alpha\r\n                              size=\"large\"\r\n                              class=\"direct-color-picker\"\r\n                              @change=\"redrawCanvas\"\r\n                            ></el-color-picker>\r\n                          </div>\r\n                        </el-form-item>\r\n                      </el-col>\r\n                    </el-row>\r\n                  </div>\r\n                </template>\r\n              </div>\r\n            </el-col>\r\n          </el-row>\r\n        </div>\r\n      </el-col>\r\n      \r\n      <el-col :span=\"16\">\r\n        <!-- 右侧预览区域 -->\r\n        <div class=\"preview-card\">\r\n          <h3 class=\"card-title\">模板预览</h3>\r\n          <div class=\"preview-container\">\r\n            <canvas v-if=\"previewUrl\" ref=\"previewCanvas\" class=\"preview-canvas\" @mousedown=\"startDrag\"></canvas>\r\n            <div v-else class=\"empty-preview\">\r\n              <el-icon><Picture /></el-icon>\r\n              <p>请上传图片预览</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 添加预览说明 -->\r\n          <div class=\"preview-tips\" v-if=\"previewUrl\">\r\n            <p>预览效果仅供参考，实际效果可能会有所不同</p>\r\n          </div>\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n  </el-form>\r\n  \r\n  <!-- 添加分类对话框 -->\r\n  <el-dialog v-model=\"showAddTagDialog\" title=\"添加分类\" width=\"400px\" align-center>\r\n    <el-form :model=\"newTagForm\" label-width=\"100px\">\r\n      <el-form-item label=\"分类名称\">\r\n        <el-input v-model=\"newTagForm.name\" placeholder=\"请输入分类名称\"></el-input>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"showAddTagDialog = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"addNewTag\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n\r\n  <!-- 字体命名对话框 -->\r\n  <el-dialog v-model=\"fontUploadDialogVisible\" title=\"上传字体\" width=\"400px\">\r\n    <el-form :model=\"newFontForm\" label-position=\"top\">\r\n      <el-form-item label=\"自定义字体名称\">\r\n        <el-input v-model=\"newFontForm.name\" placeholder=\"请输入自定义字体名称\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"字体文件\">\r\n        <div class=\"selected-font-file\" v-if=\"newFontForm.file\">\r\n          {{ newFontForm.file.name }}\r\n        </div>\r\n        <el-upload\r\n          :auto-upload=\"false\"\r\n          :show-file-list=\"false\"\r\n          :on-change=\"(file) => { handleFontFileChange(file) }\"\r\n          accept=\".ttf,.otf,.woff,.woff2\"\r\n          class=\"font-upload-in-dialog\"\r\n        >\r\n          <el-button type=\"primary\">重新选择字体文件</el-button>\r\n        </el-upload>\r\n      </el-form-item>\r\n      \r\n      <!-- 删除字体预览区域，但保留拖动提示 -->\r\n      <div class=\"drag-hint\">\r\n        <el-icon>\r\n          <svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\" fill=\"currentColor\">\r\n            <path d=\"M574 352h416c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H574c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h416c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H574c-8.8 0-16-7.2-16-16v-96c0-8.8-7.2-16-16-16H126c-8.8 0-16-7.2-16-16v-96c0-8.8 7.2-16 16-16h416c8.8 0 16-7.2 16-16v-96c0-8.8-7.2-16-16-16H126c-8.8 0-16-7.2-16-16v-96c0-8.8 7.2-16 16-16h416c8.8 0 16 7.2 16 16v96c0 8.8 7.2 16 16 16z\" />\r\n          </svg>\r\n        </el-icon>\r\n        <span>拖动调整位置和大小</span>\r\n      </div>\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"fontUploadDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitFontUpload\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n  \r\n  <!-- 表单按钮 -->\r\n  <div class=\"dialog-footer\">\r\n    <el-button @click=\"$emit('cancel')\" class=\"rounded-button cancel-btn\">取消</el-button>\r\n    <el-button type=\"primary\" @click=\"submitTemplateForm\" class=\"rounded-button submit-btn\">确定</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, watch, onMounted, onBeforeUnmount, nextTick } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { Plus, Search, Picture, Upload, Edit, Delete } from '@element-plus/icons-vue'\r\nimport axios from 'axios'\r\nimport { h, markRaw } from 'vue'\r\nimport path from 'path'\r\n\r\n// 组件接收的属性\r\nconst props = defineProps({\r\n  templateTags: {\r\n    type: Array,\r\n    default: () => [\r\n      { label: '京东模板', value: 'jd' },\r\n      { label: '百度模板', value: 'baidu' },\r\n      { label: '小说模板', value: 'novel' },\r\n      { label: '夸克模板', value: 'quark' }\r\n    ]\r\n  },\r\n  templateData: {\r\n    type: Object,\r\n    default: null\r\n  },\r\n  isEditMode: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\n// 组件事件\r\nconst emit = defineEmits(['cancel', 'success', 'add-tag'])\r\n\r\n// 设置API基础URL - 始终使用相对路径确保代理生效\r\nconst API_BASE_URL = '/api/ai'\r\nconsole.log('使用API基础URL:', API_BASE_URL)\r\n\r\n// 定义不含'/ai'前缀的baseURL - 使用相对路径\r\nconst baseURL = import.meta.env.VITE_API_BASE_URL\r\nconsole.log('使用baseURL:', baseURL)\r\n\r\n// 专门用于图片的基础URL（不含/ai）\r\nconst IMAGE_API_URL = '/api'\r\nconsole.log('使用图片API基础URL:', IMAGE_API_URL)\r\n\r\n// 状态变量\r\nconst templateFormRef = ref(null)\r\nconst previewUrl = ref('')\r\nconst previewCanvas = ref(null)\r\nconst canvasContext = ref(null)\r\nconst previewImage = ref(null)\r\nconst showAddTagDialog = ref(false)\r\nconst fontPreviewUrl = ref('') // 字体预览URL\r\n// 添加本地标签列表变量\r\nconst localTemplateTags = ref([])\r\n\r\n// 拖拽相关变量\r\nconst isDragging = ref(false)\r\nconst activeTextArea = ref(null) // 当前活动的文本区域\r\nconst dragStartPos = ref({ x: 0, y: 0 })\r\nconst dragType = ref('') // 'move' 或 'resize'\r\nconst resizeHandle = ref('') // 调整大小的句柄位置\r\n\r\nconst newTagForm = ref({\r\n  name: ''\r\n})\r\n\r\n// 添加一个字体命名对话框变量\r\nconst fontUploadDialogVisible = ref(false)\r\nconst newFontForm = ref({\r\n  name: '',\r\n  file: null,\r\n  textArea: null\r\n})\r\n\r\n// 尺寸选项\r\nconst imageSizeOptions = [\r\n  { label: '1:1', value: '512x512', orientation: '方形' },\r\n  { label: '4:3', value: '512x384', orientation: '横版' },\r\n  { label: '3:4', value: '384x512', orientation: '竖版' },\r\n  { label: '3:2', value: '512x341', orientation: '横版' },\r\n  { label: '2:3', value: '341x512', orientation: '竖版' },\r\n  { label: '16:9', value: '512x288', orientation: '横版' },\r\n  { label: '9:16', value: '288x512', orientation: '竖版' }\r\n]\r\n\r\n// 字体选项\r\nconst fontOptions = ref([\r\n  { label: '正在加载字体列表...', value: '' }\r\n])\r\n\r\n// 表单数据\r\nconst templateForm = reactive({\r\n  name: '',\r\n  tag: '',\r\n  image: null,\r\n  imageSize: '', // AI底图尺寸字段\r\n  serverImageUrl: '', // 服务器存储的图片URL\r\n  text1: {\r\n    enabled: false,\r\n    font: '', // 暂时不设置默认值，等待fetchFonts完成后通过setDefaultFont设置\r\n    x: 10, // 左上角x坐标（百分比）\r\n    y: 10, // 左上角y坐标（百分比）\r\n    width: 30, // 宽度（百分比）\r\n    height: 15, // 高度（百分比）\r\n    color: '#FFFFFF', // 默认白色\r\n    strokeColor: null, // 默认无描边（null表示不使用描边）\r\n  },\r\n  text2: {\r\n    enabled: false,\r\n    font: '', // 暂时不设置默认值，等待fetchFonts完成后通过setDefaultFont设置\r\n    x: 10,\r\n    y: 60,\r\n    width: 30,\r\n    height: 15,\r\n    color: '#FFFFFF', // 默认白色\r\n    strokeColor: null, // 默认无描边（null表示不使用描边）\r\n  }\r\n})\r\n\r\n// 表单验证规则\r\nconst templateRules = {\r\n  name: [\r\n    { required: true, message: '请输入模板名称', trigger: 'blur' }\r\n  ],\r\n  image: [\r\n    { \r\n      required: true, \r\n      validator: (rule, value, callback) => {\r\n        // 如果是编辑模式并且有已保存的图片URL，则通过验证\r\n        if (props.isEditMode && (templateForm.serverImageUrl || previewUrl.value)) {\r\n          callback();\r\n        } else if (templateForm.image) {\r\n          callback();\r\n        } else {\r\n          callback(new Error('请上传模板图片'));\r\n        }\r\n      },\r\n      trigger: 'change'\r\n    }\r\n  ],\r\n  imageSize: [\r\n    { required: true, message: '请选择AI底图尺寸', trigger: 'change' }\r\n  ]\r\n}\r\n\r\n// 在显示图片前处理URL路径\r\nconst processImageUrl = (url) => {\r\n  // 如果URL为空，返回空字符串\r\n  if (!url) return '';\r\n  \r\n  console.log('处理图片URL:', url);\r\n  \r\n  // 如果URL以'/file/'开头，确保使用正确的完整路径\r\n  if (url && url.startsWith('/file/')) {\r\n    // 直接使用不带'/ai'前缀的baseURL\r\n    const fullUrl = `${baseURL}${url}`;\r\n    console.log('文件URL转换为:', fullUrl);\r\n    return fullUrl;\r\n  }\r\n  \r\n  // 如果已经是完整URL，直接返回\r\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('blob:')) {\r\n    console.log('使用原始URL:', url);\r\n    return url;\r\n  }\r\n  \r\n  // 如果URL以/api/ai开头，移除/ai部分\r\n  if (url.startsWith('/api/ai/')) {\r\n    const cleanUrl = url.replace('/api/ai/', '/api/');\r\n    console.log('清理重复前缀:', cleanUrl);\r\n    return cleanUrl;\r\n  }\r\n  \r\n  // 检查并修复路径中可能出现的重复ai前缀问题\r\n  if (url.startsWith('/ai/')) {\r\n    // 直接返回相对路径，但使用IMAGE_API_URL前缀\r\n    const cleanUrl = `${IMAGE_API_URL}${url.substring(3)}`;\r\n    console.log('转换ai路径:', cleanUrl);\r\n    return cleanUrl;\r\n  }\r\n  \r\n  // 处理常规路径\r\n  let processedUrl;\r\n  if (url.startsWith('/')) {\r\n    processedUrl = `${IMAGE_API_URL}${url}`;\r\n  } else {\r\n    processedUrl = `${IMAGE_API_URL}/${url}`;\r\n  }\r\n  \r\n  console.log('常规路径转换为:', processedUrl);\r\n  return processedUrl;\r\n}\r\n\r\n// 监听图片URL变化，加载画布\r\nwatch(previewUrl, (newUrl) => {\r\n  if (newUrl) {\r\n    loadCanvasImage(newUrl);\r\n  }\r\n});\r\n\r\n// 监听文字设置（可选）变化，重绘画布\r\nwatch([\r\n  () => templateForm.text1.enabled,\r\n  () => templateForm.text1.font,\r\n  () => templateForm.text1.color,\r\n  () => templateForm.text1.strokeColor,\r\n  () => templateForm.text2.enabled,\r\n  () => templateForm.text2.font,\r\n  () => templateForm.text2.color,\r\n  () => templateForm.text2.strokeColor\r\n], () => {\r\n  if (previewUrl.value) {\r\n    redrawCanvas();\r\n  }\r\n}, { deep: true });\r\n\r\n// 加载Canvas图片\r\nconst loadCanvasImage = (url) => {\r\n  if (!url) {\r\n    console.warn('尝试加载空URL');\r\n    return;\r\n  }\r\n\r\n  console.log('开始加载图片:', url);\r\n  \r\n  previewImage.value = new Image();\r\n  const processedUrl = processImageUrl(url);\r\n  previewImage.value.src = processedUrl;\r\n  \r\n  // 添加错误处理\r\n  previewImage.value.onerror = (e) => {\r\n    console.error('图片加载失败:', e);\r\n    ElMessage.warning('图片加载失败，请重试');\r\n  };\r\n  \r\n  previewImage.value.onload = () => {\r\n    console.log('图片加载成功:', processedUrl);\r\n    setupCanvas();\r\n    redrawCanvas();\r\n  };\r\n}\r\n\r\n// 设置Canvas尺寸\r\nconst setupCanvas = () => {\r\n  if (!previewCanvas.value) {\r\n    console.warn('画布元素不存在');\r\n    return;\r\n  }\r\n  \r\n  if (!previewImage.value) {\r\n    console.warn('预览图像不存在');\r\n    return;\r\n  }\r\n  \r\n  const container = previewCanvas.value.closest('.preview-container');\r\n  if (!container) {\r\n    console.warn('找不到预览容器');\r\n    return;\r\n  }\r\n  \r\n  const containerWidth = container.clientWidth;\r\n  const containerHeight = container.clientHeight;\r\n  \r\n  if (containerWidth <= 0 || containerHeight <= 0) {\r\n    console.warn('容器尺寸无效:', containerWidth, containerHeight);\r\n    return;\r\n  }\r\n  \r\n  // 检查图像是否有有效尺寸\r\n  if (previewImage.value.width <= 0 || previewImage.value.height <= 0) {\r\n    console.warn('图像尺寸无效:', previewImage.value.width, previewImage.value.height);\r\n    return;\r\n  }\r\n  \r\n  // 计算图像适应容器的尺寸\r\n  const imgRatio = previewImage.value.width / previewImage.value.height;\r\n  const containerRatio = containerWidth / containerHeight;\r\n  \r\n  let canvasWidth, canvasHeight;\r\n  \r\n  if (imgRatio > containerRatio) {\r\n    // 图像更宽，以容器宽度为基准\r\n    canvasWidth = containerWidth - 20; // 减小边距，使预览区域更大\r\n    canvasHeight = canvasWidth / imgRatio;\r\n  } else {\r\n    // 图像更高，以容器高度为基准\r\n    canvasHeight = containerHeight - 20; // 减小边距，使预览区域更大\r\n    canvasWidth = canvasHeight * imgRatio;\r\n  }\r\n  \r\n  // 确保画布尺寸为正数\r\n  canvasWidth = Math.max(1, Math.round(canvasWidth));\r\n  canvasHeight = Math.max(1, Math.round(canvasHeight));\r\n  \r\n  console.log('设置画布尺寸:', canvasWidth, canvasHeight);\r\n  \r\n  // 设置Canvas尺寸\r\n  previewCanvas.value.width = canvasWidth;\r\n  previewCanvas.value.height = canvasHeight;\r\n  \r\n  // 获取2D上下文\r\n  canvasContext.value = previewCanvas.value.getContext('2d');\r\n  \r\n  if (!canvasContext.value) {\r\n    console.error('无法获取canvas 2D上下文');\r\n    return;\r\n  }\r\n}\r\n\r\n// 重绘Canvas\r\nconst redrawCanvas = () => {\r\n  if (!canvasContext.value || !previewCanvas.value) {\r\n    console.warn('无法重绘：上下文或画布不存在');\r\n    return;\r\n  }\r\n  \r\n  if (!previewImage.value) {\r\n    console.warn('无法重绘：预览图像不存在');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    const canvas = previewCanvas.value;\r\n    const ctx = canvasContext.value;\r\n    \r\n    // 清除Canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // 绘制图像\r\n    ctx.drawImage(previewImage.value, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // 绘制文字区域\r\n    if (templateForm.text1.enabled) {\r\n      drawTextRect(ctx, '文字1区域', templateForm.text1, activeTextArea.value === 'text1');\r\n    }\r\n    \r\n    if (templateForm.text2.enabled) {\r\n      drawTextRect(ctx, '文字2区域', templateForm.text2, activeTextArea.value === 'text2');\r\n    }\r\n  } catch (error) {\r\n    console.error('画布重绘失败:', error);\r\n    ElMessage.error('预览渲染失败，请重试');\r\n  }\r\n}\r\n\r\n// 绘制文字矩形区域\r\nconst drawTextRect = (ctx, text, rectData, isActive) => {\r\n  const canvas = previewCanvas.value;\r\n  \r\n  // 计算实际像素位置\r\n  const x = (rectData.x * canvas.width) / 100;\r\n  const y = (rectData.y * canvas.height) / 100;\r\n  const width = (rectData.width * canvas.width) / 100;\r\n  const height = (rectData.height * canvas.height) / 100;\r\n  \r\n  // 绘制矩形背景 - 半透明\r\n  ctx.fillStyle = isActive ? 'rgba(64, 158, 255, 0.4)' : 'rgba(0, 0, 0, 0.4)';\r\n  ctx.fillRect(x, y, width, height);\r\n  \r\n  // 绘制矩形边框\r\n  ctx.strokeStyle = isActive ? '#409eff' : 'rgba(255, 255, 255, 0.7)';\r\n  ctx.lineWidth = isActive ? 2 : 1;\r\n  ctx.strokeRect(x, y, width, height);\r\n  \r\n  // 直接使用字体名称作为字体族\r\n  const fontFamily = `'${rectData.font}', \"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif`;\r\n  \r\n  // 获取中文显示名称\r\n  const fontInfo = fontOptions.value.find(f => f.value === rectData.font);\r\n  // 显示中文字体名或fallback到英文value\r\n  const fontDisplayName = fontInfo?.label || rectData.font;\r\n  const sampleText = text === '文字1区域' ? '预览文字1' : '预览文字2';\r\n  \r\n  // 保存上下文状态\r\n  ctx.save();\r\n  \r\n  // 尝试使用加载的字体\r\n  try {\r\n    // 设置文字样式和对齐方式\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    \r\n    // 计算适合区域的字体大小\r\n    const fontSize = Math.min(Math.floor(width / 5), Math.floor(height / 2), 20);\r\n    \r\n    // 使用正确的字体和大小\r\n    ctx.font = `bold ${fontSize}px ${fontFamily}`;\r\n    \r\n    // 检查是否有描边颜色\r\n    if (rectData.strokeColor) {\r\n      ctx.strokeStyle = rectData.strokeColor;\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeText(sampleText, x + width / 2, y + height / 2);\r\n    }\r\n    \r\n    // 使用纯色填充文字\r\n    ctx.fillStyle = rectData.color || 'white';\r\n    \r\n    // 绘制文本\r\n    ctx.fillText(sampleText, x + width / 2, y + height / 2);\r\n    \r\n  } catch (e) {\r\n    console.warn('绘制文本区域时出现错误:', e);\r\n    \r\n    // 出错时使用备用字体\r\n    ctx.font = 'bold 16px Arial, sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    \r\n    // 检查是否有描边颜色\r\n    if (rectData.strokeColor) {\r\n      ctx.strokeStyle = rectData.strokeColor;\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeText(sampleText, x + width / 2, y + height / 2);\r\n    }\r\n    \r\n    // 使用纯色作为回退选项\r\n    ctx.fillStyle = rectData.color || 'white';\r\n    ctx.fillText(sampleText, x + width / 2, y + height / 2);\r\n  }\r\n  \r\n  // 恢复上下文状态\r\n  ctx.restore();\r\n  \r\n  // 如果选中则绘制调整手柄\r\n  if (isActive) {\r\n    // 四个角的调整手柄\r\n    const handles = [\r\n      { id: 'tl', x: x, y: y },                   // 左上\r\n      { id: 'tr', x: x + width, y: y },           // 右上\r\n      { id: 'bl', x: x, y: y + height },          // 左下\r\n      { id: 'br', x: x + width, y: y + height }   // 右下\r\n    ];\r\n    \r\n    handles.forEach(handle => {\r\n      // 绘制手柄\r\n      ctx.fillStyle = '#409eff';\r\n      ctx.fillRect(handle.x - 4, handle.y - 4, 8, 8);\r\n      \r\n      ctx.strokeStyle = 'white';\r\n      ctx.lineWidth = 1;\r\n      ctx.strokeRect(handle.x - 4, handle.y - 4, 8, 8);\r\n    });\r\n  }\r\n}\r\n\r\n// 获取字体样式\r\nconst getFontFamily = (fontType) => {\r\n  if (!fontType) {\r\n    console.log('未指定字体，使用默认字体');\r\n    return '\"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif';\r\n  }\r\n  \r\n  // 查找自定义字体\r\n  const customFont = fontOptions.value.find(font => font.value === fontType);\r\n  if (customFont) {\r\n    console.log('找到字体配置:', customFont);\r\n    if (customFont.url) {\r\n      console.log('使用自定义字体:', fontType);\r\n      return `'${fontType}', \"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif`;\r\n    }\r\n    if (customFont.cssFamily) {\r\n      return customFont.cssFamily;\r\n    }\r\n  }\r\n  \r\n  // 系统字体处理\r\n  console.log('使用系统或内置字体:', fontType);\r\n  switch (fontType) {\r\n    case 'heiti': return '\"黑体\", \"SimHei\", sans-serif';\r\n    case 'songti': return '\"宋体\", \"SimSun\", serif';\r\n    case 'msyh': return '\"微软雅黑\", \"Microsoft YaHei\", sans-serif';\r\n    case 'kaiti': return '\"楷体\", \"KaiTi\", serif';\r\n    default: return '\"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif';\r\n  }\r\n}\r\n\r\n// 检查一个点是否在某个文本区域内\r\nconst isPointInRect = (x, y, rect, canvas) => {\r\n  const rectX = (rect.x * canvas.width) / 100;\r\n  const rectY = (rect.y * canvas.height) / 100;\r\n  const rectWidth = (rect.width * canvas.width) / 100;\r\n  const rectHeight = (rect.height * canvas.height) / 100;\r\n  \r\n  return x >= rectX && x <= rectX + rectWidth && \r\n         y >= rectY && y <= rectY + rectHeight;\r\n}\r\n\r\n// 检查是否点击了调整大小的手柄\r\nconst checkResizeHandle = (x, y, rect, canvas) => {\r\n  const rectX = (rect.x * canvas.width) / 100;\r\n  const rectY = (rect.y * canvas.height) / 100;\r\n  const rectWidth = (rect.width * canvas.width) / 100;\r\n  const rectHeight = (rect.height * canvas.height) / 100;\r\n  \r\n  const handleSize = 8; // 手柄大小\r\n  \r\n  // 检查四个角\r\n  if (Math.abs(x - rectX) <= handleSize && Math.abs(y - rectY) <= handleSize) {\r\n    return 'tl'; // 左上角\r\n  }\r\n  if (Math.abs(x - (rectX + rectWidth)) <= handleSize && Math.abs(y - rectY) <= handleSize) {\r\n    return 'tr'; // 右上角\r\n  }\r\n  if (Math.abs(x - rectX) <= handleSize && Math.abs(y - (rectY + rectHeight)) <= handleSize) {\r\n    return 'bl'; // 左下角\r\n  }\r\n  if (Math.abs(x - (rectX + rectWidth)) <= handleSize && Math.abs(y - (rectY + rectHeight)) <= handleSize) {\r\n    return 'br'; // 右下角\r\n  }\r\n  \r\n  return ''; // 没有点击任何手柄\r\n}\r\n\r\n// 处理鼠标按下事件\r\nconst startDrag = (e) => {\r\n  const canvas = previewCanvas.value;\r\n  if (!canvas) return;\r\n  \r\n  // 获取鼠标在canvas中的相对位置\r\n  const rect = canvas.getBoundingClientRect();\r\n  const mouseX = e.clientX - rect.left;\r\n  const mouseY = e.clientY - rect.top;\r\n  \r\n  // 记录起始位置\r\n  dragStartPos.value = { x: mouseX, y: mouseY };\r\n  \r\n  // 检查点击位置\r\n  let textAreaFound = false;\r\n  \r\n  // 检查text2（先检查，这样text1可以覆盖在上面）\r\n  if (templateForm.text2.enabled) {\r\n    const handle = checkResizeHandle(mouseX, mouseY, templateForm.text2, canvas);\r\n    if (handle) {\r\n      activeTextArea.value = 'text2';\r\n      dragType.value = 'resize';\r\n      resizeHandle.value = handle;\r\n      textAreaFound = true;\r\n    } else if (isPointInRect(mouseX, mouseY, templateForm.text2, canvas)) {\r\n      activeTextArea.value = 'text2';\r\n      dragType.value = 'move';\r\n      textAreaFound = true;\r\n    }\r\n  }\r\n  \r\n  // 如果还没有找到区域，检查text1\r\n  if (!textAreaFound && templateForm.text1.enabled) {\r\n    const handle = checkResizeHandle(mouseX, mouseY, templateForm.text1, canvas);\r\n    if (handle) {\r\n      activeTextArea.value = 'text1';\r\n      dragType.value = 'resize';\r\n      resizeHandle.value = handle;\r\n      textAreaFound = true;\r\n    } else if (isPointInRect(mouseX, mouseY, templateForm.text1, canvas)) {\r\n      activeTextArea.value = 'text1';\r\n      dragType.value = 'move';\r\n      textAreaFound = true;\r\n    }\r\n  }\r\n  \r\n  if (textAreaFound) {\r\n    isDragging.value = true;\r\n    \r\n    // 添加鼠标移动和抬起事件监听器\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    document.addEventListener('mouseup', stopDrag);\r\n    \r\n    // 重绘画布以显示激活状态\r\n    redrawCanvas();\r\n  }\r\n}\r\n\r\n// 处理鼠标移动事件\r\nconst onMouseMove = (e) => {\r\n  if (!isDragging.value || !activeTextArea.value) return;\r\n  \r\n  const canvas = previewCanvas.value;\r\n  const rect = canvas.getBoundingClientRect();\r\n  const mouseX = e.clientX - rect.left;\r\n  const mouseY = e.clientY - rect.top;\r\n  \r\n  // 计算移动距离（百分比）\r\n  const deltaX = ((mouseX - dragStartPos.value.x) / canvas.width) * 100;\r\n  const deltaY = ((mouseY - dragStartPos.value.y) / canvas.height) * 100;\r\n  \r\n  // 获取当前激活的文本区域\r\n  const activeRect = activeTextArea.value === 'text1' ? templateForm.text1 : templateForm.text2;\r\n  \r\n  if (dragType.value === 'move') {\r\n    // 移动文本区域\r\n    activeRect.x = Math.max(0, Math.min(100 - activeRect.width, activeRect.x + deltaX));\r\n    activeRect.y = Math.max(0, Math.min(100 - activeRect.height, activeRect.y + deltaY));\r\n  } else if (dragType.value === 'resize') {\r\n    // 调整大小\r\n    // 根据不同的手柄调整不同的边\r\n    if (resizeHandle.value === 'tl') { // 左上角\r\n      const newWidth = activeRect.width - deltaX;\r\n      const newHeight = activeRect.height - deltaY;\r\n      \r\n      if (newWidth >= 5) {\r\n        activeRect.x += deltaX;\r\n        activeRect.width = newWidth;\r\n      }\r\n      \r\n      if (newHeight >= 5) {\r\n        activeRect.y += deltaY;\r\n        activeRect.height = newHeight;\r\n      }\r\n    } else if (resizeHandle.value === 'tr') { // 右上角\r\n      const newWidth = activeRect.width + deltaX;\r\n      const newHeight = activeRect.height - deltaY;\r\n      \r\n      if (newWidth >= 5) {\r\n        activeRect.width = newWidth;\r\n      }\r\n      \r\n      if (newHeight >= 5) {\r\n        activeRect.y += deltaY;\r\n        activeRect.height = newHeight;\r\n      }\r\n    } else if (resizeHandle.value === 'bl') { // 左下角\r\n      const newWidth = activeRect.width - deltaX;\r\n      const newHeight = activeRect.height + deltaY;\r\n      \r\n      if (newWidth >= 5) {\r\n        activeRect.x += deltaX;\r\n        activeRect.width = newWidth;\r\n      }\r\n      \r\n      if (newHeight >= 5) {\r\n        activeRect.height = newHeight;\r\n      }\r\n    } else if (resizeHandle.value === 'br') { // 右下角\r\n      const newWidth = activeRect.width + deltaX;\r\n      const newHeight = activeRect.height + deltaY;\r\n      \r\n      if (newWidth >= 5) {\r\n        activeRect.width = newWidth;\r\n      }\r\n      \r\n      if (newHeight >= 5) {\r\n        activeRect.height = newHeight;\r\n      }\r\n    }\r\n    \r\n    // 确保尺寸和位置不超出画布\r\n    activeRect.width = Math.min(100, Math.max(5, activeRect.width));\r\n    activeRect.height = Math.min(100, Math.max(5, activeRect.height));\r\n    activeRect.x = Math.min(100 - activeRect.width, Math.max(0, activeRect.x));\r\n    activeRect.y = Math.min(100 - activeRect.height, Math.max(0, activeRect.y));\r\n  }\r\n  \r\n  // 更新起始位置\r\n  dragStartPos.value = { x: mouseX, y: mouseY };\r\n  \r\n  // 重绘画布\r\n  redrawCanvas();\r\n}\r\n\r\n// 停止拖拽\r\nconst stopDrag = () => {\r\n  isDragging.value = false;\r\n  dragType.value = '';\r\n  resizeHandle.value = '';\r\n  \r\n  // 移除事件监听器\r\n  document.removeEventListener('mousemove', onMouseMove);\r\n  document.removeEventListener('mouseup', stopDrag);\r\n}\r\n\r\n// 处理图片变更\r\nconst handleImageChange = async (file) => {\r\n  templateForm.image = file.raw;\r\n  \r\n  try {\r\n    // 如果有之前的临时URL，先释放它\r\n    if (previewUrl.value && previewUrl.value.startsWith('blob:')) {\r\n      URL.revokeObjectURL(previewUrl.value);\r\n    }\r\n    \r\n    // 创建临时预览URL用于立即显示\r\n    previewUrl.value = URL.createObjectURL(file.raw);\r\n    \r\n    // 确保画布立即刷新\r\n    setTimeout(() => {\r\n      loadCanvasImage(previewUrl.value);\r\n    }, 50);\r\n    \r\n    // 上传图片到服务器\r\n    const formData = new FormData();\r\n    formData.append('file', file.raw);\r\n    \r\n    // 调用上传API\r\n    const response = await axios.post(`${API_BASE_URL}/upload-image`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    if (response.data.success) {\r\n      // 更新为服务器返回的永久URL\r\n      templateForm.serverImageUrl = response.data[\"       \"];\r\n      console.log('服务器返回图片URL:', response.data.imageUrl);\r\n      \r\n      // 如果服务器返回的是/file/开头的路径，更新预览图片\r\n      if (response.data.imageUrl && response.data.imageUrl.startsWith('/file/')) {\r\n        // 释放之前的临时URL\r\n        if (previewUrl.value && previewUrl.value.startsWith('blob:')) {\r\n          URL.revokeObjectURL(previewUrl.value);\r\n        }\r\n        \r\n        // 使用服务器返回的URL更新预览\r\n        previewUrl.value = response.data.imageUrl;\r\n        // 重新加载画布图片\r\n        setTimeout(() => {\r\n          loadCanvasImage(previewUrl.value);\r\n        }, 100);\r\n      }\r\n      \r\n      ElMessage.success('图片上传成功');\r\n    } else {\r\n      ElMessage.error(response.data.error || '图片上传失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('上传图片失败:', error);\r\n    ElMessage.error('上传图片失败: ' + (error.response?.data?.error || error.message));\r\n  }\r\n}\r\n\r\n// 提交表单\r\nconst submitTemplateForm = async () => {\r\n  templateFormRef.value.validate(async (valid) => {\r\n    if (valid) {\r\n      // 获取分类名称\r\n      const tagName = localTemplateTags.value.find(tag => tag.value === templateForm.tag)?.label || '自定义模板';\r\n      console.log('使用分类名作为tag值:', tagName);\r\n      \r\n      // 构造模板数据\r\n      const templateData = {\r\n        name: templateForm.name,\r\n        tag: tagName, // 使用分类名称作为tag\r\n        imageSize: templateForm.imageSize,\r\n        // 使用原始URL而非处理后的URL\r\n        previewImage: templateForm.serverImageUrl || (props.isEditMode && props.templateData ? props.templateData.previewImage : previewUrl.value), \r\n        description: `${templateForm.name}模板`,\r\n        config: { \r\n          // 使用原始URL而非处理后的URL\r\n          watermark: templateForm.serverImageUrl || (props.isEditMode && props.templateData ? props.templateData.previewImage : previewUrl.value),\r\n          position: 'bottom-right',\r\n          showLogo: true,\r\n          fontSize: 24,\r\n          color: '#000000',\r\n          fontFamily: 'default', // 使用默认字体\r\n          bold: true,\r\n          enableStroke: true,\r\n          strokeColor: '#ffffff',\r\n          opacity: 1\r\n        },\r\n        // 添加文本区域启用状态\r\n        text1_enabled: templateForm.text1.enabled ? 1 : 0,\r\n        text2_enabled: templateForm.text2.enabled ? 1 : 0\r\n      }\r\n      \r\n      // 如果是编辑模式，保留原有配置并合并新配置\r\n      if (props.isEditMode && props.templateData && props.templateData.config) {\r\n        templateData.config = {\r\n          ...props.templateData.config,\r\n          // 使用原始URL而非处理后的URL\r\n          watermark: templateForm.serverImageUrl || props.templateData.previewImage,\r\n        };\r\n      }\r\n      \r\n      // 添加文字区域1\r\n      if (templateForm.text1.enabled) {\r\n        // 验证字体是否存在\r\n        const text1Font = validateFontExists(templateForm.text1.font);\r\n        \r\n        templateData.text1 = {\r\n          enabled: 1, // 使用1而不是true\r\n          font: text1Font, // 使用经过验证的字体\r\n          x: templateForm.text1.x,\r\n          y: templateForm.text1.y,\r\n          width: templateForm.text1.width,\r\n          height: templateForm.text1.height,\r\n          color: templateForm.text1.color, // 添加文字颜色\r\n          strokeColor: templateForm.text1.strokeColor, // 添加描边颜色\r\n        }\r\n      } else {\r\n        templateData.text1 = null;\r\n      }\r\n      \r\n      // 添加文字区域2\r\n      if (templateForm.text2.enabled) {\r\n        // 验证字体是否存在\r\n        const text2Font = validateFontExists(templateForm.text2.font);\r\n        \r\n        templateData.text2 = {\r\n          enabled: 1, // 使用1而不是true\r\n          font: text2Font, // 使用经过验证的字体\r\n          x: templateForm.text2.x,\r\n          y: templateForm.text2.y,\r\n          width: templateForm.text2.width,\r\n          height: templateForm.text2.height,\r\n          color: templateForm.text2.color, // 添加文字颜色\r\n          strokeColor: templateForm.text2.strokeColor, // 添加描边颜色\r\n        }\r\n      } else {\r\n        templateData.text2 = null;\r\n      }\r\n      \r\n      console.log('提交模板数据:', {\r\n        ...templateData,\r\n        tag: templateData.tag + ' (使用分类名作为tag值)'\r\n      });\r\n      \r\n      try {\r\n        let response;\r\n        \r\n        // 根据模式决定是创建还是更新模板\r\n        if (props.isEditMode && props.templateData && props.templateData.id) {\r\n          // 更新现有模板\r\n          templateData.id = props.templateData.id; // 确保ID传递正确\r\n          response = await axios.put(`${API_BASE_URL}/templates/${props.templateData.id}`, templateData);\r\n        } else {\r\n          // 创建新模板\r\n          response = await axios.post(`${API_BASE_URL}/templates`, templateData);\r\n        }\r\n        \r\n        if (response.data.success) {\r\n          ElMessage.success(props.isEditMode ? '模板更新成功' : '模板添加成功');\r\n          \r\n          // 确保返回完整的模板数据\r\n          const returnTemplate = response.data.template || response.data.data;\r\n          \r\n          // 在返回的数据中补全可能缺失的字体信息\r\n          if (returnTemplate) {\r\n            // 确保文字区域1的字体信息完整\r\n            if (returnTemplate.text1 && templateForm.text1.enabled) {\r\n              returnTemplate.text1.font = returnTemplate.text1.font || templateForm.text1.font;\r\n            }\r\n            \r\n            // 确保文字区域2的字体信息完整\r\n            if (returnTemplate.text2 && templateForm.text2.enabled) {\r\n              returnTemplate.text2.font = returnTemplate.text2.font || templateForm.text2.font;\r\n            }\r\n            \r\n            // 确保启用状态信息正确\r\n            returnTemplate.text1_enabled = templateForm.text1.enabled ? 1 : 0;\r\n            returnTemplate.text2_enabled = templateForm.text2.enabled ? 1 : 0;\r\n          }\r\n          \r\n          // 返回完整模板数据给父组件\r\n          emit('success', returnTemplate);\r\n          \r\n          // 发送取消事件，关闭对话框\r\n          emit('cancel');\r\n        } else {\r\n          ElMessage.error(response.data.error || (props.isEditMode ? '更新模板失败' : '创建模板失败'));\r\n        }\r\n      } catch (error) {\r\n        console.error(props.isEditMode ? '更新模板失败:' : '创建模板失败:', error);\r\n        ElMessage.error((props.isEditMode ? '更新模板失败: ' : '创建模板失败: ') + (error.response?.data?.error || error.message));\r\n      }\r\n    } else {\r\n      ElMessage.warning('请填写必填项');\r\n      return false;\r\n    }\r\n  })\r\n}\r\n\r\n// 验证字体是否存在，返回有效的字体值\r\nconst validateFontExists = (fontValue) => {\r\n  // 如果没有传入字体值，使用默认字体\r\n  if (!fontValue) {\r\n    console.log('未提供字体值，使用默认字体');\r\n    return getDefaultFontValue();\r\n  }\r\n  \r\n  // 如果字体列表为空或还在加载中，直接返回原始值，后续再验证\r\n  if (fontOptions.value.length <= 1) {\r\n    console.log('字体列表为空或加载中，保留原始字体值:', fontValue);\r\n    return fontValue;\r\n  }\r\n  \r\n  // 查找字体是否存在于列表中\r\n  const fontExists = fontOptions.value.some(font => font.value === fontValue);\r\n  \r\n  if (fontExists) {\r\n    console.log(`字体 ${fontValue} 存在，可以使用`);\r\n    return fontValue;\r\n  } else {\r\n    console.log(`字体 ${fontValue} 不存在于当前字体列表中，但仍保留该值以便后续加载`);\r\n    return fontValue; // 保留原始值，而不是替换成默认字体\r\n  }\r\n}\r\n\r\n// 图片上传前验证\r\nconst beforeImageUpload = (file) => {\r\n  const isJPGOrPNG = file.type === 'image/jpeg' || file.type === 'image/png'\r\n  const isLt5M = file.size / 1024 / 1024 < 5\r\n\r\n  if (!isJPGOrPNG) {\r\n    ElMessage.error('图片只能是JPG或PNG格式!')\r\n  }\r\n  \r\n  if (!isLt5M) {\r\n    ElMessage.error('图片大小不能超过5MB!')\r\n  }\r\n  \r\n  return isJPGOrPNG && isLt5M\r\n}\r\n\r\n// 处理字体上传\r\nconst handleFontUpload = (file, targetTextArea) => {\r\n  if (!file || !file.raw) {\r\n    console.warn('无效的文件对象:', file);\r\n    return;\r\n  }\r\n\r\n  console.log(`处理字体上传 - 区域: ${targetTextArea}, 文件:`, file.raw.name);\r\n  \r\n  // 保存文件和目标文本区域\r\n  newFontForm.value.file = file;\r\n  newFontForm.value.textArea = targetTextArea;\r\n  \r\n  // 创建临时预览\r\n  createFontPreview(file);\r\n  \r\n  // 打开字体命名对话框\r\n  fontUploadDialogVisible.value = true;\r\n}\r\n\r\n// 创建字体预览\r\nconst createFontPreview = (file) => {\r\n  if (!file || !file.raw) return;\r\n  \r\n  // 销毁之前的对象URL\r\n  if (fontPreviewUrl.value) {\r\n    URL.revokeObjectURL(fontPreviewUrl.value);\r\n    fontPreviewUrl.value = '';\r\n  }\r\n  \r\n  try {\r\n    // 创建字体的临时URL\r\n    const fontUrl = URL.createObjectURL(file.raw);\r\n    fontPreviewUrl.value = fontUrl;\r\n    \r\n    // 创建一个唯一的字体名称用于预览\r\n    const fontFamily = `custom_preview_${Date.now()}`;\r\n    \r\n    // 移除旧的预览样式\r\n    document.querySelectorAll('style[data-font-preview=\"true\"]').forEach(el => el.remove());\r\n    \r\n    // 动态创建@font-face规则\r\n    const style = document.createElement('style');\r\n    style.setAttribute('data-font-preview', 'true');\r\n    style.textContent = `\r\n      @font-face {\r\n        font-family: '${fontFamily}';\r\n        src: url('${fontUrl}') format('${getFontFormat(file.raw.name)}');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n        font-display: block;\r\n      }\r\n      .font-preview-custom {\r\n        font-family: '${fontFamily}', Arial, sans-serif;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    \r\n    // 尝试使用FontFace API直接加载字体\r\n    try {\r\n      const fontFace = new FontFace(fontFamily, `url(${fontUrl})`);\r\n      fontFace.load().then(loadedFont => {\r\n        document.fonts.add(loadedFont);\r\n        console.log('字体预览加载成功:', fontFamily);\r\n      }).catch(err => {\r\n        console.warn('字体预览加载失败，使用默认样式表方式:', err);\r\n      });\r\n    } catch (e) {\r\n      console.warn('FontFace API不可用，使用默认样式表方式:', e);\r\n    }\r\n  } catch (error) {\r\n    console.error('字体预览创建失败:', error);\r\n    ElMessage.error('字体预览加载失败，但您仍可以上传字体');\r\n  }\r\n}\r\n\r\n// 提交字体上传\r\nconst submitFontUpload = async () => {\r\n  if (!newFontForm.value.name.trim()) {\r\n    ElMessage.warning('请输入自定义字体名称');\r\n    return;\r\n  }\r\n  \r\n  if (!newFontForm.value.file) {\r\n    ElMessage.warning('请选择字体文件');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 创建表单数据\r\n    const formData = new FormData();\r\n    const fileRaw = newFontForm.value.file.raw;\r\n    \r\n    // 添加文件\r\n    formData.append('file', fileRaw);\r\n    \r\n    // 添加必需参数 - 中文显示名称\r\n    const fontDisplayName = newFontForm.value.name.trim();\r\n    formData.append('name', fontDisplayName);\r\n    \r\n    // 生成唯一标识符，使用拼音/英文+时间戳\r\n    const fontValue = `font_${Date.now()}`;\r\n    formData.append('value', fontValue);\r\n    \r\n    // 添加可选参数\r\n    formData.append('description', `${fontDisplayName} 字体`);\r\n    formData.append('is_default', \"false\");\r\n    \r\n    console.log('字体上传请求参数:', {\r\n      endpoint: `${API_BASE_URL}/fonts/upload`,\r\n      fontName: fontDisplayName,\r\n      fontValue: fontValue\r\n    });\r\n    \r\n    // 显示上传中提示\r\n    const loadingMessage = ElMessage({\r\n      message: '正在上传字体，请稍候...',\r\n      type: 'info',\r\n      duration: 0\r\n    });\r\n    \r\n    // 添加正确的Content-Type头并设置超时时间\r\n    const response = await axios.post(`${API_BASE_URL}/fonts/upload`, formData, {\r\n      headers: { \r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      timeout: 60000 // 60秒超时\r\n    });\r\n    \r\n    // 关闭上传中提示\r\n    loadingMessage.close();\r\n    \r\n    console.log('字体上传响应:', response.data);\r\n    \r\n    if (response.data.success) {\r\n      ElMessage.success('字体上传成功');\r\n      \r\n      // 手动添加上传的字体到列表以供立即使用\r\n      if (response.data.data && response.data.data.path) {\r\n        const newFont = {\r\n          label: response.data.data.name,\r\n          value: response.data.data.value,\r\n          url: `${API_BASE_URL}/${response.data.data.path}`,\r\n          cssFamily: response.data.data.css_family || null\r\n        };\r\n        \r\n        // 添加到字体列表\r\n        const existingIndex = fontOptions.value.findIndex(f => f.value === newFont.value);\r\n        if (existingIndex >= 0) {\r\n          fontOptions.value[existingIndex] = newFont;\r\n        } else {\r\n          fontOptions.value.push(newFont);\r\n        }\r\n        \r\n        // 应用新字体到文本区域\r\n        const targetTextArea = newFontForm.value.textArea;\r\n        if (targetTextArea) {\r\n          console.log(`指定将字体应用到${targetTextArea}`);\r\n          templateForm[targetTextArea].font = newFont.value;\r\n        }\r\n        \r\n        // 重新加载字体样式\r\n        loadFonts();\r\n      } else {\r\n        // 全部更新字体列表\r\n        await fetchFonts();\r\n      }\r\n      \r\n      // 重新渲染预览\r\n      if (previewCanvas.value) {\r\n        setTimeout(() => {\r\n          redrawCanvas();\r\n        }, 200);\r\n      }\r\n      \r\n      // 关闭对话框并重置表单\r\n      fontUploadDialogVisible.value = false;\r\n      newFontForm.value = { name: '', file: null, textArea: null };\r\n    } else {\r\n      ElMessage.error(response.data.error || '字体上传失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('字体上传失败:', error);\r\n    \r\n    let errorMessage = '字体上传失败';\r\n    if (error.response) {\r\n      console.error('响应状态:', error.response.status);\r\n      console.error('响应数据:', error.response.data);\r\n      \r\n      if (error.response.data && error.response.data.detail) {\r\n        errorMessage += `: ${error.response.data.detail}`;\r\n      } else if (error.response.data && error.response.data.error) {\r\n        errorMessage += `: ${error.response.data.error}`;\r\n      } else if (typeof error.response.data === 'string') {\r\n        errorMessage += `: ${error.response.data}`;\r\n      } \r\n    } else if (error.request) {\r\n      console.error('请求发送但没有收到响应');\r\n      errorMessage += '：网络请求超时或服务器无响应';\r\n    } else {\r\n      console.error('请求设置错误:', error.message);\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    ElMessage.error(errorMessage);\r\n    \r\n    // 关闭上传中的提示（如果存在）\r\n    const loadingEl = document.querySelector('.el-message--info');\r\n    if (loadingEl) {\r\n      loadingEl.remove();\r\n    }\r\n  }\r\n}\r\n\r\n// 添加新分类\r\nconst addNewTag = async () => {\r\n  if (!newTagForm.value.name.trim()) {\r\n    ElMessage.warning('请输入分类名称')\r\n    return\r\n  }\r\n  \r\n  // 生成一个唯一的value值\r\n  const newValue = 'tag_' + Date.now()\r\n  \r\n  // 添加新分类\r\n  const newTag = {\r\n    label: newTagForm.value.name,\r\n    value: newValue\r\n  }\r\n  \r\n  // 检查本地列表中是否已存在相同名称或值的标签\r\n  const existingByLabel = localTemplateTags.value.some(tag => tag.label === newTag.label);\r\n  const existingByValue = localTemplateTags.value.some(tag => tag.value === newTag.value);\r\n  \r\n  if (existingByLabel) {\r\n    ElMessage.warning(`分类名称\"${newTag.label}\"已存在`);\r\n    return;\r\n  }\r\n  \r\n  // 将新分类添加到本地列表，确保立即可用\r\n  localTemplateTags.value = [...localTemplateTags.value, newTag];\r\n  console.log('本地分类列表更新:', localTemplateTags.value);\r\n  \r\n  // 自动选择新添加的分类\r\n  templateForm.tag = newValue;\r\n  \r\n  ElMessage.success(`已添加新分类: ${newTagForm.value.name}`)\r\n  \r\n  // 清空表单并关闭对话框\r\n  newTagForm.value.name = ''\r\n  showAddTagDialog.value = false\r\n}\r\n\r\n// 获取字体列表\r\nconst fetchFonts = async () => {\r\n  try {\r\n    console.log('开始请求字体列表，API地址:', `${API_BASE_URL}/fonts`);\r\n    const response = await axios.get(`${API_BASE_URL}/fonts`, {\r\n      headers: {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    })\r\n    if (response.data.success) {\r\n      console.log('获取字体列表成功，数据:', response.data);\r\n      \r\n      // 检查是否有字体数据\r\n      if (!response.data.data || response.data.data.length === 0) {\r\n        console.warn('后端返回成功但没有字体数据');\r\n        setDefaultSystemFonts();\r\n        return;\r\n      }\r\n      \r\n      // 转换后端返回的字体数据为前端需要的格式\r\n      fontOptions.value = response.data.data.map(font => ({\r\n        label: font.name, // 显示名称（中文）\r\n        value: font.value, // 唯一标识符（英文）\r\n        url: font.path ? `${API_BASE_URL}/${font.path}` : null,\r\n        cssFamily: font.css_family,\r\n        isDefault: font.is_default || false // 添加默认字体标记\r\n      }))\r\n      \r\n      console.log('转换后的字体列表:', fontOptions.value);\r\n      \r\n      // 设置默认字体\r\n      setDefaultFont();\r\n      \r\n      // 初始化字体样式\r\n      loadFonts()\r\n    } else {\r\n      console.error('获取字体列表失败:', response.data.error)\r\n      ElMessage.warning('获取字体列表失败，将使用系统字体')\r\n      \r\n      // API请求成功但返回错误时，使用系统字体\r\n      setDefaultSystemFonts();\r\n    }\r\n  } catch (error) {\r\n    console.error('获取字体列表失败:', error)\r\n    ElMessage.warning('获取字体列表失败，将使用系统字体')\r\n    \r\n    // API请求失败时，使用系统字体\r\n    setDefaultSystemFonts();\r\n  }\r\n}\r\n\r\n// 设置默认系统字体\r\nconst setDefaultSystemFonts = () => {\r\n  // 设置内置的系统字体列表\r\n  fontOptions.value = [\r\n    { label: '默认字体', value: 'default', isDefault: true },\r\n    { label: '黑体', value: 'heiti' },\r\n    { label: '宋体', value: 'songti' },\r\n    { label: '微软雅黑', value: 'msyh' },\r\n    { label: '楷体', value: 'kaiti' }\r\n  ];\r\n  \r\n  // 设置默认字体\r\n  setDefaultFont();\r\n}\r\n\r\n// 设置默认字体\r\nconst setDefaultFont = () => {\r\n  // 获取默认字体值\r\n  const defaultFontValue = getDefaultFontValue();\r\n  console.log('设置默认字体为:', defaultFontValue);\r\n  \r\n  // 设置表单中的默认字体，但只在未设置字体时才应用\r\n  if (templateForm.text1 && !templateForm.text1.font) {\r\n    templateForm.text1.font = defaultFontValue;\r\n    console.log('设置文字1默认字体为:', defaultFontValue);\r\n  }\r\n  \r\n  if (templateForm.text2 && !templateForm.text2.font) {\r\n    templateForm.text2.font = defaultFontValue;\r\n    console.log('设置文字2默认字体为:', defaultFontValue);\r\n  }\r\n}\r\n\r\n// 获取默认字体值\r\nconst getDefaultFontValue = () => {\r\n  // 查找标记为默认的字体\r\n  const defaultFont = fontOptions.value.find(font => font.isDefault);\r\n  if (defaultFont) {\r\n    console.log('使用后端指定的默认字体:', defaultFont.value);\r\n    return defaultFont.value;\r\n  }\r\n  \r\n  // 如果没有标记为默认的字体，按以下顺序尝试\r\n  const preferredFonts = ['default', 'msyh', 'heiti', 'songti', 'kaiti'];\r\n  for (const fontValue of preferredFonts) {\r\n    if (fontOptions.value.some(font => font.value === fontValue)) {\r\n      console.log('使用首选字体:', fontValue);\r\n      return fontValue;\r\n    }\r\n  }\r\n  \r\n  // 如果都不存在，使用第一个字体\r\n  if (fontOptions.value.length > 0) {\r\n    console.log('使用第一个可用字体:', fontOptions.value[0].value);\r\n    return fontOptions.value[0].value;\r\n  }\r\n  \r\n  // 真的没有任何字体时，返回默认值\r\n  console.log('没有可用字体，使用固定默认值: default');\r\n  return 'default';\r\n}\r\n\r\n// 加载自定义字体\r\nconst loadFonts = async () => {\r\n  // 清除之前加载的字体\r\n  document.querySelectorAll('style[data-font-loader=\"true\"]').forEach(el => el.remove());\r\n\r\n  // 为每个自定义字体创建@font-face规则\r\n  const customFonts = fontOptions.value.filter(font => font.url);\r\n  \r\n  if (customFonts.length > 0) {\r\n    console.log(`开始加载 ${customFonts.length} 个自定义字体`);\r\n    \r\n    // 创建样式表\r\n    const style = document.createElement('style');\r\n    style.setAttribute('data-font-loader', 'true');\r\n    \r\n    let fontFaceRules = '';\r\n    const fontLoadPromises = [];\r\n    \r\n    // 为每个字体创建@font-face规则并尝试预加载\r\n    customFonts.forEach(font => {\r\n      // 添加@font-face规则\r\n      fontFaceRules += `\r\n        @font-face {\r\n          font-family: '${font.value}';\r\n          src: url('${font.url}') format('${getFontFormat(font.url)}');\r\n          font-weight: normal;\r\n          font-style: normal;\r\n        }\r\n      `;\r\n      \r\n      // 尝试使用FontFace API预加载字体\r\n      try {\r\n        const fontFace = new FontFace(font.value, `url(${font.url})`);\r\n        const fontLoadPromise = fontFace.load()\r\n          .then(loadedFont => {\r\n            // 将字体添加到document.fonts中\r\n            document.fonts.add(loadedFont);\r\n            console.log(`字体 ${font.value} 预加载成功`);\r\n          })\r\n          .catch(error => {\r\n            console.warn(`字体 ${font.value} 预加载失败:`, error);\r\n          });\r\n        \r\n        fontLoadPromises.push(fontLoadPromise);\r\n      } catch (error) {\r\n        console.warn(`字体 ${font.value} 初始化失败:`, error);\r\n      }\r\n    });\r\n    \r\n    // 添加样式表到文档\r\n    style.textContent = fontFaceRules;\r\n    document.head.appendChild(style);\r\n    \r\n    // 等待所有字体加载尝试完成\r\n    try {\r\n      await Promise.allSettled(fontLoadPromises);\r\n      console.log('所有字体加载尝试已完成');\r\n      \r\n      // 重绘Canvas显示字体\r\n      if (previewCanvas.value) {\r\n        setTimeout(() => {\r\n          redrawCanvas();\r\n        }, 200);\r\n      }\r\n    } catch (error) {\r\n      console.warn('字体加载过程中出现错误:', error);\r\n      \r\n      // 即使出错也重绘Canvas\r\n      if (previewCanvas.value) {\r\n        setTimeout(() => {\r\n          redrawCanvas();\r\n        }, 200);\r\n      }\r\n    }\r\n  } else {\r\n    console.log('没有需要加载的自定义字体');\r\n    \r\n    // 确保在没有自定义字体的情况下也能正确渲染\r\n    if (previewCanvas.value && previewUrl.value) {\r\n      redrawCanvas();\r\n    }\r\n  }\r\n  \r\n  console.log('字体加载和初始化完成');\r\n}\r\n\r\n// 根据字体URL确定格式\r\nconst getFontFormat = (url) => {\r\n  if (url.endsWith('.ttf')) return 'truetype'\r\n  if (url.endsWith('.otf')) return 'opentype'\r\n  if (url.endsWith('.woff')) return 'woff'\r\n  if (url.endsWith('.woff2')) return 'woff2'\r\n  return 'truetype' // 默认\r\n}\r\n\r\n// 处理字体文件变更\r\nconst handleFontFileChange = (file) => {\r\n  newFontForm.value.file = file;\r\n  \r\n  if (file && file.raw) {\r\n    // 销毁之前的对象URL\r\n    if (fontPreviewUrl.value) {\r\n      URL.revokeObjectURL(fontPreviewUrl.value);\r\n    }\r\n    \r\n    try {\r\n      // 创建字体的临时URL\r\n      const fontUrl = URL.createObjectURL(file.raw);\r\n      fontPreviewUrl.value = fontUrl;\r\n      \r\n      // 动态创建@font-face规则\r\n      const fontFamily = `custom_preview_${Date.now()}`;\r\n      const style = document.createElement('style');\r\n      style.setAttribute('data-font-preview', 'true');\r\n      style.textContent = `\r\n        @font-face {\r\n          font-family: '${fontFamily}';\r\n          src: url('${fontUrl}') format('${getFontFormat(file.raw.name)}');\r\n          font-weight: normal;\r\n          font-style: normal;\r\n        }\r\n        .font-preview-custom {\r\n          font-family: '${fontFamily}', Arial, sans-serif;\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n      \r\n      console.log('预览字体加载成功:', fontFamily);\r\n    } catch (error) {\r\n      console.error('字体预览加载失败:', error);\r\n      ElMessage.error('字体预览加载失败，但您仍可以上传字体');\r\n    }\r\n  }\r\n}\r\n\r\n// 初始化数据\r\nonMounted(() => {\r\n  // 初始化本地标签列表\r\n  // 先检查props.templateTags是否有实际数据\r\n  if (props.templateTags && props.templateTags.length > 0) {\r\n    console.log('使用父组件传入的模板分类:', props.templateTags);\r\n    // 使用集合确保不重复\r\n    const uniqueTagsMap = new Map();\r\n    props.templateTags.forEach(tag => {\r\n      uniqueTagsMap.set(tag.value, tag);\r\n    });\r\n    localTemplateTags.value = Array.from(uniqueTagsMap.values());\r\n  } else {\r\n    // 如果父组件没有传入标签，尝试从API获取\r\n    console.log('父组件未传入模板分类，尝试从API获取');\r\n    axios.get(`${API_BASE_URL}/template-tags`)\r\n      .then(response => {\r\n        if (response.data.success && response.data.tags && response.data.tags.length > 0) {\r\n          console.log('从API获取到模板分类:', response.data.tags);\r\n          localTemplateTags.value = response.data.tags;\r\n        } else {\r\n          console.log('API未返回有效的模板分类，使用默认值');\r\n          // 只有在API也没有返回有效数据时才使用默认值\r\n          localTemplateTags.value = [\r\n            { label: '默认分类', value: 'default' }\r\n          ];\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('获取模板分类失败:', error);\r\n        // 出错时使用默认值\r\n        localTemplateTags.value = [\r\n          { label: '默认分类', value: 'default' }\r\n        ];\r\n      });\r\n  }\r\n  console.log('初始化本地分类列表:', localTemplateTags.value);\r\n  \r\n  // 先获取字体列表，以确保字体选项可用\r\n  fetchFonts().then(() => {\r\n    // 如果是编辑模式且有传入的模板数据，则填充表单\r\n    if (props.isEditMode && props.templateData) {\r\n      console.log('编辑模式，填充模板数据:', props.templateData);\r\n      \r\n      // 填充基本信息\r\n      templateForm.name = props.templateData.name || '';\r\n      templateForm.tag = props.templateData.tag || '';\r\n      templateForm.imageSize = props.templateData.imageSize || '';\r\n      templateForm.serverImageUrl = props.templateData.previewImage || '';\r\n      // 使用processImageUrl处理图片URL\r\n      previewUrl.value = props.templateData.previewImage ? processImageUrl(props.templateData.previewImage) : '';\r\n      \r\n      // 检查后端可能使用的不同字段名称\r\n      // 填充文字区域1配置\r\n      const textArea1 = props.templateData.text1;\r\n      // 检查是否有text1_enabled参数\r\n      const text1Enabled = \r\n        props.templateData.text1_enabled === true || \r\n        props.templateData.text1_enabled === 1 ||\r\n        (textArea1 && (textArea1.enabled === true || textArea1.enabled === 1));\r\n      \r\n      console.log('文本区域1启用状态:', text1Enabled, '原始值:', props.templateData.text1_enabled);\r\n      \r\n      if (text1Enabled) {\r\n        templateForm.text1.enabled = true;\r\n        \r\n        // 如果存在text1对象，使用其中的配置\r\n        if (textArea1) {\r\n          console.log('使用文本区域1配置:', textArea1);\r\n          \r\n          // 直接使用原始字体，避免被默认值覆盖\r\n          templateForm.text1.font = textArea1.font || getDefaultFontValue();\r\n          templateForm.text1.x = typeof textArea1.x === 'number' ? textArea1.x : 10;\r\n          templateForm.text1.y = typeof textArea1.y === 'number' ? textArea1.y : 10;\r\n          templateForm.text1.width = typeof textArea1.width === 'number' ? textArea1.width : 30;\r\n          templateForm.text1.height = typeof textArea1.height === 'number' ? textArea1.height : 15;\r\n          \r\n          // 加载颜色数据\r\n          if (textArea1.colorData && textArea1.colorData.type === 'solid') {\r\n            templateForm.text1.color = textArea1.colorData.value || '#FFFFFF';\r\n          } else {\r\n            // 兼容旧数据，直接使用color字段\r\n            templateForm.text1.color = textArea1.color || '#FFFFFF';\r\n          }\r\n          \r\n          // 加载描边颜色数据 - 如果为空或全透明则设为null\r\n          if (textArea1.strokeColor && textArea1.strokeColor !== 'rgba(0, 0, 0, 0)') {\r\n            templateForm.text1.strokeColor = textArea1.strokeColor;\r\n          } else {\r\n            templateForm.text1.strokeColor = null;\r\n          }\r\n        }\r\n        \r\n        console.log('设置文字1字体为:', templateForm.text1.font, '启用状态:', templateForm.text1.enabled, \r\n                   '颜色:', templateForm.text1.color, '描边颜色:', templateForm.text1.strokeColor);\r\n      } else {\r\n        // 禁用该区域\r\n        templateForm.text1.enabled = false;\r\n        console.log('禁用文字1区域');\r\n      }\r\n      \r\n      // 填充文字区域2配置\r\n      const textArea2 = props.templateData.text2;\r\n      // 检查是否有text2_enabled参数\r\n      const text2Enabled = \r\n        props.templateData.text2_enabled === true || \r\n        props.templateData.text2_enabled === 1 ||\r\n        (textArea2 && (textArea2.enabled === true || textArea2.enabled === 1));\r\n      \r\n      console.log('文本区域2启用状态:', text2Enabled, '原始值:', props.templateData.text2_enabled);\r\n      \r\n      if (text2Enabled) {\r\n        templateForm.text2.enabled = true;\r\n        \r\n        // 如果存在text2对象，使用其中的配置\r\n        if (textArea2) {\r\n          console.log('使用文本区域2配置:', textArea2);\r\n          \r\n          // 直接使用原始字体，避免被默认值覆盖\r\n          templateForm.text2.font = textArea2.font || getDefaultFontValue();\r\n          templateForm.text2.x = typeof textArea2.x === 'number' ? textArea2.x : 10;\r\n          templateForm.text2.y = typeof textArea2.y === 'number' ? textArea2.y : 60;\r\n          templateForm.text2.width = typeof textArea2.width === 'number' ? textArea2.width : 30;\r\n          templateForm.text2.height = typeof textArea2.height === 'number' ? textArea2.height : 15;\r\n          \r\n          // 加载颜色数据\r\n          if (textArea2.colorData && textArea2.colorData.type === 'solid') {\r\n            templateForm.text2.color = textArea2.colorData.value || '#FFFFFF';\r\n          } else {\r\n            // 兼容旧数据，直接使用color字段\r\n            templateForm.text2.color = textArea2.color || '#FFFFFF';\r\n          }\r\n          \r\n          // 加载描边颜色数据 - 如果为空或全透明则设为null\r\n          if (textArea2.strokeColor && textArea2.strokeColor !== 'rgba(0, 0, 0, 0)') {\r\n            templateForm.text2.strokeColor = textArea2.strokeColor;\r\n          } else {\r\n            templateForm.text2.strokeColor = null;\r\n          }\r\n        }\r\n        \r\n        console.log('设置文字2字体为:', templateForm.text2.font, '启用状态:', templateForm.text2.enabled, \r\n                   '颜色:', templateForm.text2.color, '描边颜色:', templateForm.text2.strokeColor);\r\n      } else {\r\n        // 禁用该区域\r\n        templateForm.text2.enabled = false;\r\n        console.log('禁用文字2区域');\r\n      }\r\n      \r\n      // 重新渲染预览\r\n      if (previewUrl.value) {\r\n        setTimeout(() => {\r\n          redrawCanvas();\r\n        }, 200);\r\n      }\r\n    }\r\n  }).catch(error => {\r\n    console.error('获取字体列表失败:', error);\r\n    // 即使获取字体失败，仍然尝试填充表单\r\n    if (props.isEditMode && props.templateData) {\r\n      // 基本信息填充和错误处理...\r\n    }\r\n  });\r\n})\r\n\r\n// 组件卸载时清理\r\nonBeforeUnmount(() => {\r\n  document.removeEventListener('mousemove', onMouseMove);\r\n  document.removeEventListener('mouseup', stopDrag);\r\n  \r\n  // 释放字体URL\r\n  fontOptions.value.forEach(font => {\r\n    if (font.url) {\r\n      URL.revokeObjectURL(font.url);\r\n    }\r\n  });\r\n  \r\n  // 释放预览URL\r\n  if (previewUrl.value && previewUrl.value.startsWith('blob:')) {\r\n    URL.revokeObjectURL(previewUrl.value);\r\n  }\r\n  \r\n  // 移除字体预览样式\r\n  if (fontPreviewUrl.value) {\r\n    URL.revokeObjectURL(fontPreviewUrl.value);\r\n    document.querySelectorAll('style[data-font-preview=\"true\"]').forEach(el => el.remove());\r\n  }\r\n});\r\n\r\n// 新增的onFontChange方法\r\nconst onFontChange = (textKey = 'text1') => {\r\n  const fontValue = templateForm[textKey].font;\r\n  if (!fontValue) return;\r\n\r\n  console.log(`${textKey}字体变化:`, fontValue);\r\n  \r\n  // 获取选择的字体\r\n  const selectedFont = fontOptions.value.find(option => option.value === fontValue);\r\n  if (!selectedFont) return;\r\n\r\n  // 构建字体URL\r\n  let fontUrl = selectedFont.url;\r\n  if (!fontUrl) {\r\n    console.log(`字体 ${fontValue} 没有URL，可能是系统字体`);\r\n    // 对于系统字体直接重绘并返回\r\n    redrawCanvas();\r\n    return;\r\n  }\r\n  \r\n  console.log(`字体URL: ${fontUrl}`);\r\n  \r\n  // 使用正确的字体族\r\n  const fontFamily = `'${fontValue}', \"微软雅黑\", \"Microsoft YaHei\", Arial, sans-serif`;\r\n  console.log(`使用字体族: ${fontFamily}`);\r\n  \r\n  // 先立即渲染一次，即使字体还没加载完成\r\n  redrawCanvas();\r\n  \r\n  // 确定字体格式\r\n  const fontFormat = getFontFormat(fontUrl);\r\n  \r\n  // 然后异步加载字体并再次渲染\r\n  try {\r\n    // 创建字体样式\r\n    const style = document.createElement('style');\r\n    style.setAttribute('data-font-loader-' + fontValue, 'true');\r\n    \r\n    style.textContent = `\r\n      @font-face {\r\n        font-family: '${fontValue}';\r\n        src: local('Microsoft YaHei'), local('微软雅黑'),\r\n             url('${fontUrl}') format('${fontFormat}');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n        font-display: swap;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    \r\n    // 使用FontFace API加载\r\n    const fontFace = new FontFace(fontValue, `url(${fontUrl})`, {\r\n      display: 'swap'\r\n    });\r\n    \r\n    fontFace.load()\r\n      .then(() => {\r\n        document.fonts.add(fontFace);\r\n        console.log(`字体 ${fontValue} 加载成功，更新预览`);\r\n        // 字体加载成功后，再次刷新预览以确保字体正确显示\r\n        setTimeout(() => redrawCanvas(), 50);\r\n      })\r\n      .catch(error => {\r\n        console.warn(`字体加载问题: ${error.message}`);\r\n        // 即使出错也尝试重绘\r\n        redrawCanvas();\r\n      });\r\n  } catch (e) {\r\n    console.error(`字体 ${fontValue} 加载出错:`, e);\r\n    redrawCanvas();\r\n  }\r\n};\r\n\r\n</script>\r\n<style scoped>\r\n@import './css/TemplateForm.scss';\r\n\r\n/* 添加颜色选择器组样式 */\r\n.color-picker-group {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.color-divider {\r\n  margin: 0 5px;\r\n}\r\n\r\n.direct-color-picker {\r\n  margin-right: 0;\r\n}\r\n\r\n/* 为节省空间调整标签和表单项间距 */\r\n.el-form-item.mb-2 {\r\n  margin-bottom: 8px !important;\r\n}\r\n\r\n/* 紧凑型表单项样式 */\r\n:deep(.el-form-item__label) {\r\n  padding-bottom: 4px;\r\n}\r\n</style> "],"names":["API_BASE_URL","IMAGE_API_URL","props","__props","emit","__emit","templateFormRef","ref","previewUrl","previewCanvas","canvasContext","previewImage","showAddTagDialog","fontPreviewUrl","localTemplateTags","isDragging","activeTextArea","dragStartPos","dragType","resizeHandle","newTagForm","fontUploadDialogVisible","newFontForm","imageSizeOptions","fontOptions","templateForm","reactive","templateRules","rule","value","callback","processImageUrl","url","baseURL","processedUrl","watch","newUrl","loadCanvasImage","redrawCanvas","e","ElMessage","setupCanvas","container","containerWidth","containerHeight","imgRatio","containerRatio","canvasWidth","canvasHeight","canvas","ctx","drawTextRect","error","text","rectData","x","y","width","height","isActive","fontFamily","f","fontInfo","sampleText","fontSize","handle","getFontFamily","fontType","customFont","font","isPointInRect","rect","rectX","rectWidth","rectHeight","rectY","checkResizeHandle","handleSize","startDrag","mouseX","mouseY","textAreaFound","onMouseMove","deltaX","deltaY","activeRect","newWidth","newHeight","stopDrag","handleImageChange","file","formData","response","axios","_b","_a","submitTemplateForm","valid","tagName","tag","templateData","text1Font","validateFontExists","text2Font","returnTemplate","fontValue","getDefaultFontValue","beforeImageUpload","isJPGOrPNG","isLt5M","handleFontUpload","targetTextArea","createFontPreview","fontUrl","el","style","getFontFormat","loadedFont","err","submitFontUpload","fileRaw","fontDisplayName","loadingMessage","newFont","existingIndex","loadFonts","fetchFonts","errorMessage","loadingEl","addNewTag","newValue","newTag","existingByLabel","setDefaultSystemFonts","setDefaultFont","defaultFontValue","defaultFont","preferredFonts","customFonts","fontFaceRules","fontLoadPromises","fontLoadPromise","handleFontFileChange","onMounted","uniqueTagsMap","textArea1","textArea2","onBeforeUnmount","onFontChange","textKey","selectedFont","option","fontFormat","fontFace","_ctx","_cache","_component_el_input","__unplugin_components_0","_component_el_form_item","__unplugin_components_1","_component_el_button","__unplugin_components_2","_component_el_upload","__unplugin_components_3","_component_el_option","__unplugin_components_4","_component_el_divider","__unplugin_components_5","_component_el_select","__unplugin_components_6","_component_el_icon","__unplugin_components_7","_component_el_switch","__unplugin_components_8","_component_el_color_picker","__unplugin_components_9","_component_el_col","_component_el_row","__unplugin_components_11","_component_el_form","__unplugin_components_12","_component_el_dialog","__unplugin_components_13","_createElementBlock","_Fragment","_createVNode","_withCtx","_createElementVNode","_hoisted_1","$event"],"mappings":"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"}